
led_animation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000299c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002aa8  08002aa8  00012aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002acc  08002acc  00020044  2**0
                  CONTENTS
  4 .ARM          00000000  08002acc  08002acc  00020044  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002acc  08002acc  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002acc  08002acc  00012acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ad0  08002ad0  00012ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08002ad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  20000044  08002b18  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08002b18  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c01  00000000  00000000  0002006d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001caf  00000000  00000000  00029c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  0002b920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002c390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172f2  00000000  00000000  0002ccd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd46  00000000  00000000  00043fc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823ed  00000000  00000000  00050d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d30f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000284c  00000000  00000000  000d3148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000044 	.word	0x20000044
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a90 	.word	0x08002a90

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000048 	.word	0x20000048
 8000148:	08002a90 	.word	0x08002a90

0800014c <getkeyInput>:

int timePress[10];
int buttonFlag[10];
int buttonkey[10][4];

void getkeyInput(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
//		if(timePress<=0){
//			buttonkey[j][3]=NORMAL;
//			timePress[j]=100;
//		}
//	}
	if(timer_flag[5]==1&& HAL_GPIO_ReadPin(BT0_GPIO_Port, BT0_Pin)==0){
 8000150:	4b23      	ldr	r3, [pc, #140]	; (80001e0 <getkeyInput+0x94>)
 8000152:	695b      	ldr	r3, [r3, #20]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d112      	bne.n	800017e <getkeyInput+0x32>
 8000158:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800015c:	4821      	ldr	r0, [pc, #132]	; (80001e4 <getkeyInput+0x98>)
 800015e:	f001 fc6b 	bl	8001a38 <HAL_GPIO_ReadPin>
 8000162:	4603      	mov	r3, r0
 8000164:	2b00      	cmp	r3, #0
 8000166:	d10a      	bne.n	800017e <getkeyInput+0x32>
		buttonFlag[0]=1;
 8000168:	4b1f      	ldr	r3, [pc, #124]	; (80001e8 <getkeyInput+0x9c>)
 800016a:	2201      	movs	r2, #1
 800016c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800016e:	2120      	movs	r1, #32
 8000170:	481c      	ldr	r0, [pc, #112]	; (80001e4 <getkeyInput+0x98>)
 8000172:	f001 fc90 	bl	8001a96 <HAL_GPIO_TogglePin>
		set_timer(5, 50);
 8000176:	2132      	movs	r1, #50	; 0x32
 8000178:	2005      	movs	r0, #5
 800017a:	f001 f873 	bl	8001264 <set_timer>
	}
	if(timer_flag[6]==1&& HAL_GPIO_ReadPin(BT1_GPIO_Port, BT1_Pin)==0){
 800017e:	4b18      	ldr	r3, [pc, #96]	; (80001e0 <getkeyInput+0x94>)
 8000180:	699b      	ldr	r3, [r3, #24]
 8000182:	2b01      	cmp	r3, #1
 8000184:	d112      	bne.n	80001ac <getkeyInput+0x60>
 8000186:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800018a:	4816      	ldr	r0, [pc, #88]	; (80001e4 <getkeyInput+0x98>)
 800018c:	f001 fc54 	bl	8001a38 <HAL_GPIO_ReadPin>
 8000190:	4603      	mov	r3, r0
 8000192:	2b00      	cmp	r3, #0
 8000194:	d10a      	bne.n	80001ac <getkeyInput+0x60>
		buttonFlag[1]=1;
 8000196:	4b14      	ldr	r3, [pc, #80]	; (80001e8 <getkeyInput+0x9c>)
 8000198:	2201      	movs	r2, #1
 800019a:	605a      	str	r2, [r3, #4]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800019c:	2120      	movs	r1, #32
 800019e:	4811      	ldr	r0, [pc, #68]	; (80001e4 <getkeyInput+0x98>)
 80001a0:	f001 fc79 	bl	8001a96 <HAL_GPIO_TogglePin>
		set_timer(6, 50);
 80001a4:	2132      	movs	r1, #50	; 0x32
 80001a6:	2006      	movs	r0, #6
 80001a8:	f001 f85c 	bl	8001264 <set_timer>
	}
	if(timer_flag[7]==1&& HAL_GPIO_ReadPin(BT2_GPIO_Port, BT2_Pin)==0){
 80001ac:	4b0c      	ldr	r3, [pc, #48]	; (80001e0 <getkeyInput+0x94>)
 80001ae:	69db      	ldr	r3, [r3, #28]
 80001b0:	2b01      	cmp	r3, #1
 80001b2:	d112      	bne.n	80001da <getkeyInput+0x8e>
 80001b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001b8:	480a      	ldr	r0, [pc, #40]	; (80001e4 <getkeyInput+0x98>)
 80001ba:	f001 fc3d 	bl	8001a38 <HAL_GPIO_ReadPin>
 80001be:	4603      	mov	r3, r0
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d10a      	bne.n	80001da <getkeyInput+0x8e>
		buttonFlag[2]=1;
 80001c4:	4b08      	ldr	r3, [pc, #32]	; (80001e8 <getkeyInput+0x9c>)
 80001c6:	2201      	movs	r2, #1
 80001c8:	609a      	str	r2, [r3, #8]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80001ca:	2120      	movs	r1, #32
 80001cc:	4805      	ldr	r0, [pc, #20]	; (80001e4 <getkeyInput+0x98>)
 80001ce:	f001 fc62 	bl	8001a96 <HAL_GPIO_TogglePin>
		set_timer(7, 50);
 80001d2:	2132      	movs	r1, #50	; 0x32
 80001d4:	2007      	movs	r0, #7
 80001d6:	f001 f845 	bl	8001264 <set_timer>
//		}
//	}



}
 80001da:	bf00      	nop
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	20000014 	.word	0x20000014
 80001e4:	40010800 	.word	0x40010800
 80001e8:	2000010c 	.word	0x2000010c

080001ec <isButtonPress>:
int isButtonPress(int i){
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	if(buttonFlag[i] == 1){
 80001f4:	4a09      	ldr	r2, [pc, #36]	; (800021c <isButtonPress+0x30>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001fc:	2b01      	cmp	r3, #1
 80001fe:	d106      	bne.n	800020e <isButtonPress+0x22>
		buttonFlag[i] = 0;
 8000200:	4a06      	ldr	r2, [pc, #24]	; (800021c <isButtonPress+0x30>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	2100      	movs	r1, #0
 8000206:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800020a:	2301      	movs	r3, #1
 800020c:	e000      	b.n	8000210 <isButtonPress+0x24>
	}
	return 0;
 800020e:	2300      	movs	r3, #0
}
 8000210:	4618      	mov	r0, r3
 8000212:	370c      	adds	r7, #12
 8000214:	46bd      	mov	sp, r7
 8000216:	bc80      	pop	{r7}
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	2000010c 	.word	0x2000010c

08000220 <fsm_auto_run>:
 */


#include "fsm_auto.h"

void fsm_auto_run(){
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	switch (status){
 8000224:	4bb2      	ldr	r3, [pc, #712]	; (80004f0 <fsm_auto_run+0x2d0>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	3b01      	subs	r3, #1
 800022a:	2b04      	cmp	r3, #4
 800022c:	f200 81a4 	bhi.w	8000578 <fsm_auto_run+0x358>
 8000230:	a201      	add	r2, pc, #4	; (adr r2, 8000238 <fsm_auto_run+0x18>)
 8000232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000236:	bf00      	nop
 8000238:	0800024d 	.word	0x0800024d
 800023c:	080002a3 	.word	0x080002a3
 8000240:	08000335 	.word	0x08000335
 8000244:	080003cb 	.word	0x080003cb
 8000248:	0800045b 	.word	0x0800045b
	case INIT:
		resetled();
 800024c:	f000 fdec 	bl	8000e28 <resetled>
		status=AUTO_RED_GREEN;
 8000250:	4ba7      	ldr	r3, [pc, #668]	; (80004f0 <fsm_auto_run+0x2d0>)
 8000252:	2202      	movs	r2, #2
 8000254:	601a      	str	r2, [r3, #0]
		led_traffic(RED_GREEN);
 8000256:	2002      	movs	r0, #2
 8000258:	f001 f844 	bl	80012e4 <led_traffic>
		set_timer(0, 24);
 800025c:	2118      	movs	r1, #24
 800025e:	2000      	movs	r0, #0
 8000260:	f001 f800 	bl	8001264 <set_timer>
		set_timer(1, time_green);//led
 8000264:	4ba3      	ldr	r3, [pc, #652]	; (80004f4 <fsm_auto_run+0x2d4>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4619      	mov	r1, r3
 800026a:	2001      	movs	r0, #1
 800026c:	f000 fffa 	bl	8001264 <set_timer>
		set_timer(2,100);
 8000270:	2164      	movs	r1, #100	; 0x64
 8000272:	2002      	movs	r0, #2
 8000274:	f000 fff6 	bl	8001264 <set_timer>
		counter_reset();
 8000278:	f000 f988 	bl	800058c <counter_reset>
		updateClockBuffer(--counter[0], --counter[1]);
 800027c:	4b9e      	ldr	r3, [pc, #632]	; (80004f8 <fsm_auto_run+0x2d8>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	3b01      	subs	r3, #1
 8000282:	4a9d      	ldr	r2, [pc, #628]	; (80004f8 <fsm_auto_run+0x2d8>)
 8000284:	6013      	str	r3, [r2, #0]
 8000286:	4b9c      	ldr	r3, [pc, #624]	; (80004f8 <fsm_auto_run+0x2d8>)
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	4b9b      	ldr	r3, [pc, #620]	; (80004f8 <fsm_auto_run+0x2d8>)
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	3b01      	subs	r3, #1
 8000290:	4999      	ldr	r1, [pc, #612]	; (80004f8 <fsm_auto_run+0x2d8>)
 8000292:	604b      	str	r3, [r1, #4]
 8000294:	4b98      	ldr	r3, [pc, #608]	; (80004f8 <fsm_auto_run+0x2d8>)
 8000296:	685b      	ldr	r3, [r3, #4]
 8000298:	4619      	mov	r1, r3
 800029a:	4610      	mov	r0, r2
 800029c:	f000 fb96 	bl	80009cc <updateClockBuffer>
		break;
 80002a0:	e137      	b.n	8000512 <fsm_auto_run+0x2f2>
	case AUTO_RED_GREEN:
		if(timer_flag[2]==1){//every 1s
 80002a2:	4b96      	ldr	r3, [pc, #600]	; (80004fc <fsm_auto_run+0x2dc>)
 80002a4:	689b      	ldr	r3, [r3, #8]
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	f040 8120 	bne.w	80004ec <fsm_auto_run+0x2cc>
			updateClockBuffer(--counter[0], --counter[1]);
 80002ac:	4b92      	ldr	r3, [pc, #584]	; (80004f8 <fsm_auto_run+0x2d8>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	3b01      	subs	r3, #1
 80002b2:	4a91      	ldr	r2, [pc, #580]	; (80004f8 <fsm_auto_run+0x2d8>)
 80002b4:	6013      	str	r3, [r2, #0]
 80002b6:	4b90      	ldr	r3, [pc, #576]	; (80004f8 <fsm_auto_run+0x2d8>)
 80002b8:	681a      	ldr	r2, [r3, #0]
 80002ba:	4b8f      	ldr	r3, [pc, #572]	; (80004f8 <fsm_auto_run+0x2d8>)
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	3b01      	subs	r3, #1
 80002c0:	498d      	ldr	r1, [pc, #564]	; (80004f8 <fsm_auto_run+0x2d8>)
 80002c2:	604b      	str	r3, [r1, #4]
 80002c4:	4b8c      	ldr	r3, [pc, #560]	; (80004f8 <fsm_auto_run+0x2d8>)
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	4619      	mov	r1, r3
 80002ca:	4610      	mov	r0, r2
 80002cc:	f000 fb7e 	bl	80009cc <updateClockBuffer>
			set_timer(2, 100);
 80002d0:	2164      	movs	r1, #100	; 0x64
 80002d2:	2002      	movs	r0, #2
 80002d4:	f000 ffc6 	bl	8001264 <set_timer>
			set_timer(0, 24);
 80002d8:	2118      	movs	r1, #24
 80002da:	2000      	movs	r0, #0
 80002dc:	f000 ffc2 	bl	8001264 <set_timer>
			led_index=0;
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <fsm_auto_run+0x2e0>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]

			if(timer_flag[1]==1){
 80002e6:	4b85      	ldr	r3, [pc, #532]	; (80004fc <fsm_auto_run+0x2dc>)
 80002e8:	685b      	ldr	r3, [r3, #4]
 80002ea:	2b01      	cmp	r3, #1
 80002ec:	f040 80fe 	bne.w	80004ec <fsm_auto_run+0x2cc>
				status=AUTO_RED_YELLOW;
 80002f0:	4b7f      	ldr	r3, [pc, #508]	; (80004f0 <fsm_auto_run+0x2d0>)
 80002f2:	2203      	movs	r2, #3
 80002f4:	601a      	str	r2, [r3, #0]
				updateClockBuffer(--counter[2], counter[2]);
 80002f6:	4b80      	ldr	r3, [pc, #512]	; (80004f8 <fsm_auto_run+0x2d8>)
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	3b01      	subs	r3, #1
 80002fc:	4a7e      	ldr	r2, [pc, #504]	; (80004f8 <fsm_auto_run+0x2d8>)
 80002fe:	6093      	str	r3, [r2, #8]
 8000300:	4b7d      	ldr	r3, [pc, #500]	; (80004f8 <fsm_auto_run+0x2d8>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	4a7c      	ldr	r2, [pc, #496]	; (80004f8 <fsm_auto_run+0x2d8>)
 8000306:	6892      	ldr	r2, [r2, #8]
 8000308:	4611      	mov	r1, r2
 800030a:	4618      	mov	r0, r3
 800030c:	f000 fb5e 	bl	80009cc <updateClockBuffer>
				set_timer(1, time_yellow);
 8000310:	4b7c      	ldr	r3, [pc, #496]	; (8000504 <fsm_auto_run+0x2e4>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4619      	mov	r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	f000 ffa4 	bl	8001264 <set_timer>
				set_timer(2,100);
 800031c:	2164      	movs	r1, #100	; 0x64
 800031e:	2002      	movs	r0, #2
 8000320:	f000 ffa0 	bl	8001264 <set_timer>
				set_timer(0, 24);
 8000324:	2118      	movs	r1, #24
 8000326:	2000      	movs	r0, #0
 8000328:	f000 ff9c 	bl	8001264 <set_timer>
				led_traffic(RED_YELLOW);
 800032c:	2003      	movs	r0, #3
 800032e:	f000 ffd9 	bl	80012e4 <led_traffic>
				}
		}
		break;
 8000332:	e0db      	b.n	80004ec <fsm_auto_run+0x2cc>
	case AUTO_RED_YELLOW:

		if(timer_flag[2]==1){//every 1s
 8000334:	4b71      	ldr	r3, [pc, #452]	; (80004fc <fsm_auto_run+0x2dc>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	2b01      	cmp	r3, #1
 800033a:	f040 80e5 	bne.w	8000508 <fsm_auto_run+0x2e8>
			updateClockBuffer(--counter[2], counter[2]);
 800033e:	4b6e      	ldr	r3, [pc, #440]	; (80004f8 <fsm_auto_run+0x2d8>)
 8000340:	689b      	ldr	r3, [r3, #8]
 8000342:	3b01      	subs	r3, #1
 8000344:	4a6c      	ldr	r2, [pc, #432]	; (80004f8 <fsm_auto_run+0x2d8>)
 8000346:	6093      	str	r3, [r2, #8]
 8000348:	4b6b      	ldr	r3, [pc, #428]	; (80004f8 <fsm_auto_run+0x2d8>)
 800034a:	689b      	ldr	r3, [r3, #8]
 800034c:	4a6a      	ldr	r2, [pc, #424]	; (80004f8 <fsm_auto_run+0x2d8>)
 800034e:	6892      	ldr	r2, [r2, #8]
 8000350:	4611      	mov	r1, r2
 8000352:	4618      	mov	r0, r3
 8000354:	f000 fb3a 	bl	80009cc <updateClockBuffer>
			set_timer(2, 100);
 8000358:	2164      	movs	r1, #100	; 0x64
 800035a:	2002      	movs	r0, #2
 800035c:	f000 ff82 	bl	8001264 <set_timer>
			set_timer(0, 24);
 8000360:	2118      	movs	r1, #24
 8000362:	2000      	movs	r0, #0
 8000364:	f000 ff7e 	bl	8001264 <set_timer>
			led_index=0;
 8000368:	4b65      	ldr	r3, [pc, #404]	; (8000500 <fsm_auto_run+0x2e0>)
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
			if(timer_flag[1]==1){
 800036e:	4b63      	ldr	r3, [pc, #396]	; (80004fc <fsm_auto_run+0x2dc>)
 8000370:	685b      	ldr	r3, [r3, #4]
 8000372:	2b01      	cmp	r3, #1
 8000374:	f040 80c8 	bne.w	8000508 <fsm_auto_run+0x2e8>
				status = AUTO_GREEN_RED;
 8000378:	4b5d      	ldr	r3, [pc, #372]	; (80004f0 <fsm_auto_run+0x2d0>)
 800037a:	2204      	movs	r2, #4
 800037c:	601a      	str	r2, [r3, #0]
				counter_reset();
 800037e:	f000 f905 	bl	800058c <counter_reset>
				updateClockBuffer(--counter[1], --counter[0]);
 8000382:	4b5d      	ldr	r3, [pc, #372]	; (80004f8 <fsm_auto_run+0x2d8>)
 8000384:	685b      	ldr	r3, [r3, #4]
 8000386:	3b01      	subs	r3, #1
 8000388:	4a5b      	ldr	r2, [pc, #364]	; (80004f8 <fsm_auto_run+0x2d8>)
 800038a:	6053      	str	r3, [r2, #4]
 800038c:	4b5a      	ldr	r3, [pc, #360]	; (80004f8 <fsm_auto_run+0x2d8>)
 800038e:	685a      	ldr	r2, [r3, #4]
 8000390:	4b59      	ldr	r3, [pc, #356]	; (80004f8 <fsm_auto_run+0x2d8>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	3b01      	subs	r3, #1
 8000396:	4958      	ldr	r1, [pc, #352]	; (80004f8 <fsm_auto_run+0x2d8>)
 8000398:	600b      	str	r3, [r1, #0]
 800039a:	4b57      	ldr	r3, [pc, #348]	; (80004f8 <fsm_auto_run+0x2d8>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4619      	mov	r1, r3
 80003a0:	4610      	mov	r0, r2
 80003a2:	f000 fb13 	bl	80009cc <updateClockBuffer>
				set_timer(1, time_green);
 80003a6:	4b53      	ldr	r3, [pc, #332]	; (80004f4 <fsm_auto_run+0x2d4>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4619      	mov	r1, r3
 80003ac:	2001      	movs	r0, #1
 80003ae:	f000 ff59 	bl	8001264 <set_timer>
				set_timer(2,100);
 80003b2:	2164      	movs	r1, #100	; 0x64
 80003b4:	2002      	movs	r0, #2
 80003b6:	f000 ff55 	bl	8001264 <set_timer>
				set_timer(0, 24);
 80003ba:	2118      	movs	r1, #24
 80003bc:	2000      	movs	r0, #0
 80003be:	f000 ff51 	bl	8001264 <set_timer>
				led_traffic(GREEN_RED);
 80003c2:	2004      	movs	r0, #4
 80003c4:	f000 ff8e 	bl	80012e4 <led_traffic>
			}
		}

		break;
 80003c8:	e09e      	b.n	8000508 <fsm_auto_run+0x2e8>

	case AUTO_GREEN_RED:
		if(timer_flag[2]==1){//every 1s
 80003ca:	4b4c      	ldr	r3, [pc, #304]	; (80004fc <fsm_auto_run+0x2dc>)
 80003cc:	689b      	ldr	r3, [r3, #8]
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	f040 809c 	bne.w	800050c <fsm_auto_run+0x2ec>
			updateClockBuffer(--counter[1], --counter[0]);
 80003d4:	4b48      	ldr	r3, [pc, #288]	; (80004f8 <fsm_auto_run+0x2d8>)
 80003d6:	685b      	ldr	r3, [r3, #4]
 80003d8:	3b01      	subs	r3, #1
 80003da:	4a47      	ldr	r2, [pc, #284]	; (80004f8 <fsm_auto_run+0x2d8>)
 80003dc:	6053      	str	r3, [r2, #4]
 80003de:	4b46      	ldr	r3, [pc, #280]	; (80004f8 <fsm_auto_run+0x2d8>)
 80003e0:	685a      	ldr	r2, [r3, #4]
 80003e2:	4b45      	ldr	r3, [pc, #276]	; (80004f8 <fsm_auto_run+0x2d8>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	3b01      	subs	r3, #1
 80003e8:	4943      	ldr	r1, [pc, #268]	; (80004f8 <fsm_auto_run+0x2d8>)
 80003ea:	600b      	str	r3, [r1, #0]
 80003ec:	4b42      	ldr	r3, [pc, #264]	; (80004f8 <fsm_auto_run+0x2d8>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4619      	mov	r1, r3
 80003f2:	4610      	mov	r0, r2
 80003f4:	f000 faea 	bl	80009cc <updateClockBuffer>
			set_timer(2, 100);
 80003f8:	2164      	movs	r1, #100	; 0x64
 80003fa:	2002      	movs	r0, #2
 80003fc:	f000 ff32 	bl	8001264 <set_timer>
			set_timer(0, 24);
 8000400:	2118      	movs	r1, #24
 8000402:	2000      	movs	r0, #0
 8000404:	f000 ff2e 	bl	8001264 <set_timer>
			led_index=0;
 8000408:	4b3d      	ldr	r3, [pc, #244]	; (8000500 <fsm_auto_run+0x2e0>)
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
			if(timer_flag[1]==1){
 800040e:	4b3b      	ldr	r3, [pc, #236]	; (80004fc <fsm_auto_run+0x2dc>)
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	2b01      	cmp	r3, #1
 8000414:	d17a      	bne.n	800050c <fsm_auto_run+0x2ec>
				status = AUTO_YELLOW_RED;
 8000416:	4b36      	ldr	r3, [pc, #216]	; (80004f0 <fsm_auto_run+0x2d0>)
 8000418:	2205      	movs	r2, #5
 800041a:	601a      	str	r2, [r3, #0]
				updateClockBuffer(--counter[2], counter[2]);
 800041c:	4b36      	ldr	r3, [pc, #216]	; (80004f8 <fsm_auto_run+0x2d8>)
 800041e:	689b      	ldr	r3, [r3, #8]
 8000420:	3b01      	subs	r3, #1
 8000422:	4a35      	ldr	r2, [pc, #212]	; (80004f8 <fsm_auto_run+0x2d8>)
 8000424:	6093      	str	r3, [r2, #8]
 8000426:	4b34      	ldr	r3, [pc, #208]	; (80004f8 <fsm_auto_run+0x2d8>)
 8000428:	689b      	ldr	r3, [r3, #8]
 800042a:	4a33      	ldr	r2, [pc, #204]	; (80004f8 <fsm_auto_run+0x2d8>)
 800042c:	6892      	ldr	r2, [r2, #8]
 800042e:	4611      	mov	r1, r2
 8000430:	4618      	mov	r0, r3
 8000432:	f000 facb 	bl	80009cc <updateClockBuffer>
				set_timer(1, time_yellow);
 8000436:	4b33      	ldr	r3, [pc, #204]	; (8000504 <fsm_auto_run+0x2e4>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4619      	mov	r1, r3
 800043c:	2001      	movs	r0, #1
 800043e:	f000 ff11 	bl	8001264 <set_timer>
				set_timer(2,100);
 8000442:	2164      	movs	r1, #100	; 0x64
 8000444:	2002      	movs	r0, #2
 8000446:	f000 ff0d 	bl	8001264 <set_timer>
				set_timer(0, 24);
 800044a:	2118      	movs	r1, #24
 800044c:	2000      	movs	r0, #0
 800044e:	f000 ff09 	bl	8001264 <set_timer>
				led_traffic(YELLOW_RED);
 8000452:	2005      	movs	r0, #5
 8000454:	f000 ff46 	bl	80012e4 <led_traffic>
			}
		}

		break;
 8000458:	e058      	b.n	800050c <fsm_auto_run+0x2ec>
	case AUTO_YELLOW_RED:
		if(timer_flag[2]==1){//every 1s
 800045a:	4b28      	ldr	r3, [pc, #160]	; (80004fc <fsm_auto_run+0x2dc>)
 800045c:	689b      	ldr	r3, [r3, #8]
 800045e:	2b01      	cmp	r3, #1
 8000460:	d156      	bne.n	8000510 <fsm_auto_run+0x2f0>
			updateClockBuffer(--counter[2], counter[2]);
 8000462:	4b25      	ldr	r3, [pc, #148]	; (80004f8 <fsm_auto_run+0x2d8>)
 8000464:	689b      	ldr	r3, [r3, #8]
 8000466:	3b01      	subs	r3, #1
 8000468:	4a23      	ldr	r2, [pc, #140]	; (80004f8 <fsm_auto_run+0x2d8>)
 800046a:	6093      	str	r3, [r2, #8]
 800046c:	4b22      	ldr	r3, [pc, #136]	; (80004f8 <fsm_auto_run+0x2d8>)
 800046e:	689b      	ldr	r3, [r3, #8]
 8000470:	4a21      	ldr	r2, [pc, #132]	; (80004f8 <fsm_auto_run+0x2d8>)
 8000472:	6892      	ldr	r2, [r2, #8]
 8000474:	4611      	mov	r1, r2
 8000476:	4618      	mov	r0, r3
 8000478:	f000 faa8 	bl	80009cc <updateClockBuffer>
			set_timer(2, 100);
 800047c:	2164      	movs	r1, #100	; 0x64
 800047e:	2002      	movs	r0, #2
 8000480:	f000 fef0 	bl	8001264 <set_timer>
			set_timer(0, 24);
 8000484:	2118      	movs	r1, #24
 8000486:	2000      	movs	r0, #0
 8000488:	f000 feec 	bl	8001264 <set_timer>
			led_index=0;
 800048c:	4b1c      	ldr	r3, [pc, #112]	; (8000500 <fsm_auto_run+0x2e0>)
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
			if(timer_flag[1]==1){
 8000492:	4b1a      	ldr	r3, [pc, #104]	; (80004fc <fsm_auto_run+0x2dc>)
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	2b01      	cmp	r3, #1
 8000498:	d13a      	bne.n	8000510 <fsm_auto_run+0x2f0>
				status = AUTO_RED_GREEN;
 800049a:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <fsm_auto_run+0x2d0>)
 800049c:	2202      	movs	r2, #2
 800049e:	601a      	str	r2, [r3, #0]
				counter_reset();
 80004a0:	f000 f874 	bl	800058c <counter_reset>
				updateClockBuffer(--counter[0], --counter[1]);
 80004a4:	4b14      	ldr	r3, [pc, #80]	; (80004f8 <fsm_auto_run+0x2d8>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	3b01      	subs	r3, #1
 80004aa:	4a13      	ldr	r2, [pc, #76]	; (80004f8 <fsm_auto_run+0x2d8>)
 80004ac:	6013      	str	r3, [r2, #0]
 80004ae:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <fsm_auto_run+0x2d8>)
 80004b0:	681a      	ldr	r2, [r3, #0]
 80004b2:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <fsm_auto_run+0x2d8>)
 80004b4:	685b      	ldr	r3, [r3, #4]
 80004b6:	3b01      	subs	r3, #1
 80004b8:	490f      	ldr	r1, [pc, #60]	; (80004f8 <fsm_auto_run+0x2d8>)
 80004ba:	604b      	str	r3, [r1, #4]
 80004bc:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <fsm_auto_run+0x2d8>)
 80004be:	685b      	ldr	r3, [r3, #4]
 80004c0:	4619      	mov	r1, r3
 80004c2:	4610      	mov	r0, r2
 80004c4:	f000 fa82 	bl	80009cc <updateClockBuffer>
				set_timer(1,time_green);
 80004c8:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <fsm_auto_run+0x2d4>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4619      	mov	r1, r3
 80004ce:	2001      	movs	r0, #1
 80004d0:	f000 fec8 	bl	8001264 <set_timer>
				set_timer(2,100);
 80004d4:	2164      	movs	r1, #100	; 0x64
 80004d6:	2002      	movs	r0, #2
 80004d8:	f000 fec4 	bl	8001264 <set_timer>
				set_timer(0, 24);
 80004dc:	2118      	movs	r1, #24
 80004de:	2000      	movs	r0, #0
 80004e0:	f000 fec0 	bl	8001264 <set_timer>
				led_traffic(RED_GREEN);
 80004e4:	2002      	movs	r0, #2
 80004e6:	f000 fefd 	bl	80012e4 <led_traffic>
			}

		}
		break;
 80004ea:	e011      	b.n	8000510 <fsm_auto_run+0x2f0>
		break;
 80004ec:	bf00      	nop
 80004ee:	e010      	b.n	8000512 <fsm_auto_run+0x2f2>
 80004f0:	20000000 	.word	0x20000000
 80004f4:	20000004 	.word	0x20000004
 80004f8:	2000015c 	.word	0x2000015c
 80004fc:	20000014 	.word	0x20000014
 8000500:	20000068 	.word	0x20000068
 8000504:	20000008 	.word	0x20000008
		break;
 8000508:	bf00      	nop
 800050a:	e002      	b.n	8000512 <fsm_auto_run+0x2f2>
		break;
 800050c:	bf00      	nop
 800050e:	e000      	b.n	8000512 <fsm_auto_run+0x2f2>
		break;
 8000510:	bf00      	nop
	default:
		return;
	}
	//SWITCH TO MANUAL
	if(isButtonPress(0)){
 8000512:	2000      	movs	r0, #0
 8000514:	f7ff fe6a 	bl	80001ec <isButtonPress>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d00f      	beq.n	800053e <fsm_auto_run+0x31e>
		counter_reset();
 800051e:	f000 f835 	bl	800058c <counter_reset>
		status += 30;//correspond status in manual
 8000522:	4b16      	ldr	r3, [pc, #88]	; (800057c <fsm_auto_run+0x35c>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	331e      	adds	r3, #30
 8000528:	4a14      	ldr	r2, [pc, #80]	; (800057c <fsm_auto_run+0x35c>)
 800052a:	6013      	str	r3, [r2, #0]
		set_timer(1, time_manual);
 800052c:	4b14      	ldr	r3, [pc, #80]	; (8000580 <fsm_auto_run+0x360>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4619      	mov	r1, r3
 8000532:	2001      	movs	r0, #1
 8000534:	f000 fe96 	bl	8001264 <set_timer>
		reset7seg();
 8000538:	f000 fcb8 	bl	8000eac <reset7seg>
		return;
 800053c:	e01d      	b.n	800057a <fsm_auto_run+0x35a>
	}
	//SWITCH TO SETTING
	if(isButtonPress(2)){
 800053e:	2002      	movs	r0, #2
 8000540:	f7ff fe54 	bl	80001ec <isButtonPress>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d005      	beq.n	8000556 <fsm_auto_run+0x336>
		resetled();
 800054a:	f000 fc6d 	bl	8000e28 <resetled>
		status= SET_GREEN;
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <fsm_auto_run+0x35c>)
 8000550:	220b      	movs	r2, #11
 8000552:	601a      	str	r2, [r3, #0]
		return;
 8000554:	e011      	b.n	800057a <fsm_auto_run+0x35a>
	}
	if(timer_flag[0]==1){
 8000556:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <fsm_auto_run+0x364>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2b01      	cmp	r3, #1
 800055c:	d10d      	bne.n	800057a <fsm_auto_run+0x35a>
		update7SEG(led_index++);
 800055e:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <fsm_auto_run+0x368>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	1c5a      	adds	r2, r3, #1
 8000564:	4908      	ldr	r1, [pc, #32]	; (8000588 <fsm_auto_run+0x368>)
 8000566:	600a      	str	r2, [r1, #0]
 8000568:	4618      	mov	r0, r3
 800056a:	f000 fa6b 	bl	8000a44 <update7SEG>
		set_timer(0, 24);
 800056e:	2118      	movs	r1, #24
 8000570:	2000      	movs	r0, #0
 8000572:	f000 fe77 	bl	8001264 <set_timer>
 8000576:	e000      	b.n	800057a <fsm_auto_run+0x35a>
		return;
 8000578:	bf00      	nop
	}

}
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000000 	.word	0x20000000
 8000580:	2000000c 	.word	0x2000000c
 8000584:	20000014 	.word	0x20000014
 8000588:	20000068 	.word	0x20000068

0800058c <counter_reset>:

void counter_reset(){
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
	counter[1]=time_green/100;
 8000590:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <counter_reset+0x44>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0f      	ldr	r2, [pc, #60]	; (80005d4 <counter_reset+0x48>)
 8000596:	fb82 1203 	smull	r1, r2, r2, r3
 800059a:	1152      	asrs	r2, r2, #5
 800059c:	17db      	asrs	r3, r3, #31
 800059e:	1ad3      	subs	r3, r2, r3
 80005a0:	4a0d      	ldr	r2, [pc, #52]	; (80005d8 <counter_reset+0x4c>)
 80005a2:	6053      	str	r3, [r2, #4]
	counter[2]=time_yellow/100;
 80005a4:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <counter_reset+0x50>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a0a      	ldr	r2, [pc, #40]	; (80005d4 <counter_reset+0x48>)
 80005aa:	fb82 1203 	smull	r1, r2, r2, r3
 80005ae:	1152      	asrs	r2, r2, #5
 80005b0:	17db      	asrs	r3, r3, #31
 80005b2:	1ad3      	subs	r3, r2, r3
 80005b4:	4a08      	ldr	r2, [pc, #32]	; (80005d8 <counter_reset+0x4c>)
 80005b6:	6093      	str	r3, [r2, #8]
	counter[0]=counter[1]+counter[2];
 80005b8:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <counter_reset+0x4c>)
 80005ba:	685a      	ldr	r2, [r3, #4]
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <counter_reset+0x4c>)
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	4413      	add	r3, r2
 80005c2:	4a05      	ldr	r2, [pc, #20]	; (80005d8 <counter_reset+0x4c>)
 80005c4:	6013      	str	r3, [r2, #0]


	}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	20000004 	.word	0x20000004
 80005d4:	51eb851f 	.word	0x51eb851f
 80005d8:	2000015c 	.word	0x2000015c
 80005dc:	20000008 	.word	0x20000008

080005e0 <fsm_manual_run>:


#include "fsm_manual.h"


void fsm_manual_run(){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	switch(status){
 80005e4:	4b3f      	ldr	r3, [pc, #252]	; (80006e4 <fsm_manual_run+0x104>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	3b20      	subs	r3, #32
 80005ea:	2b03      	cmp	r3, #3
 80005ec:	d877      	bhi.n	80006de <fsm_manual_run+0xfe>
 80005ee:	a201      	add	r2, pc, #4	; (adr r2, 80005f4 <fsm_manual_run+0x14>)
 80005f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f4:	08000605 	.word	0x08000605
 80005f8:	0800062b 	.word	0x0800062b
 80005fc:	08000651 	.word	0x08000651
 8000600:	08000677 	.word	0x08000677
	case MANUAL_RED_GREEN:

		if(isButtonPress(1)){
 8000604:	2001      	movs	r0, #1
 8000606:	f7ff fdf1 	bl	80001ec <isButtonPress>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d045      	beq.n	800069c <fsm_manual_run+0xbc>
			led_traffic(RED_YELLOW);
 8000610:	2003      	movs	r0, #3
 8000612:	f000 fe67 	bl	80012e4 <led_traffic>
			status = MANUAL_RED_YELLOW;
 8000616:	4b33      	ldr	r3, [pc, #204]	; (80006e4 <fsm_manual_run+0x104>)
 8000618:	2221      	movs	r2, #33	; 0x21
 800061a:	601a      	str	r2, [r3, #0]
			set_timer(1, time_manual);
 800061c:	4b32      	ldr	r3, [pc, #200]	; (80006e8 <fsm_manual_run+0x108>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4619      	mov	r1, r3
 8000622:	2001      	movs	r0, #1
 8000624:	f000 fe1e 	bl	8001264 <set_timer>
		}
		break;
 8000628:	e038      	b.n	800069c <fsm_manual_run+0xbc>
	case MANUAL_RED_YELLOW:
		if(isButtonPress(1)){
 800062a:	2001      	movs	r0, #1
 800062c:	f7ff fdde 	bl	80001ec <isButtonPress>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d034      	beq.n	80006a0 <fsm_manual_run+0xc0>
			led_traffic(GREEN_RED);
 8000636:	2004      	movs	r0, #4
 8000638:	f000 fe54 	bl	80012e4 <led_traffic>

			status = MANUAL_GREEN_RED;
 800063c:	4b29      	ldr	r3, [pc, #164]	; (80006e4 <fsm_manual_run+0x104>)
 800063e:	2222      	movs	r2, #34	; 0x22
 8000640:	601a      	str	r2, [r3, #0]
			set_timer(1, time_manual);
 8000642:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <fsm_manual_run+0x108>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4619      	mov	r1, r3
 8000648:	2001      	movs	r0, #1
 800064a:	f000 fe0b 	bl	8001264 <set_timer>
		}
		break;
 800064e:	e027      	b.n	80006a0 <fsm_manual_run+0xc0>
	case MANUAL_GREEN_RED:
		if(isButtonPress(1)){
 8000650:	2001      	movs	r0, #1
 8000652:	f7ff fdcb 	bl	80001ec <isButtonPress>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d023      	beq.n	80006a4 <fsm_manual_run+0xc4>
			led_traffic(YELLOW_RED);
 800065c:	2005      	movs	r0, #5
 800065e:	f000 fe41 	bl	80012e4 <led_traffic>
			status = MANUAL_YELLOW_RED;
 8000662:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <fsm_manual_run+0x104>)
 8000664:	2223      	movs	r2, #35	; 0x23
 8000666:	601a      	str	r2, [r3, #0]
			set_timer(1, time_manual);
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <fsm_manual_run+0x108>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4619      	mov	r1, r3
 800066e:	2001      	movs	r0, #1
 8000670:	f000 fdf8 	bl	8001264 <set_timer>
		}
		break;
 8000674:	e016      	b.n	80006a4 <fsm_manual_run+0xc4>
	case MANUAL_YELLOW_RED:
		if(isButtonPress(1)){
 8000676:	2001      	movs	r0, #1
 8000678:	f7ff fdb8 	bl	80001ec <isButtonPress>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d012      	beq.n	80006a8 <fsm_manual_run+0xc8>
			led_traffic(RED_GREEN);
 8000682:	2002      	movs	r0, #2
 8000684:	f000 fe2e 	bl	80012e4 <led_traffic>
			status = MANUAL_RED_GREEN;
 8000688:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <fsm_manual_run+0x104>)
 800068a:	2220      	movs	r2, #32
 800068c:	601a      	str	r2, [r3, #0]
			set_timer(1, time_manual);
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <fsm_manual_run+0x108>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4619      	mov	r1, r3
 8000694:	2001      	movs	r0, #1
 8000696:	f000 fde5 	bl	8001264 <set_timer>
		}
		break;
 800069a:	e005      	b.n	80006a8 <fsm_manual_run+0xc8>
		break;
 800069c:	bf00      	nop
 800069e:	e004      	b.n	80006aa <fsm_manual_run+0xca>
		break;
 80006a0:	bf00      	nop
 80006a2:	e002      	b.n	80006aa <fsm_manual_run+0xca>
		break;
 80006a4:	bf00      	nop
 80006a6:	e000      	b.n	80006aa <fsm_manual_run+0xca>
		break;
 80006a8:	bf00      	nop
	default:
		return;

		}
	if(timer_flag[1] ==1 || isButtonPress(0)){
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <fsm_manual_run+0x10c>)
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d005      	beq.n	80006be <fsm_manual_run+0xde>
 80006b2:	2000      	movs	r0, #0
 80006b4:	f7ff fd9a 	bl	80001ec <isButtonPress>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d005      	beq.n	80006ca <fsm_manual_run+0xea>
		status -=31;
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <fsm_manual_run+0x104>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	3b1f      	subs	r3, #31
 80006c4:	4a07      	ldr	r2, [pc, #28]	; (80006e4 <fsm_manual_run+0x104>)
 80006c6:	6013      	str	r3, [r2, #0]
		return;
 80006c8:	e00a      	b.n	80006e0 <fsm_manual_run+0x100>
	}

	if(isButtonPress(2)){
 80006ca:	2002      	movs	r0, #2
 80006cc:	f7ff fd8e 	bl	80001ec <isButtonPress>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d004      	beq.n	80006e0 <fsm_manual_run+0x100>
		status= SET_MANUAL;
 80006d6:	4b03      	ldr	r3, [pc, #12]	; (80006e4 <fsm_manual_run+0x104>)
 80006d8:	220d      	movs	r2, #13
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	e000      	b.n	80006e0 <fsm_manual_run+0x100>
		return;
 80006de:	bf00      	nop
	}
}
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000000 	.word	0x20000000
 80006e8:	2000000c 	.word	0x2000000c
 80006ec:	20000014 	.word	0x20000014

080006f0 <fsm_setting_run>:
#include "fsm_setting.h"

int temp=0;
int increased=0;

void fsm_setting_run(){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	switch(status){
 80006f4:	4b8f      	ldr	r3, [pc, #572]	; (8000934 <fsm_setting_run+0x244>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b0d      	cmp	r3, #13
 80006fa:	f000 80be 	beq.w	800087a <fsm_setting_run+0x18a>
 80006fe:	2b0d      	cmp	r3, #13
 8000700:	f300 8159 	bgt.w	80009b6 <fsm_setting_run+0x2c6>
 8000704:	2b0b      	cmp	r3, #11
 8000706:	d002      	beq.n	800070e <fsm_setting_run+0x1e>
 8000708:	2b0c      	cmp	r3, #12
 800070a:	d055      	beq.n	80007b8 <fsm_setting_run+0xc8>



		break;
	default:
		return;
 800070c:	e153      	b.n	80009b6 <fsm_setting_run+0x2c6>
		led_setting(SET_GREEN);
 800070e:	200b      	movs	r0, #11
 8000710:	f000 fe4c 	bl	80013ac <led_setting>
		if(isButtonPress(1)){
 8000714:	2001      	movs	r0, #1
 8000716:	f7ff fd69 	bl	80001ec <isButtonPress>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d016      	beq.n	800074e <fsm_setting_run+0x5e>
			increased++;
 8000720:	4b85      	ldr	r3, [pc, #532]	; (8000938 <fsm_setting_run+0x248>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	3301      	adds	r3, #1
 8000726:	4a84      	ldr	r2, [pc, #528]	; (8000938 <fsm_setting_run+0x248>)
 8000728:	6013      	str	r3, [r2, #0]
			temp+=1;
 800072a:	4b84      	ldr	r3, [pc, #528]	; (800093c <fsm_setting_run+0x24c>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	3301      	adds	r3, #1
 8000730:	4a82      	ldr	r2, [pc, #520]	; (800093c <fsm_setting_run+0x24c>)
 8000732:	6013      	str	r3, [r2, #0]
			if(temp>98){
 8000734:	4b81      	ldr	r3, [pc, #516]	; (800093c <fsm_setting_run+0x24c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b62      	cmp	r3, #98	; 0x62
 800073a:	dd02      	ble.n	8000742 <fsm_setting_run+0x52>
				temp=0;
 800073c:	4b7f      	ldr	r3, [pc, #508]	; (800093c <fsm_setting_run+0x24c>)
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
		updateClockBuffer(0, temp);
 8000742:	4b7e      	ldr	r3, [pc, #504]	; (800093c <fsm_setting_run+0x24c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4619      	mov	r1, r3
 8000748:	2000      	movs	r0, #0
 800074a:	f000 f93f 	bl	80009cc <updateClockBuffer>
		if(isButtonPress(0)){
 800074e:	2000      	movs	r0, #0
 8000750:	f7ff fd4c 	bl	80001ec <isButtonPress>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	f000 80e8 	beq.w	800092c <fsm_setting_run+0x23c>
			status = SET_YELLOW;
 800075c:	4b75      	ldr	r3, [pc, #468]	; (8000934 <fsm_setting_run+0x244>)
 800075e:	220c      	movs	r2, #12
 8000760:	601a      	str	r2, [r3, #0]
			temp*=100;
 8000762:	4b76      	ldr	r3, [pc, #472]	; (800093c <fsm_setting_run+0x24c>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2264      	movs	r2, #100	; 0x64
 8000768:	fb02 f303 	mul.w	r3, r2, r3
 800076c:	4a73      	ldr	r2, [pc, #460]	; (800093c <fsm_setting_run+0x24c>)
 800076e:	6013      	str	r3, [r2, #0]
			temp = temp^time_green;
 8000770:	4b72      	ldr	r3, [pc, #456]	; (800093c <fsm_setting_run+0x24c>)
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	4b72      	ldr	r3, [pc, #456]	; (8000940 <fsm_setting_run+0x250>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4053      	eors	r3, r2
 800077a:	4a70      	ldr	r2, [pc, #448]	; (800093c <fsm_setting_run+0x24c>)
 800077c:	6013      	str	r3, [r2, #0]
			time_green = temp^time_green;
 800077e:	4b6f      	ldr	r3, [pc, #444]	; (800093c <fsm_setting_run+0x24c>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	4b6f      	ldr	r3, [pc, #444]	; (8000940 <fsm_setting_run+0x250>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4053      	eors	r3, r2
 8000788:	4a6d      	ldr	r2, [pc, #436]	; (8000940 <fsm_setting_run+0x250>)
 800078a:	6013      	str	r3, [r2, #0]
			temp = temp^time_green;
 800078c:	4b6b      	ldr	r3, [pc, #428]	; (800093c <fsm_setting_run+0x24c>)
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	4b6b      	ldr	r3, [pc, #428]	; (8000940 <fsm_setting_run+0x250>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4053      	eors	r3, r2
 8000796:	4a69      	ldr	r2, [pc, #420]	; (800093c <fsm_setting_run+0x24c>)
 8000798:	6013      	str	r3, [r2, #0]
			if(increased<1){//no changes=old value
 800079a:	4b67      	ldr	r3, [pc, #412]	; (8000938 <fsm_setting_run+0x248>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	dc03      	bgt.n	80007aa <fsm_setting_run+0xba>
				time_green=temp;
 80007a2:	4b66      	ldr	r3, [pc, #408]	; (800093c <fsm_setting_run+0x24c>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a66      	ldr	r2, [pc, #408]	; (8000940 <fsm_setting_run+0x250>)
 80007a8:	6013      	str	r3, [r2, #0]
			increased=0;
 80007aa:	4b63      	ldr	r3, [pc, #396]	; (8000938 <fsm_setting_run+0x248>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
			temp=0;
 80007b0:	4b62      	ldr	r3, [pc, #392]	; (800093c <fsm_setting_run+0x24c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
		break;
 80007b6:	e0b9      	b.n	800092c <fsm_setting_run+0x23c>
		led_setting(SET_YELLOW);
 80007b8:	200c      	movs	r0, #12
 80007ba:	f000 fdf7 	bl	80013ac <led_setting>
		if(isButtonPress(1)){
 80007be:	2001      	movs	r0, #1
 80007c0:	f7ff fd14 	bl	80001ec <isButtonPress>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d020      	beq.n	800080c <fsm_setting_run+0x11c>
			increased++;
 80007ca:	4b5b      	ldr	r3, [pc, #364]	; (8000938 <fsm_setting_run+0x248>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	3301      	adds	r3, #1
 80007d0:	4a59      	ldr	r2, [pc, #356]	; (8000938 <fsm_setting_run+0x248>)
 80007d2:	6013      	str	r3, [r2, #0]
			temp+=1;
 80007d4:	4b59      	ldr	r3, [pc, #356]	; (800093c <fsm_setting_run+0x24c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	3301      	adds	r3, #1
 80007da:	4a58      	ldr	r2, [pc, #352]	; (800093c <fsm_setting_run+0x24c>)
 80007dc:	6013      	str	r3, [r2, #0]
			if(temp>(99-time_green/100)){
 80007de:	4b58      	ldr	r3, [pc, #352]	; (8000940 <fsm_setting_run+0x250>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a58      	ldr	r2, [pc, #352]	; (8000944 <fsm_setting_run+0x254>)
 80007e4:	fb82 1203 	smull	r1, r2, r2, r3
 80007e8:	1152      	asrs	r2, r2, #5
 80007ea:	17db      	asrs	r3, r3, #31
 80007ec:	1a9b      	subs	r3, r3, r2
 80007ee:	f103 0263 	add.w	r2, r3, #99	; 0x63
 80007f2:	4b52      	ldr	r3, [pc, #328]	; (800093c <fsm_setting_run+0x24c>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	da02      	bge.n	8000800 <fsm_setting_run+0x110>
				temp=0;
 80007fa:	4b50      	ldr	r3, [pc, #320]	; (800093c <fsm_setting_run+0x24c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
			updateClockBuffer(0, temp);
 8000800:	4b4e      	ldr	r3, [pc, #312]	; (800093c <fsm_setting_run+0x24c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4619      	mov	r1, r3
 8000806:	2000      	movs	r0, #0
 8000808:	f000 f8e0 	bl	80009cc <updateClockBuffer>
		if(isButtonPress(0)){
 800080c:	2000      	movs	r0, #0
 800080e:	f7ff fced 	bl	80001ec <isButtonPress>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	f000 808b 	beq.w	8000930 <fsm_setting_run+0x240>
			status =INIT;
 800081a:	4b46      	ldr	r3, [pc, #280]	; (8000934 <fsm_setting_run+0x244>)
 800081c:	2201      	movs	r2, #1
 800081e:	601a      	str	r2, [r3, #0]
			resetled();
 8000820:	f000 fb02 	bl	8000e28 <resetled>
			temp*=100;
 8000824:	4b45      	ldr	r3, [pc, #276]	; (800093c <fsm_setting_run+0x24c>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2264      	movs	r2, #100	; 0x64
 800082a:	fb02 f303 	mul.w	r3, r2, r3
 800082e:	4a43      	ldr	r2, [pc, #268]	; (800093c <fsm_setting_run+0x24c>)
 8000830:	6013      	str	r3, [r2, #0]
			temp = temp^time_yellow;
 8000832:	4b42      	ldr	r3, [pc, #264]	; (800093c <fsm_setting_run+0x24c>)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	4b44      	ldr	r3, [pc, #272]	; (8000948 <fsm_setting_run+0x258>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4053      	eors	r3, r2
 800083c:	4a3f      	ldr	r2, [pc, #252]	; (800093c <fsm_setting_run+0x24c>)
 800083e:	6013      	str	r3, [r2, #0]
			time_yellow = temp^time_yellow;
 8000840:	4b3e      	ldr	r3, [pc, #248]	; (800093c <fsm_setting_run+0x24c>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	4b40      	ldr	r3, [pc, #256]	; (8000948 <fsm_setting_run+0x258>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4053      	eors	r3, r2
 800084a:	4a3f      	ldr	r2, [pc, #252]	; (8000948 <fsm_setting_run+0x258>)
 800084c:	6013      	str	r3, [r2, #0]
			temp = temp^time_yellow;
 800084e:	4b3b      	ldr	r3, [pc, #236]	; (800093c <fsm_setting_run+0x24c>)
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	4b3d      	ldr	r3, [pc, #244]	; (8000948 <fsm_setting_run+0x258>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4053      	eors	r3, r2
 8000858:	4a38      	ldr	r2, [pc, #224]	; (800093c <fsm_setting_run+0x24c>)
 800085a:	6013      	str	r3, [r2, #0]
			if(increased<1){
 800085c:	4b36      	ldr	r3, [pc, #216]	; (8000938 <fsm_setting_run+0x248>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	dc03      	bgt.n	800086c <fsm_setting_run+0x17c>
				time_yellow=temp;
 8000864:	4b35      	ldr	r3, [pc, #212]	; (800093c <fsm_setting_run+0x24c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a37      	ldr	r2, [pc, #220]	; (8000948 <fsm_setting_run+0x258>)
 800086a:	6013      	str	r3, [r2, #0]
			increased=0;
 800086c:	4b32      	ldr	r3, [pc, #200]	; (8000938 <fsm_setting_run+0x248>)
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
			temp=0;
 8000872:	4b32      	ldr	r3, [pc, #200]	; (800093c <fsm_setting_run+0x24c>)
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
		break;
 8000878:	e05a      	b.n	8000930 <fsm_setting_run+0x240>
		if(isButtonPress(1)){
 800087a:	2001      	movs	r0, #1
 800087c:	f7ff fcb6 	bl	80001ec <isButtonPress>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d016      	beq.n	80008b4 <fsm_setting_run+0x1c4>
			increased++;
 8000886:	4b2c      	ldr	r3, [pc, #176]	; (8000938 <fsm_setting_run+0x248>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	3301      	adds	r3, #1
 800088c:	4a2a      	ldr	r2, [pc, #168]	; (8000938 <fsm_setting_run+0x248>)
 800088e:	6013      	str	r3, [r2, #0]
			temp++;
 8000890:	4b2a      	ldr	r3, [pc, #168]	; (800093c <fsm_setting_run+0x24c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	3301      	adds	r3, #1
 8000896:	4a29      	ldr	r2, [pc, #164]	; (800093c <fsm_setting_run+0x24c>)
 8000898:	6013      	str	r3, [r2, #0]
			if(temp>99){
 800089a:	4b28      	ldr	r3, [pc, #160]	; (800093c <fsm_setting_run+0x24c>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b63      	cmp	r3, #99	; 0x63
 80008a0:	dd02      	ble.n	80008a8 <fsm_setting_run+0x1b8>
				temp=0;
 80008a2:	4b26      	ldr	r3, [pc, #152]	; (800093c <fsm_setting_run+0x24c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
			updateClockBuffer(0, temp);
 80008a8:	4b24      	ldr	r3, [pc, #144]	; (800093c <fsm_setting_run+0x24c>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4619      	mov	r1, r3
 80008ae:	2000      	movs	r0, #0
 80008b0:	f000 f88c 	bl	80009cc <updateClockBuffer>
		if(isButtonPress(0)){
 80008b4:	2000      	movs	r0, #0
 80008b6:	f7ff fc99 	bl	80001ec <isButtonPress>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d047      	beq.n	8000950 <fsm_setting_run+0x260>
			status = MANUAL_RED_GREEN;
 80008c0:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <fsm_setting_run+0x244>)
 80008c2:	2220      	movs	r2, #32
 80008c4:	601a      	str	r2, [r3, #0]
			temp*=100;
 80008c6:	4b1d      	ldr	r3, [pc, #116]	; (800093c <fsm_setting_run+0x24c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2264      	movs	r2, #100	; 0x64
 80008cc:	fb02 f303 	mul.w	r3, r2, r3
 80008d0:	4a1a      	ldr	r2, [pc, #104]	; (800093c <fsm_setting_run+0x24c>)
 80008d2:	6013      	str	r3, [r2, #0]
			temp = temp^time_manual;
 80008d4:	4b19      	ldr	r3, [pc, #100]	; (800093c <fsm_setting_run+0x24c>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4b1c      	ldr	r3, [pc, #112]	; (800094c <fsm_setting_run+0x25c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4053      	eors	r3, r2
 80008de:	4a17      	ldr	r2, [pc, #92]	; (800093c <fsm_setting_run+0x24c>)
 80008e0:	6013      	str	r3, [r2, #0]
			time_manual = temp^time_manual;
 80008e2:	4b16      	ldr	r3, [pc, #88]	; (800093c <fsm_setting_run+0x24c>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	4b19      	ldr	r3, [pc, #100]	; (800094c <fsm_setting_run+0x25c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4053      	eors	r3, r2
 80008ec:	4a17      	ldr	r2, [pc, #92]	; (800094c <fsm_setting_run+0x25c>)
 80008ee:	6013      	str	r3, [r2, #0]
			temp = temp^time_manual;
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <fsm_setting_run+0x24c>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	4b15      	ldr	r3, [pc, #84]	; (800094c <fsm_setting_run+0x25c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4053      	eors	r3, r2
 80008fa:	4a10      	ldr	r2, [pc, #64]	; (800093c <fsm_setting_run+0x24c>)
 80008fc:	6013      	str	r3, [r2, #0]
			if(increased<1){
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <fsm_setting_run+0x248>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2b00      	cmp	r3, #0
 8000904:	dc03      	bgt.n	800090e <fsm_setting_run+0x21e>
				time_manual=temp;
 8000906:	4b0d      	ldr	r3, [pc, #52]	; (800093c <fsm_setting_run+0x24c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a10      	ldr	r2, [pc, #64]	; (800094c <fsm_setting_run+0x25c>)
 800090c:	6013      	str	r3, [r2, #0]
			set_timer(1, time_manual);
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <fsm_setting_run+0x25c>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4619      	mov	r1, r3
 8000914:	2001      	movs	r0, #1
 8000916:	f000 fca5 	bl	8001264 <set_timer>
			reset7seg();
 800091a:	f000 fac7 	bl	8000eac <reset7seg>
			increased=0;
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <fsm_setting_run+0x248>)
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
			temp=0;
 8000924:	4b05      	ldr	r3, [pc, #20]	; (800093c <fsm_setting_run+0x24c>)
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
		break;
 800092a:	e011      	b.n	8000950 <fsm_setting_run+0x260>
		break;
 800092c:	bf00      	nop
 800092e:	e010      	b.n	8000952 <fsm_setting_run+0x262>
		break;
 8000930:	bf00      	nop
 8000932:	e00e      	b.n	8000952 <fsm_setting_run+0x262>
 8000934:	20000000 	.word	0x20000000
 8000938:	20000064 	.word	0x20000064
 800093c:	20000060 	.word	0x20000060
 8000940:	20000004 	.word	0x20000004
 8000944:	51eb851f 	.word	0x51eb851f
 8000948:	20000008 	.word	0x20000008
 800094c:	2000000c 	.word	0x2000000c
		break;
 8000950:	bf00      	nop


	}
	if(isButtonPress(2)){
 8000952:	2002      	movs	r0, #2
 8000954:	f7ff fc4a 	bl	80001ec <isButtonPress>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d005      	beq.n	800096a <fsm_setting_run+0x27a>
			increased=0;
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <fsm_setting_run+0x2cc>)
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
				temp=0;
 8000964:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <fsm_setting_run+0x2d0>)
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
			}
	if(timer_flag[2]==1){
 800096a:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <fsm_setting_run+0x2d4>)
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d110      	bne.n	8000994 <fsm_setting_run+0x2a4>
		updateClockBuffer(0, temp);
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <fsm_setting_run+0x2d0>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4619      	mov	r1, r3
 8000978:	2000      	movs	r0, #0
 800097a:	f000 f827 	bl	80009cc <updateClockBuffer>
		set_timer(2, 100);
 800097e:	2164      	movs	r1, #100	; 0x64
 8000980:	2002      	movs	r0, #2
 8000982:	f000 fc6f 	bl	8001264 <set_timer>
		set_timer(0, 24);
 8000986:	2118      	movs	r1, #24
 8000988:	2000      	movs	r0, #0
 800098a:	f000 fc6b 	bl	8001264 <set_timer>
		led_index=0;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <fsm_setting_run+0x2d8>)
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
	}
	if(timer_flag[0]==1){
 8000994:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <fsm_setting_run+0x2d4>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d10d      	bne.n	80009b8 <fsm_setting_run+0x2c8>
		update7SEG(led_index++);
 800099c:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <fsm_setting_run+0x2d8>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	1c5a      	adds	r2, r3, #1
 80009a2:	4909      	ldr	r1, [pc, #36]	; (80009c8 <fsm_setting_run+0x2d8>)
 80009a4:	600a      	str	r2, [r1, #0]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 f84c 	bl	8000a44 <update7SEG>
		set_timer(0, 24);
 80009ac:	2118      	movs	r1, #24
 80009ae:	2000      	movs	r0, #0
 80009b0:	f000 fc58 	bl	8001264 <set_timer>
 80009b4:	e000      	b.n	80009b8 <fsm_setting_run+0x2c8>
		return;
 80009b6:	bf00      	nop
	}
}
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000064 	.word	0x20000064
 80009c0:	20000060 	.word	0x20000060
 80009c4:	20000014 	.word	0x20000014
 80009c8:	20000068 	.word	0x20000068

080009cc <updateClockBuffer>:
 */
#include "led7_seg.h"
int led_buffer[4];


void updateClockBuffer(int num_X,int num_Y){
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
	led_buffer[3]= num_Y%10;
 80009d6:	6839      	ldr	r1, [r7, #0]
 80009d8:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <updateClockBuffer+0x70>)
 80009da:	fb83 2301 	smull	r2, r3, r3, r1
 80009de:	109a      	asrs	r2, r3, #2
 80009e0:	17cb      	asrs	r3, r1, #31
 80009e2:	1ad2      	subs	r2, r2, r3
 80009e4:	4613      	mov	r3, r2
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	4413      	add	r3, r2
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	1aca      	subs	r2, r1, r3
 80009ee:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <updateClockBuffer+0x74>)
 80009f0:	60da      	str	r2, [r3, #12]
	led_buffer[2]= num_Y/10;
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	4a11      	ldr	r2, [pc, #68]	; (8000a3c <updateClockBuffer+0x70>)
 80009f6:	fb82 1203 	smull	r1, r2, r2, r3
 80009fa:	1092      	asrs	r2, r2, #2
 80009fc:	17db      	asrs	r3, r3, #31
 80009fe:	1ad3      	subs	r3, r2, r3
 8000a00:	4a0f      	ldr	r2, [pc, #60]	; (8000a40 <updateClockBuffer+0x74>)
 8000a02:	6093      	str	r3, [r2, #8]

	led_buffer[1]= num_X%10;
 8000a04:	6879      	ldr	r1, [r7, #4]
 8000a06:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <updateClockBuffer+0x70>)
 8000a08:	fb83 2301 	smull	r2, r3, r3, r1
 8000a0c:	109a      	asrs	r2, r3, #2
 8000a0e:	17cb      	asrs	r3, r1, #31
 8000a10:	1ad2      	subs	r2, r2, r3
 8000a12:	4613      	mov	r3, r2
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	4413      	add	r3, r2
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	1aca      	subs	r2, r1, r3
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <updateClockBuffer+0x74>)
 8000a1e:	605a      	str	r2, [r3, #4]
	led_buffer[0]= num_X/10;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a06      	ldr	r2, [pc, #24]	; (8000a3c <updateClockBuffer+0x70>)
 8000a24:	fb82 1203 	smull	r1, r2, r2, r3
 8000a28:	1092      	asrs	r2, r2, #2
 8000a2a:	17db      	asrs	r3, r3, #31
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	4a04      	ldr	r2, [pc, #16]	; (8000a40 <updateClockBuffer+0x74>)
 8000a30:	6013      	str	r3, [r2, #0]
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	66666667 	.word	0x66666667
 8000a40:	20000168 	.word	0x20000168

08000a44 <update7SEG>:
void update7SEG(int index){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2102      	movs	r1, #2
 8000a50:	482b      	ldr	r0, [pc, #172]	; (8000b00 <update7SEG+0xbc>)
 8000a52:	f001 f808 	bl	8001a66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, SET);
 8000a56:	2201      	movs	r2, #1
 8000a58:	2104      	movs	r1, #4
 8000a5a:	4829      	ldr	r0, [pc, #164]	; (8000b00 <update7SEG+0xbc>)
 8000a5c:	f001 f803 	bl	8001a66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, SET);
 8000a60:	2201      	movs	r2, #1
 8000a62:	2108      	movs	r1, #8
 8000a64:	4826      	ldr	r0, [pc, #152]	; (8000b00 <update7SEG+0xbc>)
 8000a66:	f000 fffe 	bl	8001a66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	2110      	movs	r1, #16
 8000a6e:	4824      	ldr	r0, [pc, #144]	; (8000b00 <update7SEG+0xbc>)
 8000a70:	f000 fff9 	bl	8001a66 <HAL_GPIO_WritePin>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b03      	cmp	r3, #3
 8000a78:	d83e      	bhi.n	8000af8 <update7SEG+0xb4>
 8000a7a:	a201      	add	r2, pc, #4	; (adr r2, 8000a80 <update7SEG+0x3c>)
 8000a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a80:	08000a91 	.word	0x08000a91
 8000a84:	08000aab 	.word	0x08000aab
 8000a88:	08000ac5 	.word	0x08000ac5
 8000a8c:	08000adf 	.word	0x08000adf
switch (index){
case 0:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2102      	movs	r1, #2
 8000a94:	481a      	ldr	r0, [pc, #104]	; (8000b00 <update7SEG+0xbc>)
 8000a96:	f000 ffe6 	bl	8001a66 <HAL_GPIO_WritePin>
	display7SEG(led_buffer[index]);
 8000a9a:	4a1a      	ldr	r2, [pc, #104]	; (8000b04 <update7SEG+0xc0>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 f830 	bl	8000b08 <display7SEG>
	break;
 8000aa8:	e026      	b.n	8000af8 <update7SEG+0xb4>
case 1:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2104      	movs	r1, #4
 8000aae:	4814      	ldr	r0, [pc, #80]	; (8000b00 <update7SEG+0xbc>)
 8000ab0:	f000 ffd9 	bl	8001a66 <HAL_GPIO_WritePin>
	display7SEG(led_buffer[index]);
 8000ab4:	4a13      	ldr	r2, [pc, #76]	; (8000b04 <update7SEG+0xc0>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f000 f823 	bl	8000b08 <display7SEG>
	break;
 8000ac2:	e019      	b.n	8000af8 <update7SEG+0xb4>
case 2:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2108      	movs	r1, #8
 8000ac8:	480d      	ldr	r0, [pc, #52]	; (8000b00 <update7SEG+0xbc>)
 8000aca:	f000 ffcc 	bl	8001a66 <HAL_GPIO_WritePin>
	display7SEG(led_buffer[index]);
 8000ace:	4a0d      	ldr	r2, [pc, #52]	; (8000b04 <update7SEG+0xc0>)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f816 	bl	8000b08 <display7SEG>
	break;
 8000adc:	e00c      	b.n	8000af8 <update7SEG+0xb4>
case 3:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2110      	movs	r1, #16
 8000ae2:	4807      	ldr	r0, [pc, #28]	; (8000b00 <update7SEG+0xbc>)
 8000ae4:	f000 ffbf 	bl	8001a66 <HAL_GPIO_WritePin>
	display7SEG(led_buffer[index]);
 8000ae8:	4a06      	ldr	r2, [pc, #24]	; (8000b04 <update7SEG+0xc0>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f000 f809 	bl	8000b08 <display7SEG>
	break;
 8000af6:	bf00      	nop
	}
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40010800 	.word	0x40010800
 8000b04:	20000168 	.word	0x20000168

08000b08 <display7SEG>:


void display7SEG(int num){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b09      	cmp	r3, #9
 8000b14:	f200 8180 	bhi.w	8000e18 <display7SEG+0x310>
 8000b18:	a201      	add	r2, pc, #4	; (adr r2, 8000b20 <display7SEG+0x18>)
 8000b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b1e:	bf00      	nop
 8000b20:	08000b49 	.word	0x08000b49
 8000b24:	08000b91 	.word	0x08000b91
 8000b28:	08000bd9 	.word	0x08000bd9
 8000b2c:	08000c21 	.word	0x08000c21
 8000b30:	08000c69 	.word	0x08000c69
 8000b34:	08000cb1 	.word	0x08000cb1
 8000b38:	08000cf9 	.word	0x08000cf9
 8000b3c:	08000d41 	.word	0x08000d41
 8000b40:	08000d89 	.word	0x08000d89
 8000b44:	08000dd1 	.word	0x08000dd1
	switch (num){
	case 0:
		HAL_GPIO_WritePin(S0_GPIO_Port, S0_Pin, RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	48b5      	ldr	r0, [pc, #724]	; (8000e24 <display7SEG+0x31c>)
 8000b4e:	f000 ff8a 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2102      	movs	r1, #2
 8000b56:	48b3      	ldr	r0, [pc, #716]	; (8000e24 <display7SEG+0x31c>)
 8000b58:	f000 ff85 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2104      	movs	r1, #4
 8000b60:	48b0      	ldr	r0, [pc, #704]	; (8000e24 <display7SEG+0x31c>)
 8000b62:	f000 ff80 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2108      	movs	r1, #8
 8000b6a:	48ae      	ldr	r0, [pc, #696]	; (8000e24 <display7SEG+0x31c>)
 8000b6c:	f000 ff7b 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2110      	movs	r1, #16
 8000b74:	48ab      	ldr	r0, [pc, #684]	; (8000e24 <display7SEG+0x31c>)
 8000b76:	f000 ff76 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2120      	movs	r1, #32
 8000b7e:	48a9      	ldr	r0, [pc, #676]	; (8000e24 <display7SEG+0x31c>)
 8000b80:	f000 ff71 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 	SET);
 8000b84:	2201      	movs	r2, #1
 8000b86:	2140      	movs	r1, #64	; 0x40
 8000b88:	48a6      	ldr	r0, [pc, #664]	; (8000e24 <display7SEG+0x31c>)
 8000b8a:	f000 ff6c 	bl	8001a66 <HAL_GPIO_WritePin>
		break;
 8000b8e:	e144      	b.n	8000e1a <display7SEG+0x312>
	case 1:
		HAL_GPIO_WritePin(S0_GPIO_Port, S0_Pin, 	SET);
 8000b90:	2201      	movs	r2, #1
 8000b92:	2101      	movs	r1, #1
 8000b94:	48a3      	ldr	r0, [pc, #652]	; (8000e24 <display7SEG+0x31c>)
 8000b96:	f000 ff66 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2102      	movs	r1, #2
 8000b9e:	48a1      	ldr	r0, [pc, #644]	; (8000e24 <display7SEG+0x31c>)
 8000ba0:	f000 ff61 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2104      	movs	r1, #4
 8000ba8:	489e      	ldr	r0, [pc, #632]	; (8000e24 <display7SEG+0x31c>)
 8000baa:	f000 ff5c 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 	SET);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2108      	movs	r1, #8
 8000bb2:	489c      	ldr	r0, [pc, #624]	; (8000e24 <display7SEG+0x31c>)
 8000bb4:	f000 ff57 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 	SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2110      	movs	r1, #16
 8000bbc:	4899      	ldr	r0, [pc, #612]	; (8000e24 <display7SEG+0x31c>)
 8000bbe:	f000 ff52 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 	SET);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2120      	movs	r1, #32
 8000bc6:	4897      	ldr	r0, [pc, #604]	; (8000e24 <display7SEG+0x31c>)
 8000bc8:	f000 ff4d 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 	SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2140      	movs	r1, #64	; 0x40
 8000bd0:	4894      	ldr	r0, [pc, #592]	; (8000e24 <display7SEG+0x31c>)
 8000bd2:	f000 ff48 	bl	8001a66 <HAL_GPIO_WritePin>
		break;
 8000bd6:	e120      	b.n	8000e1a <display7SEG+0x312>
	case 2:
		HAL_GPIO_WritePin(S0_GPIO_Port, S0_Pin, RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2101      	movs	r1, #1
 8000bdc:	4891      	ldr	r0, [pc, #580]	; (8000e24 <display7SEG+0x31c>)
 8000bde:	f000 ff42 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2102      	movs	r1, #2
 8000be6:	488f      	ldr	r0, [pc, #572]	; (8000e24 <display7SEG+0x31c>)
 8000be8:	f000 ff3d 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 	SET);
 8000bec:	2201      	movs	r2, #1
 8000bee:	2104      	movs	r1, #4
 8000bf0:	488c      	ldr	r0, [pc, #560]	; (8000e24 <display7SEG+0x31c>)
 8000bf2:	f000 ff38 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2108      	movs	r1, #8
 8000bfa:	488a      	ldr	r0, [pc, #552]	; (8000e24 <display7SEG+0x31c>)
 8000bfc:	f000 ff33 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2110      	movs	r1, #16
 8000c04:	4887      	ldr	r0, [pc, #540]	; (8000e24 <display7SEG+0x31c>)
 8000c06:	f000 ff2e 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 	SET);
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	2120      	movs	r1, #32
 8000c0e:	4885      	ldr	r0, [pc, #532]	; (8000e24 <display7SEG+0x31c>)
 8000c10:	f000 ff29 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2140      	movs	r1, #64	; 0x40
 8000c18:	4882      	ldr	r0, [pc, #520]	; (8000e24 <display7SEG+0x31c>)
 8000c1a:	f000 ff24 	bl	8001a66 <HAL_GPIO_WritePin>
		break;
 8000c1e:	e0fc      	b.n	8000e1a <display7SEG+0x312>
	case 3:
		HAL_GPIO_WritePin(S0_GPIO_Port, S0_Pin, RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2101      	movs	r1, #1
 8000c24:	487f      	ldr	r0, [pc, #508]	; (8000e24 <display7SEG+0x31c>)
 8000c26:	f000 ff1e 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2102      	movs	r1, #2
 8000c2e:	487d      	ldr	r0, [pc, #500]	; (8000e24 <display7SEG+0x31c>)
 8000c30:	f000 ff19 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2104      	movs	r1, #4
 8000c38:	487a      	ldr	r0, [pc, #488]	; (8000e24 <display7SEG+0x31c>)
 8000c3a:	f000 ff14 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2108      	movs	r1, #8
 8000c42:	4878      	ldr	r0, [pc, #480]	; (8000e24 <display7SEG+0x31c>)
 8000c44:	f000 ff0f 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 	SET);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2110      	movs	r1, #16
 8000c4c:	4875      	ldr	r0, [pc, #468]	; (8000e24 <display7SEG+0x31c>)
 8000c4e:	f000 ff0a 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 	SET);
 8000c52:	2201      	movs	r2, #1
 8000c54:	2120      	movs	r1, #32
 8000c56:	4873      	ldr	r0, [pc, #460]	; (8000e24 <display7SEG+0x31c>)
 8000c58:	f000 ff05 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2140      	movs	r1, #64	; 0x40
 8000c60:	4870      	ldr	r0, [pc, #448]	; (8000e24 <display7SEG+0x31c>)
 8000c62:	f000 ff00 	bl	8001a66 <HAL_GPIO_WritePin>
		break;
 8000c66:	e0d8      	b.n	8000e1a <display7SEG+0x312>
	case 4:
		HAL_GPIO_WritePin(S0_GPIO_Port, S0_Pin,SET);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	486d      	ldr	r0, [pc, #436]	; (8000e24 <display7SEG+0x31c>)
 8000c6e:	f000 fefa 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2102      	movs	r1, #2
 8000c76:	486b      	ldr	r0, [pc, #428]	; (8000e24 <display7SEG+0x31c>)
 8000c78:	f000 fef5 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2104      	movs	r1, #4
 8000c80:	4868      	ldr	r0, [pc, #416]	; (8000e24 <display7SEG+0x31c>)
 8000c82:	f000 fef0 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 	SET);
 8000c86:	2201      	movs	r2, #1
 8000c88:	2108      	movs	r1, #8
 8000c8a:	4866      	ldr	r0, [pc, #408]	; (8000e24 <display7SEG+0x31c>)
 8000c8c:	f000 feeb 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 	SET);
 8000c90:	2201      	movs	r2, #1
 8000c92:	2110      	movs	r1, #16
 8000c94:	4863      	ldr	r0, [pc, #396]	; (8000e24 <display7SEG+0x31c>)
 8000c96:	f000 fee6 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2120      	movs	r1, #32
 8000c9e:	4861      	ldr	r0, [pc, #388]	; (8000e24 <display7SEG+0x31c>)
 8000ca0:	f000 fee1 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2140      	movs	r1, #64	; 0x40
 8000ca8:	485e      	ldr	r0, [pc, #376]	; (8000e24 <display7SEG+0x31c>)
 8000caa:	f000 fedc 	bl	8001a66 <HAL_GPIO_WritePin>
		break;
 8000cae:	e0b4      	b.n	8000e1a <display7SEG+0x312>
	case 5:
		HAL_GPIO_WritePin(S0_GPIO_Port, S0_Pin,RESET);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	485b      	ldr	r0, [pc, #364]	; (8000e24 <display7SEG+0x31c>)
 8000cb6:	f000 fed6 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 	SET);
 8000cba:	2201      	movs	r2, #1
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	4859      	ldr	r0, [pc, #356]	; (8000e24 <display7SEG+0x31c>)
 8000cc0:	f000 fed1 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2104      	movs	r1, #4
 8000cc8:	4856      	ldr	r0, [pc, #344]	; (8000e24 <display7SEG+0x31c>)
 8000cca:	f000 fecc 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2108      	movs	r1, #8
 8000cd2:	4854      	ldr	r0, [pc, #336]	; (8000e24 <display7SEG+0x31c>)
 8000cd4:	f000 fec7 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 	SET);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2110      	movs	r1, #16
 8000cdc:	4851      	ldr	r0, [pc, #324]	; (8000e24 <display7SEG+0x31c>)
 8000cde:	f000 fec2 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2120      	movs	r1, #32
 8000ce6:	484f      	ldr	r0, [pc, #316]	; (8000e24 <display7SEG+0x31c>)
 8000ce8:	f000 febd 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2140      	movs	r1, #64	; 0x40
 8000cf0:	484c      	ldr	r0, [pc, #304]	; (8000e24 <display7SEG+0x31c>)
 8000cf2:	f000 feb8 	bl	8001a66 <HAL_GPIO_WritePin>
		break;
 8000cf6:	e090      	b.n	8000e1a <display7SEG+0x312>
	case 6:
		HAL_GPIO_WritePin(S0_GPIO_Port, S0_Pin, RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	4849      	ldr	r0, [pc, #292]	; (8000e24 <display7SEG+0x31c>)
 8000cfe:	f000 feb2 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 	SET);
 8000d02:	2201      	movs	r2, #1
 8000d04:	2102      	movs	r1, #2
 8000d06:	4847      	ldr	r0, [pc, #284]	; (8000e24 <display7SEG+0x31c>)
 8000d08:	f000 fead 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2104      	movs	r1, #4
 8000d10:	4844      	ldr	r0, [pc, #272]	; (8000e24 <display7SEG+0x31c>)
 8000d12:	f000 fea8 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2108      	movs	r1, #8
 8000d1a:	4842      	ldr	r0, [pc, #264]	; (8000e24 <display7SEG+0x31c>)
 8000d1c:	f000 fea3 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2110      	movs	r1, #16
 8000d24:	483f      	ldr	r0, [pc, #252]	; (8000e24 <display7SEG+0x31c>)
 8000d26:	f000 fe9e 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2120      	movs	r1, #32
 8000d2e:	483d      	ldr	r0, [pc, #244]	; (8000e24 <display7SEG+0x31c>)
 8000d30:	f000 fe99 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, RESET);
 8000d34:	2200      	movs	r2, #0
 8000d36:	2140      	movs	r1, #64	; 0x40
 8000d38:	483a      	ldr	r0, [pc, #232]	; (8000e24 <display7SEG+0x31c>)
 8000d3a:	f000 fe94 	bl	8001a66 <HAL_GPIO_WritePin>
		break;
 8000d3e:	e06c      	b.n	8000e1a <display7SEG+0x312>
	case 7:
		HAL_GPIO_WritePin(S0_GPIO_Port, S0_Pin, RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2101      	movs	r1, #1
 8000d44:	4837      	ldr	r0, [pc, #220]	; (8000e24 <display7SEG+0x31c>)
 8000d46:	f000 fe8e 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2102      	movs	r1, #2
 8000d4e:	4835      	ldr	r0, [pc, #212]	; (8000e24 <display7SEG+0x31c>)
 8000d50:	f000 fe89 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2104      	movs	r1, #4
 8000d58:	4832      	ldr	r0, [pc, #200]	; (8000e24 <display7SEG+0x31c>)
 8000d5a:	f000 fe84 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 	SET);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2108      	movs	r1, #8
 8000d62:	4830      	ldr	r0, [pc, #192]	; (8000e24 <display7SEG+0x31c>)
 8000d64:	f000 fe7f 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin,	SET);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	2110      	movs	r1, #16
 8000d6c:	482d      	ldr	r0, [pc, #180]	; (8000e24 <display7SEG+0x31c>)
 8000d6e:	f000 fe7a 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin,	SET);
 8000d72:	2201      	movs	r2, #1
 8000d74:	2120      	movs	r1, #32
 8000d76:	482b      	ldr	r0, [pc, #172]	; (8000e24 <display7SEG+0x31c>)
 8000d78:	f000 fe75 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin,	SET);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	2140      	movs	r1, #64	; 0x40
 8000d80:	4828      	ldr	r0, [pc, #160]	; (8000e24 <display7SEG+0x31c>)
 8000d82:	f000 fe70 	bl	8001a66 <HAL_GPIO_WritePin>
		break;
 8000d86:	e048      	b.n	8000e1a <display7SEG+0x312>
	case 8:
		HAL_GPIO_WritePin(S0_GPIO_Port, S0_Pin, RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	4825      	ldr	r0, [pc, #148]	; (8000e24 <display7SEG+0x31c>)
 8000d8e:	f000 fe6a 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2102      	movs	r1, #2
 8000d96:	4823      	ldr	r0, [pc, #140]	; (8000e24 <display7SEG+0x31c>)
 8000d98:	f000 fe65 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2104      	movs	r1, #4
 8000da0:	4820      	ldr	r0, [pc, #128]	; (8000e24 <display7SEG+0x31c>)
 8000da2:	f000 fe60 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2108      	movs	r1, #8
 8000daa:	481e      	ldr	r0, [pc, #120]	; (8000e24 <display7SEG+0x31c>)
 8000dac:	f000 fe5b 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2110      	movs	r1, #16
 8000db4:	481b      	ldr	r0, [pc, #108]	; (8000e24 <display7SEG+0x31c>)
 8000db6:	f000 fe56 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2120      	movs	r1, #32
 8000dbe:	4819      	ldr	r0, [pc, #100]	; (8000e24 <display7SEG+0x31c>)
 8000dc0:	f000 fe51 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2140      	movs	r1, #64	; 0x40
 8000dc8:	4816      	ldr	r0, [pc, #88]	; (8000e24 <display7SEG+0x31c>)
 8000dca:	f000 fe4c 	bl	8001a66 <HAL_GPIO_WritePin>
		break;
 8000dce:	e024      	b.n	8000e1a <display7SEG+0x312>
	case 9:
		HAL_GPIO_WritePin(S0_GPIO_Port, S0_Pin,RESET);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	4813      	ldr	r0, [pc, #76]	; (8000e24 <display7SEG+0x31c>)
 8000dd6:	f000 fe46 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2102      	movs	r1, #2
 8000dde:	4811      	ldr	r0, [pc, #68]	; (8000e24 <display7SEG+0x31c>)
 8000de0:	f000 fe41 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	2104      	movs	r1, #4
 8000de8:	480e      	ldr	r0, [pc, #56]	; (8000e24 <display7SEG+0x31c>)
 8000dea:	f000 fe3c 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2108      	movs	r1, #8
 8000df2:	480c      	ldr	r0, [pc, #48]	; (8000e24 <display7SEG+0x31c>)
 8000df4:	f000 fe37 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 	SET);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2110      	movs	r1, #16
 8000dfc:	4809      	ldr	r0, [pc, #36]	; (8000e24 <display7SEG+0x31c>)
 8000dfe:	f000 fe32 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2120      	movs	r1, #32
 8000e06:	4807      	ldr	r0, [pc, #28]	; (8000e24 <display7SEG+0x31c>)
 8000e08:	f000 fe2d 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2140      	movs	r1, #64	; 0x40
 8000e10:	4804      	ldr	r0, [pc, #16]	; (8000e24 <display7SEG+0x31c>)
 8000e12:	f000 fe28 	bl	8001a66 <HAL_GPIO_WritePin>
		break;
 8000e16:	e000      	b.n	8000e1a <display7SEG+0x312>
	default:
		break;
 8000e18:	bf00      	nop
	}

}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40010c00 	.word	0x40010c00

08000e28 <resetled>:
void resetled(){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2102      	movs	r1, #2
 8000e30:	481d      	ldr	r0, [pc, #116]	; (8000ea8 <resetled+0x80>)
 8000e32:	f000 fe18 	bl	8001a66 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2104      	movs	r1, #4
 8000e3a:	481b      	ldr	r0, [pc, #108]	; (8000ea8 <resetled+0x80>)
 8000e3c:	f000 fe13 	bl	8001a66 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, RESET);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2108      	movs	r1, #8
 8000e44:	4818      	ldr	r0, [pc, #96]	; (8000ea8 <resetled+0x80>)
 8000e46:	f000 fe0e 	bl	8001a66 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2110      	movs	r1, #16
 8000e4e:	4816      	ldr	r0, [pc, #88]	; (8000ea8 <resetled+0x80>)
 8000e50:	f000 fe09 	bl	8001a66 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2120      	movs	r1, #32
 8000e58:	4813      	ldr	r0, [pc, #76]	; (8000ea8 <resetled+0x80>)
 8000e5a:	f000 fe04 	bl	8001a66 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2140      	movs	r1, #64	; 0x40
 8000e62:	4811      	ldr	r0, [pc, #68]	; (8000ea8 <resetled+0x80>)
 8000e64:	f000 fdff 	bl	8001a66 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2180      	movs	r1, #128	; 0x80
 8000e6c:	480e      	ldr	r0, [pc, #56]	; (8000ea8 <resetled+0x80>)
 8000e6e:	f000 fdfa 	bl	8001a66 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e78:	480b      	ldr	r0, [pc, #44]	; (8000ea8 <resetled+0x80>)
 8000e7a:	f000 fdf4 	bl	8001a66 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e84:	4808      	ldr	r0, [pc, #32]	; (8000ea8 <resetled+0x80>)
 8000e86:	f000 fdee 	bl	8001a66 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e90:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <resetled+0x80>)
 8000e92:	f000 fde8 	bl	8001a66 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e9c:	4802      	ldr	r0, [pc, #8]	; (8000ea8 <resetled+0x80>)
 8000e9e:	f000 fde2 	bl	8001a66 <HAL_GPIO_WritePin>
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40010800 	.word	0x40010800

08000eac <reset7seg>:
void reset7seg(){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	4811      	ldr	r0, [pc, #68]	; (8000efc <reset7seg+0x50>)
 8000eb6:	f000 fdd6 	bl	8001a66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2102      	movs	r1, #2
 8000ebe:	480f      	ldr	r0, [pc, #60]	; (8000efc <reset7seg+0x50>)
 8000ec0:	f000 fdd1 	bl	8001a66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	2104      	movs	r1, #4
 8000ec8:	480c      	ldr	r0, [pc, #48]	; (8000efc <reset7seg+0x50>)
 8000eca:	f000 fdcc 	bl	8001a66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8000ece:	2201      	movs	r2, #1
 8000ed0:	2108      	movs	r1, #8
 8000ed2:	480a      	ldr	r0, [pc, #40]	; (8000efc <reset7seg+0x50>)
 8000ed4:	f000 fdc7 	bl	8001a66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8000ed8:	2201      	movs	r2, #1
 8000eda:	2110      	movs	r1, #16
 8000edc:	4807      	ldr	r0, [pc, #28]	; (8000efc <reset7seg+0x50>)
 8000ede:	f000 fdc2 	bl	8001a66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	2120      	movs	r1, #32
 8000ee6:	4805      	ldr	r0, [pc, #20]	; (8000efc <reset7seg+0x50>)
 8000ee8:	f000 fdbd 	bl	8001a66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8000eec:	2201      	movs	r2, #1
 8000eee:	2140      	movs	r1, #64	; 0x40
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <reset7seg+0x50>)
 8000ef2:	f000 fdb8 	bl	8001a66 <HAL_GPIO_WritePin>
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40010c00 	.word	0x40010c00

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f04:	f000 faae 	bl	8001464 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f08:	f000 f810 	bl	8000f2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0c:	f000 f896 	bl	800103c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f10:	f000 f848 	bl	8000fa4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8000f14:	4804      	ldr	r0, [pc, #16]	; (8000f28 <main+0x28>)
 8000f16:	f001 fa03 	bl	8002320 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

		 fsm_auto_run();
 8000f1a:	f7ff f981 	bl	8000220 <fsm_auto_run>
		 fsm_manual_run();
 8000f1e:	f7ff fb5f 	bl	80005e0 <fsm_manual_run>
		 fsm_setting_run();
 8000f22:	f7ff fbe5 	bl	80006f0 <fsm_setting_run>
		 fsm_auto_run();
 8000f26:	e7f8      	b.n	8000f1a <main+0x1a>
 8000f28:	20000178 	.word	0x20000178

08000f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b090      	sub	sp, #64	; 0x40
 8000f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f32:	f107 0318 	add.w	r3, r7, #24
 8000f36:	2228      	movs	r2, #40	; 0x28
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f001 fda0 	bl	8002a80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f52:	2301      	movs	r3, #1
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f56:	2310      	movs	r3, #16
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f5e:	f107 0318 	add.w	r3, r7, #24
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 fdb0 	bl	8001ac8 <HAL_RCC_OscConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f6e:	f000 f8e6 	bl	800113e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f72:	230f      	movs	r3, #15
 8000f74:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f001 f81c 	bl	8001fc8 <HAL_RCC_ClockConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f96:	f000 f8d2 	bl	800113e <Error_Handler>
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	3740      	adds	r7, #64	; 0x40
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000faa:	f107 0308 	add.w	r3, r7, #8
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb8:	463b      	mov	r3, r7
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <MX_TIM2_Init+0x94>)
 8000fc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fc6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <MX_TIM2_Init+0x94>)
 8000fca:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000fce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd0:	4b19      	ldr	r3, [pc, #100]	; (8001038 <MX_TIM2_Init+0x94>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000fd6:	4b18      	ldr	r3, [pc, #96]	; (8001038 <MX_TIM2_Init+0x94>)
 8000fd8:	2209      	movs	r2, #9
 8000fda:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fdc:	4b16      	ldr	r3, [pc, #88]	; (8001038 <MX_TIM2_Init+0x94>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <MX_TIM2_Init+0x94>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fe8:	4813      	ldr	r0, [pc, #76]	; (8001038 <MX_TIM2_Init+0x94>)
 8000fea:	f001 f949 	bl	8002280 <HAL_TIM_Base_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ff4:	f000 f8a3 	bl	800113e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ffc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ffe:	f107 0308 	add.w	r3, r7, #8
 8001002:	4619      	mov	r1, r3
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <MX_TIM2_Init+0x94>)
 8001006:	f001 fac7 	bl	8002598 <HAL_TIM_ConfigClockSource>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001010:	f000 f895 	bl	800113e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001014:	2300      	movs	r3, #0
 8001016:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800101c:	463b      	mov	r3, r7
 800101e:	4619      	mov	r1, r3
 8001020:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_TIM2_Init+0x94>)
 8001022:	f001 fc9f 	bl	8002964 <HAL_TIMEx_MasterConfigSynchronization>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800102c:	f000 f887 	bl	800113e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000178 	.word	0x20000178

0800103c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001042:	f107 0308 	add.w	r3, r7, #8
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001050:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <MX_GPIO_Init+0xb8>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	4a27      	ldr	r2, [pc, #156]	; (80010f4 <MX_GPIO_Init+0xb8>)
 8001056:	f043 0304 	orr.w	r3, r3, #4
 800105a:	6193      	str	r3, [r2, #24]
 800105c:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <MX_GPIO_Init+0xb8>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001068:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <MX_GPIO_Init+0xb8>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	4a21      	ldr	r2, [pc, #132]	; (80010f4 <MX_GPIO_Init+0xb8>)
 800106e:	f043 0308 	orr.w	r3, r3, #8
 8001072:	6193      	str	r3, [r2, #24]
 8001074:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <MX_GPIO_Init+0xb8>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	f003 0308 	and.w	r3, r3, #8
 800107c:	603b      	str	r3, [r7, #0]
 800107e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8001080:	2200      	movs	r2, #0
 8001082:	f640 71fe 	movw	r1, #4094	; 0xffe
 8001086:	481c      	ldr	r0, [pc, #112]	; (80010f8 <MX_GPIO_Init+0xbc>)
 8001088:	f000 fced 	bl	8001a66 <HAL_GPIO_WritePin>
                          |TEST_PIN_Pin|LR_X_Pin|LG_X_Pin|LY_X_Pin
                          |LR_Y_Pin|LG_Y_Pin|LY_Y_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S0_Pin|S1_Pin|S2_Pin|S3_Pin
 800108c:	2200      	movs	r2, #0
 800108e:	217f      	movs	r1, #127	; 0x7f
 8001090:	481a      	ldr	r0, [pc, #104]	; (80010fc <MX_GPIO_Init+0xc0>)
 8001092:	f000 fce8 	bl	8001a66 <HAL_GPIO_WritePin>
                          |S4_Pin|S5_Pin|S6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           TEST_PIN_Pin LR_X_Pin LG_X_Pin LY_X_Pin
                           LR_Y_Pin LG_Y_Pin LY_Y_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8001096:	f640 73fe 	movw	r3, #4094	; 0xffe
 800109a:	60bb      	str	r3, [r7, #8]
                          |TEST_PIN_Pin|LR_X_Pin|LG_X_Pin|LY_X_Pin
                          |LR_Y_Pin|LG_Y_Pin|LY_Y_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2302      	movs	r3, #2
 80010a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a8:	f107 0308 	add.w	r3, r7, #8
 80010ac:	4619      	mov	r1, r3
 80010ae:	4812      	ldr	r0, [pc, #72]	; (80010f8 <MX_GPIO_Init+0xbc>)
 80010b0:	f000 fb48 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pins : S0_Pin S1_Pin S2_Pin S3_Pin
                           S4_Pin S5_Pin S6_Pin */
  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|S3_Pin
 80010b4:	237f      	movs	r3, #127	; 0x7f
 80010b6:	60bb      	str	r3, [r7, #8]
                          |S4_Pin|S5_Pin|S6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2302      	movs	r3, #2
 80010c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c4:	f107 0308 	add.w	r3, r7, #8
 80010c8:	4619      	mov	r1, r3
 80010ca:	480c      	ldr	r0, [pc, #48]	; (80010fc <MX_GPIO_Init+0xc0>)
 80010cc:	f000 fb3a 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT0_Pin BT1_Pin BT2_Pin */
  GPIO_InitStruct.Pin = BT0_Pin|BT1_Pin|BT2_Pin;
 80010d0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80010d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010da:	2301      	movs	r3, #1
 80010dc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	4619      	mov	r1, r3
 80010e4:	4804      	ldr	r0, [pc, #16]	; (80010f8 <MX_GPIO_Init+0xbc>)
 80010e6:	f000 fb2d 	bl	8001744 <HAL_GPIO_Init>

}
 80010ea:	bf00      	nop
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40010800 	.word	0x40010800
 80010fc:	40010c00 	.word	0x40010c00

08001100 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	timerrun(0);
 8001108:	2000      	movs	r0, #0
 800110a:	f000 f8c3 	bl	8001294 <timerrun>
	timerrun(1);
 800110e:	2001      	movs	r0, #1
 8001110:	f000 f8c0 	bl	8001294 <timerrun>
	timerrun(2);
 8001114:	2002      	movs	r0, #2
 8001116:	f000 f8bd 	bl	8001294 <timerrun>
	timerrun(3);
 800111a:	2003      	movs	r0, #3
 800111c:	f000 f8ba 	bl	8001294 <timerrun>
	timerrun(5);
 8001120:	2005      	movs	r0, #5
 8001122:	f000 f8b7 	bl	8001294 <timerrun>
	timerrun(6);
 8001126:	2006      	movs	r0, #6
 8001128:	f000 f8b4 	bl	8001294 <timerrun>
	timerrun(7);
 800112c:	2007      	movs	r0, #7
 800112e:	f000 f8b1 	bl	8001294 <timerrun>
	getkeyInput();
 8001132:	f7ff f80b 	bl	800014c <getkeyInput>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001142:	b672      	cpsid	i
}
 8001144:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001146:	e7fe      	b.n	8001146 <Error_Handler+0x8>

08001148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <HAL_MspInit+0x5c>)
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	4a14      	ldr	r2, [pc, #80]	; (80011a4 <HAL_MspInit+0x5c>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6193      	str	r3, [r2, #24]
 800115a:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <HAL_MspInit+0x5c>)
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001166:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <HAL_MspInit+0x5c>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	4a0e      	ldr	r2, [pc, #56]	; (80011a4 <HAL_MspInit+0x5c>)
 800116c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001170:	61d3      	str	r3, [r2, #28]
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <HAL_MspInit+0x5c>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <HAL_MspInit+0x60>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <HAL_MspInit+0x60>)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40010000 	.word	0x40010000

080011ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011bc:	d113      	bne.n	80011e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <HAL_TIM_Base_MspInit+0x44>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <HAL_TIM_Base_MspInit+0x44>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	61d3      	str	r3, [r2, #28]
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <HAL_TIM_Base_MspInit+0x44>)
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	201c      	movs	r0, #28
 80011dc:	f000 fa7b 	bl	80016d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011e0:	201c      	movs	r0, #28
 80011e2:	f000 fa94 	bl	800170e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40021000 	.word	0x40021000

080011f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <NMI_Handler+0x4>

080011fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <HardFault_Handler+0x4>

08001200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <MemManage_Handler+0x4>

08001206 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120a:	e7fe      	b.n	800120a <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <UsageFault_Handler+0x4>

08001212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr

0800121e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr

0800122a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr

08001236 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800123a:	f000 f959 	bl	80014f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <TIM2_IRQHandler+0x10>)
 800124a:	f001 f8b5 	bl	80023b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000178 	.word	0x20000178

08001258 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr

08001264 <set_timer>:


int timer_flag[10]={0,0,0,0,0,1,1,1,0,0};
int timer_counter[10];

void set_timer(int i, int durr){
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
	timer_flag[i]=0;
 800126e:	4a07      	ldr	r2, [pc, #28]	; (800128c <set_timer+0x28>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2100      	movs	r1, #0
 8001274:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[i]=durr;
 8001278:	4905      	ldr	r1, [pc, #20]	; (8001290 <set_timer+0x2c>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr
 800128c:	20000014 	.word	0x20000014
 8001290:	200001c0 	.word	0x200001c0

08001294 <timerrun>:
void timerrun(int i){
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	if(timer_counter[i]>0){
 800129c:	4a0f      	ldr	r2, [pc, #60]	; (80012dc <timerrun+0x48>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	dd13      	ble.n	80012d0 <timerrun+0x3c>
		timer_counter[i]--;
 80012a8:	4a0c      	ldr	r2, [pc, #48]	; (80012dc <timerrun+0x48>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b0:	1e5a      	subs	r2, r3, #1
 80012b2:	490a      	ldr	r1, [pc, #40]	; (80012dc <timerrun+0x48>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[i]<=0)
 80012ba:	4a08      	ldr	r2, [pc, #32]	; (80012dc <timerrun+0x48>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	dc04      	bgt.n	80012d0 <timerrun+0x3c>
			timer_flag[i]=1;
 80012c6:	4a06      	ldr	r2, [pc, #24]	; (80012e0 <timerrun+0x4c>)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2101      	movs	r1, #1
 80012cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	200001c0 	.word	0x200001c0
 80012e0:	20000014 	.word	0x20000014

080012e4 <led_traffic>:
 *  Created on: Oct 30, 2024
 *      Author: xjkpr
 */
#include "traffic_light.h"

void led_traffic(int i){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3b02      	subs	r3, #2
 80012f0:	2b03      	cmp	r3, #3
 80012f2:	d853      	bhi.n	800139c <led_traffic+0xb8>
 80012f4:	a201      	add	r2, pc, #4	; (adr r2, 80012fc <led_traffic+0x18>)
 80012f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fa:	bf00      	nop
 80012fc:	0800130d 	.word	0x0800130d
 8001300:	0800133d 	.word	0x0800133d
 8001304:	08001357 	.word	0x08001357
 8001308:	08001385 	.word	0x08001385
	switch (i){
	case RED_GREEN:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 800130c:	2201      	movs	r2, #1
 800130e:	2140      	movs	r1, #64	; 0x40
 8001310:	4825      	ldr	r0, [pc, #148]	; (80013a8 <led_traffic+0xc4>)
 8001312:	f000 fba8 	bl	8001a66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	f44f 7180 	mov.w	r1, #256	; 0x100
 800131c:	4822      	ldr	r0, [pc, #136]	; (80013a8 <led_traffic+0xc4>)
 800131e:	f000 fba2 	bl	8001a66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001328:	481f      	ldr	r0, [pc, #124]	; (80013a8 <led_traffic+0xc4>)
 800132a:	f000 fb9c 	bl	8001a66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 800132e:	2201      	movs	r2, #1
 8001330:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001334:	481c      	ldr	r0, [pc, #112]	; (80013a8 <led_traffic+0xc4>)
 8001336:	f000 fb96 	bl	8001a66 <HAL_GPIO_WritePin>
		break;
 800133a:	e030      	b.n	800139e <led_traffic+0xba>
	case RED_YELLOW:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 800133c:	2200      	movs	r2, #0
 800133e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001342:	4819      	ldr	r0, [pc, #100]	; (80013a8 <led_traffic+0xc4>)
 8001344:	f000 fb8f 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, SET);
 8001348:	2201      	movs	r2, #1
 800134a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800134e:	4816      	ldr	r0, [pc, #88]	; (80013a8 <led_traffic+0xc4>)
 8001350:	f000 fb89 	bl	8001a66 <HAL_GPIO_WritePin>
		break;
 8001354:	e023      	b.n	800139e <led_traffic+0xba>
	case GREEN_RED:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	2140      	movs	r1, #64	; 0x40
 800135a:	4813      	ldr	r0, [pc, #76]	; (80013a8 <led_traffic+0xc4>)
 800135c:	f000 fb83 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8001360:	2201      	movs	r2, #1
 8001362:	2180      	movs	r1, #128	; 0x80
 8001364:	4810      	ldr	r0, [pc, #64]	; (80013a8 <led_traffic+0xc4>)
 8001366:	f000 fb7e 	bl	8001a66 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 800136a:	2201      	movs	r2, #1
 800136c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001370:	480d      	ldr	r0, [pc, #52]	; (80013a8 <led_traffic+0xc4>)
 8001372:	f000 fb78 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11,RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800137c:	480a      	ldr	r0, [pc, #40]	; (80013a8 <led_traffic+0xc4>)
 800137e:	f000 fb72 	bl	8001a66 <HAL_GPIO_WritePin>
		break;
 8001382:	e00c      	b.n	800139e <led_traffic+0xba>
	case YELLOW_RED:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	2180      	movs	r1, #128	; 0x80
 8001388:	4807      	ldr	r0, [pc, #28]	; (80013a8 <led_traffic+0xc4>)
 800138a:	f000 fb6c 	bl	8001a66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);
 800138e:	2201      	movs	r2, #1
 8001390:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001394:	4804      	ldr	r0, [pc, #16]	; (80013a8 <led_traffic+0xc4>)
 8001396:	f000 fb66 	bl	8001a66 <HAL_GPIO_WritePin>
		break;
 800139a:	e000      	b.n	800139e <led_traffic+0xba>
	default:
		break;
 800139c:	bf00      	nop
	}
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40010800 	.word	0x40010800

080013ac <led_setting>:
void led_setting(int i){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]

	switch(i){
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b0b      	cmp	r3, #11
 80013b8:	d003      	beq.n	80013c2 <led_setting+0x16>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b0c      	cmp	r3, #12
 80013be:	d00c      	beq.n	80013da <led_setting+0x2e>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,SET);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11,SET);
	break;
default :
	break;
 80013c0:	e023      	b.n	800140a <led_setting+0x5e>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,SET);
 80013c2:	2201      	movs	r2, #1
 80013c4:	2180      	movs	r1, #128	; 0x80
 80013c6:	4813      	ldr	r0, [pc, #76]	; (8001414 <led_setting+0x68>)
 80013c8:	f000 fb4d 	bl	8001a66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,SET);
 80013cc:	2201      	movs	r2, #1
 80013ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013d2:	4810      	ldr	r0, [pc, #64]	; (8001414 <led_setting+0x68>)
 80013d4:	f000 fb47 	bl	8001a66 <HAL_GPIO_WritePin>
	break;
 80013d8:	e017      	b.n	800140a <led_setting+0x5e>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	2180      	movs	r1, #128	; 0x80
 80013de:	480d      	ldr	r0, [pc, #52]	; (8001414 <led_setting+0x68>)
 80013e0:	f000 fb41 	bl	8001a66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,RESET);
 80013e4:	2200      	movs	r2, #0
 80013e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ea:	480a      	ldr	r0, [pc, #40]	; (8001414 <led_setting+0x68>)
 80013ec:	f000 fb3b 	bl	8001a66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,SET);
 80013f0:	2201      	movs	r2, #1
 80013f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f6:	4807      	ldr	r0, [pc, #28]	; (8001414 <led_setting+0x68>)
 80013f8:	f000 fb35 	bl	8001a66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11,SET);
 80013fc:	2201      	movs	r2, #1
 80013fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001402:	4804      	ldr	r0, [pc, #16]	; (8001414 <led_setting+0x68>)
 8001404:	f000 fb2f 	bl	8001a66 <HAL_GPIO_WritePin>
	break;
 8001408:	bf00      	nop
	}
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40010800 	.word	0x40010800

08001418 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001418:	f7ff ff1e 	bl	8001258 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800141c:	480b      	ldr	r0, [pc, #44]	; (800144c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800141e:	490c      	ldr	r1, [pc, #48]	; (8001450 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001420:	4a0c      	ldr	r2, [pc, #48]	; (8001454 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001424:	e002      	b.n	800142c <LoopCopyDataInit>

08001426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800142a:	3304      	adds	r3, #4

0800142c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800142c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001430:	d3f9      	bcc.n	8001426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001432:	4a09      	ldr	r2, [pc, #36]	; (8001458 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001434:	4c09      	ldr	r4, [pc, #36]	; (800145c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001438:	e001      	b.n	800143e <LoopFillZerobss>

0800143a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800143a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800143c:	3204      	adds	r2, #4

0800143e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001440:	d3fb      	bcc.n	800143a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001442:	f001 faf9 	bl	8002a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001446:	f7ff fd5b 	bl	8000f00 <main>
  bx lr
 800144a:	4770      	bx	lr
  ldr r0, =_sdata
 800144c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001450:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 8001454:	08002ad4 	.word	0x08002ad4
  ldr r2, =_sbss
 8001458:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 800145c:	200001ec 	.word	0x200001ec

08001460 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001460:	e7fe      	b.n	8001460 <ADC1_2_IRQHandler>
	...

08001464 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001468:	4b08      	ldr	r3, [pc, #32]	; (800148c <HAL_Init+0x28>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a07      	ldr	r2, [pc, #28]	; (800148c <HAL_Init+0x28>)
 800146e:	f043 0310 	orr.w	r3, r3, #16
 8001472:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001474:	2003      	movs	r0, #3
 8001476:	f000 f923 	bl	80016c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800147a:	200f      	movs	r0, #15
 800147c:	f000 f808 	bl	8001490 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001480:	f7ff fe62 	bl	8001148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40022000 	.word	0x40022000

08001490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001498:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <HAL_InitTick+0x54>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <HAL_InitTick+0x58>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	4619      	mov	r1, r3
 80014a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 f93b 	bl	800172a <HAL_SYSTICK_Config>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e00e      	b.n	80014dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2b0f      	cmp	r3, #15
 80014c2:	d80a      	bhi.n	80014da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c4:	2200      	movs	r2, #0
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	f04f 30ff 	mov.w	r0, #4294967295
 80014cc:	f000 f903 	bl	80016d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d0:	4a06      	ldr	r2, [pc, #24]	; (80014ec <HAL_InitTick+0x5c>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
 80014d8:	e000      	b.n	80014dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000010 	.word	0x20000010
 80014e8:	20000040 	.word	0x20000040
 80014ec:	2000003c 	.word	0x2000003c

080014f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <HAL_IncTick+0x1c>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b05      	ldr	r3, [pc, #20]	; (8001510 <HAL_IncTick+0x20>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4413      	add	r3, r2
 8001500:	4a03      	ldr	r2, [pc, #12]	; (8001510 <HAL_IncTick+0x20>)
 8001502:	6013      	str	r3, [r2, #0]
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr
 800150c:	20000040 	.word	0x20000040
 8001510:	200001e8 	.word	0x200001e8

08001514 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return uwTick;
 8001518:	4b02      	ldr	r3, [pc, #8]	; (8001524 <HAL_GetTick+0x10>)
 800151a:	681b      	ldr	r3, [r3, #0]
}
 800151c:	4618      	mov	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	200001e8 	.word	0x200001e8

08001528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <__NVIC_SetPriorityGrouping+0x44>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001544:	4013      	ands	r3, r2
 8001546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800155a:	4a04      	ldr	r2, [pc, #16]	; (800156c <__NVIC_SetPriorityGrouping+0x44>)
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	60d3      	str	r3, [r2, #12]
}
 8001560:	bf00      	nop
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001574:	4b04      	ldr	r3, [pc, #16]	; (8001588 <__NVIC_GetPriorityGrouping+0x18>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	0a1b      	lsrs	r3, r3, #8
 800157a:	f003 0307 	and.w	r3, r3, #7
}
 800157e:	4618      	mov	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	2b00      	cmp	r3, #0
 800159c:	db0b      	blt.n	80015b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	f003 021f 	and.w	r2, r3, #31
 80015a4:	4906      	ldr	r1, [pc, #24]	; (80015c0 <__NVIC_EnableIRQ+0x34>)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	095b      	lsrs	r3, r3, #5
 80015ac:	2001      	movs	r0, #1
 80015ae:	fa00 f202 	lsl.w	r2, r0, r2
 80015b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr
 80015c0:	e000e100 	.word	0xe000e100

080015c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	6039      	str	r1, [r7, #0]
 80015ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	db0a      	blt.n	80015ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	490c      	ldr	r1, [pc, #48]	; (8001610 <__NVIC_SetPriority+0x4c>)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	0112      	lsls	r2, r2, #4
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	440b      	add	r3, r1
 80015e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ec:	e00a      	b.n	8001604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4908      	ldr	r1, [pc, #32]	; (8001614 <__NVIC_SetPriority+0x50>)
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	3b04      	subs	r3, #4
 80015fc:	0112      	lsls	r2, r2, #4
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	440b      	add	r3, r1
 8001602:	761a      	strb	r2, [r3, #24]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000e100 	.word	0xe000e100
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001618:	b480      	push	{r7}
 800161a:	b089      	sub	sp, #36	; 0x24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f1c3 0307 	rsb	r3, r3, #7
 8001632:	2b04      	cmp	r3, #4
 8001634:	bf28      	it	cs
 8001636:	2304      	movcs	r3, #4
 8001638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3304      	adds	r3, #4
 800163e:	2b06      	cmp	r3, #6
 8001640:	d902      	bls.n	8001648 <NVIC_EncodePriority+0x30>
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3b03      	subs	r3, #3
 8001646:	e000      	b.n	800164a <NVIC_EncodePriority+0x32>
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	f04f 32ff 	mov.w	r2, #4294967295
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43da      	mvns	r2, r3
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	401a      	ands	r2, r3
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001660:	f04f 31ff 	mov.w	r1, #4294967295
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	fa01 f303 	lsl.w	r3, r1, r3
 800166a:	43d9      	mvns	r1, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	4313      	orrs	r3, r2
         );
}
 8001672:	4618      	mov	r0, r3
 8001674:	3724      	adds	r7, #36	; 0x24
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr

0800167c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3b01      	subs	r3, #1
 8001688:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800168c:	d301      	bcc.n	8001692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168e:	2301      	movs	r3, #1
 8001690:	e00f      	b.n	80016b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001692:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <SysTick_Config+0x40>)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3b01      	subs	r3, #1
 8001698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800169a:	210f      	movs	r1, #15
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	f7ff ff90 	bl	80015c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <SysTick_Config+0x40>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016aa:	4b04      	ldr	r3, [pc, #16]	; (80016bc <SysTick_Config+0x40>)
 80016ac:	2207      	movs	r2, #7
 80016ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	e000e010 	.word	0xe000e010

080016c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff ff2d 	bl	8001528 <__NVIC_SetPriorityGrouping>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b086      	sub	sp, #24
 80016da:	af00      	add	r7, sp, #0
 80016dc:	4603      	mov	r3, r0
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
 80016e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016e8:	f7ff ff42 	bl	8001570 <__NVIC_GetPriorityGrouping>
 80016ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	68b9      	ldr	r1, [r7, #8]
 80016f2:	6978      	ldr	r0, [r7, #20]
 80016f4:	f7ff ff90 	bl	8001618 <NVIC_EncodePriority>
 80016f8:	4602      	mov	r2, r0
 80016fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fe:	4611      	mov	r1, r2
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff5f 	bl	80015c4 <__NVIC_SetPriority>
}
 8001706:	bf00      	nop
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff35 	bl	800158c <__NVIC_EnableIRQ>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff ffa2 	bl	800167c <SysTick_Config>
 8001738:	4603      	mov	r3, r0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001744:	b480      	push	{r7}
 8001746:	b08b      	sub	sp, #44	; 0x2c
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800174e:	2300      	movs	r3, #0
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001752:	2300      	movs	r3, #0
 8001754:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001756:	e148      	b.n	80019ea <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001758:	2201      	movs	r2, #1
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	69fa      	ldr	r2, [r7, #28]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	429a      	cmp	r2, r3
 8001772:	f040 8137 	bne.w	80019e4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	4aa3      	ldr	r2, [pc, #652]	; (8001a08 <HAL_GPIO_Init+0x2c4>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d05e      	beq.n	800183e <HAL_GPIO_Init+0xfa>
 8001780:	4aa1      	ldr	r2, [pc, #644]	; (8001a08 <HAL_GPIO_Init+0x2c4>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d875      	bhi.n	8001872 <HAL_GPIO_Init+0x12e>
 8001786:	4aa1      	ldr	r2, [pc, #644]	; (8001a0c <HAL_GPIO_Init+0x2c8>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d058      	beq.n	800183e <HAL_GPIO_Init+0xfa>
 800178c:	4a9f      	ldr	r2, [pc, #636]	; (8001a0c <HAL_GPIO_Init+0x2c8>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d86f      	bhi.n	8001872 <HAL_GPIO_Init+0x12e>
 8001792:	4a9f      	ldr	r2, [pc, #636]	; (8001a10 <HAL_GPIO_Init+0x2cc>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d052      	beq.n	800183e <HAL_GPIO_Init+0xfa>
 8001798:	4a9d      	ldr	r2, [pc, #628]	; (8001a10 <HAL_GPIO_Init+0x2cc>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d869      	bhi.n	8001872 <HAL_GPIO_Init+0x12e>
 800179e:	4a9d      	ldr	r2, [pc, #628]	; (8001a14 <HAL_GPIO_Init+0x2d0>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d04c      	beq.n	800183e <HAL_GPIO_Init+0xfa>
 80017a4:	4a9b      	ldr	r2, [pc, #620]	; (8001a14 <HAL_GPIO_Init+0x2d0>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d863      	bhi.n	8001872 <HAL_GPIO_Init+0x12e>
 80017aa:	4a9b      	ldr	r2, [pc, #620]	; (8001a18 <HAL_GPIO_Init+0x2d4>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d046      	beq.n	800183e <HAL_GPIO_Init+0xfa>
 80017b0:	4a99      	ldr	r2, [pc, #612]	; (8001a18 <HAL_GPIO_Init+0x2d4>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d85d      	bhi.n	8001872 <HAL_GPIO_Init+0x12e>
 80017b6:	2b12      	cmp	r3, #18
 80017b8:	d82a      	bhi.n	8001810 <HAL_GPIO_Init+0xcc>
 80017ba:	2b12      	cmp	r3, #18
 80017bc:	d859      	bhi.n	8001872 <HAL_GPIO_Init+0x12e>
 80017be:	a201      	add	r2, pc, #4	; (adr r2, 80017c4 <HAL_GPIO_Init+0x80>)
 80017c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c4:	0800183f 	.word	0x0800183f
 80017c8:	08001819 	.word	0x08001819
 80017cc:	0800182b 	.word	0x0800182b
 80017d0:	0800186d 	.word	0x0800186d
 80017d4:	08001873 	.word	0x08001873
 80017d8:	08001873 	.word	0x08001873
 80017dc:	08001873 	.word	0x08001873
 80017e0:	08001873 	.word	0x08001873
 80017e4:	08001873 	.word	0x08001873
 80017e8:	08001873 	.word	0x08001873
 80017ec:	08001873 	.word	0x08001873
 80017f0:	08001873 	.word	0x08001873
 80017f4:	08001873 	.word	0x08001873
 80017f8:	08001873 	.word	0x08001873
 80017fc:	08001873 	.word	0x08001873
 8001800:	08001873 	.word	0x08001873
 8001804:	08001873 	.word	0x08001873
 8001808:	08001821 	.word	0x08001821
 800180c:	08001835 	.word	0x08001835
 8001810:	4a82      	ldr	r2, [pc, #520]	; (8001a1c <HAL_GPIO_Init+0x2d8>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d013      	beq.n	800183e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001816:	e02c      	b.n	8001872 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	623b      	str	r3, [r7, #32]
          break;
 800181e:	e029      	b.n	8001874 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	3304      	adds	r3, #4
 8001826:	623b      	str	r3, [r7, #32]
          break;
 8001828:	e024      	b.n	8001874 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	3308      	adds	r3, #8
 8001830:	623b      	str	r3, [r7, #32]
          break;
 8001832:	e01f      	b.n	8001874 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	330c      	adds	r3, #12
 800183a:	623b      	str	r3, [r7, #32]
          break;
 800183c:	e01a      	b.n	8001874 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d102      	bne.n	800184c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001846:	2304      	movs	r3, #4
 8001848:	623b      	str	r3, [r7, #32]
          break;
 800184a:	e013      	b.n	8001874 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d105      	bne.n	8001860 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001854:	2308      	movs	r3, #8
 8001856:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69fa      	ldr	r2, [r7, #28]
 800185c:	611a      	str	r2, [r3, #16]
          break;
 800185e:	e009      	b.n	8001874 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001860:	2308      	movs	r3, #8
 8001862:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69fa      	ldr	r2, [r7, #28]
 8001868:	615a      	str	r2, [r3, #20]
          break;
 800186a:	e003      	b.n	8001874 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800186c:	2300      	movs	r3, #0
 800186e:	623b      	str	r3, [r7, #32]
          break;
 8001870:	e000      	b.n	8001874 <HAL_GPIO_Init+0x130>
          break;
 8001872:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	2bff      	cmp	r3, #255	; 0xff
 8001878:	d801      	bhi.n	800187e <HAL_GPIO_Init+0x13a>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	e001      	b.n	8001882 <HAL_GPIO_Init+0x13e>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	3304      	adds	r3, #4
 8001882:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	2bff      	cmp	r3, #255	; 0xff
 8001888:	d802      	bhi.n	8001890 <HAL_GPIO_Init+0x14c>
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	e002      	b.n	8001896 <HAL_GPIO_Init+0x152>
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	3b08      	subs	r3, #8
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	210f      	movs	r1, #15
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	fa01 f303 	lsl.w	r3, r1, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	401a      	ands	r2, r3
 80018a8:	6a39      	ldr	r1, [r7, #32]
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	fa01 f303 	lsl.w	r3, r1, r3
 80018b0:	431a      	orrs	r2, r3
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f000 8090 	beq.w	80019e4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018c4:	4b56      	ldr	r3, [pc, #344]	; (8001a20 <HAL_GPIO_Init+0x2dc>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	4a55      	ldr	r2, [pc, #340]	; (8001a20 <HAL_GPIO_Init+0x2dc>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	6193      	str	r3, [r2, #24]
 80018d0:	4b53      	ldr	r3, [pc, #332]	; (8001a20 <HAL_GPIO_Init+0x2dc>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018dc:	4a51      	ldr	r2, [pc, #324]	; (8001a24 <HAL_GPIO_Init+0x2e0>)
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	089b      	lsrs	r3, r3, #2
 80018e2:	3302      	adds	r3, #2
 80018e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	f003 0303 	and.w	r3, r3, #3
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	220f      	movs	r2, #15
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	4013      	ands	r3, r2
 80018fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a49      	ldr	r2, [pc, #292]	; (8001a28 <HAL_GPIO_Init+0x2e4>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d00d      	beq.n	8001924 <HAL_GPIO_Init+0x1e0>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a48      	ldr	r2, [pc, #288]	; (8001a2c <HAL_GPIO_Init+0x2e8>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d007      	beq.n	8001920 <HAL_GPIO_Init+0x1dc>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a47      	ldr	r2, [pc, #284]	; (8001a30 <HAL_GPIO_Init+0x2ec>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d101      	bne.n	800191c <HAL_GPIO_Init+0x1d8>
 8001918:	2302      	movs	r3, #2
 800191a:	e004      	b.n	8001926 <HAL_GPIO_Init+0x1e2>
 800191c:	2303      	movs	r3, #3
 800191e:	e002      	b.n	8001926 <HAL_GPIO_Init+0x1e2>
 8001920:	2301      	movs	r3, #1
 8001922:	e000      	b.n	8001926 <HAL_GPIO_Init+0x1e2>
 8001924:	2300      	movs	r3, #0
 8001926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001928:	f002 0203 	and.w	r2, r2, #3
 800192c:	0092      	lsls	r2, r2, #2
 800192e:	4093      	lsls	r3, r2
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	4313      	orrs	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001936:	493b      	ldr	r1, [pc, #236]	; (8001a24 <HAL_GPIO_Init+0x2e0>)
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	089b      	lsrs	r3, r3, #2
 800193c:	3302      	adds	r3, #2
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d006      	beq.n	800195e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001950:	4b38      	ldr	r3, [pc, #224]	; (8001a34 <HAL_GPIO_Init+0x2f0>)
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	4937      	ldr	r1, [pc, #220]	; (8001a34 <HAL_GPIO_Init+0x2f0>)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	4313      	orrs	r3, r2
 800195a:	608b      	str	r3, [r1, #8]
 800195c:	e006      	b.n	800196c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800195e:	4b35      	ldr	r3, [pc, #212]	; (8001a34 <HAL_GPIO_Init+0x2f0>)
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	43db      	mvns	r3, r3
 8001966:	4933      	ldr	r1, [pc, #204]	; (8001a34 <HAL_GPIO_Init+0x2f0>)
 8001968:	4013      	ands	r3, r2
 800196a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d006      	beq.n	8001986 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001978:	4b2e      	ldr	r3, [pc, #184]	; (8001a34 <HAL_GPIO_Init+0x2f0>)
 800197a:	68da      	ldr	r2, [r3, #12]
 800197c:	492d      	ldr	r1, [pc, #180]	; (8001a34 <HAL_GPIO_Init+0x2f0>)
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	4313      	orrs	r3, r2
 8001982:	60cb      	str	r3, [r1, #12]
 8001984:	e006      	b.n	8001994 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001986:	4b2b      	ldr	r3, [pc, #172]	; (8001a34 <HAL_GPIO_Init+0x2f0>)
 8001988:	68da      	ldr	r2, [r3, #12]
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	43db      	mvns	r3, r3
 800198e:	4929      	ldr	r1, [pc, #164]	; (8001a34 <HAL_GPIO_Init+0x2f0>)
 8001990:	4013      	ands	r3, r2
 8001992:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d006      	beq.n	80019ae <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019a0:	4b24      	ldr	r3, [pc, #144]	; (8001a34 <HAL_GPIO_Init+0x2f0>)
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	4923      	ldr	r1, [pc, #140]	; (8001a34 <HAL_GPIO_Init+0x2f0>)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	604b      	str	r3, [r1, #4]
 80019ac:	e006      	b.n	80019bc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019ae:	4b21      	ldr	r3, [pc, #132]	; (8001a34 <HAL_GPIO_Init+0x2f0>)
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	491f      	ldr	r1, [pc, #124]	; (8001a34 <HAL_GPIO_Init+0x2f0>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d006      	beq.n	80019d6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019c8:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <HAL_GPIO_Init+0x2f0>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4919      	ldr	r1, [pc, #100]	; (8001a34 <HAL_GPIO_Init+0x2f0>)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	600b      	str	r3, [r1, #0]
 80019d4:	e006      	b.n	80019e4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019d6:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <HAL_GPIO_Init+0x2f0>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	43db      	mvns	r3, r3
 80019de:	4915      	ldr	r1, [pc, #84]	; (8001a34 <HAL_GPIO_Init+0x2f0>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	3301      	adds	r3, #1
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	fa22 f303 	lsr.w	r3, r2, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f47f aeaf 	bne.w	8001758 <HAL_GPIO_Init+0x14>
  }
}
 80019fa:	bf00      	nop
 80019fc:	bf00      	nop
 80019fe:	372c      	adds	r7, #44	; 0x2c
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	10320000 	.word	0x10320000
 8001a0c:	10310000 	.word	0x10310000
 8001a10:	10220000 	.word	0x10220000
 8001a14:	10210000 	.word	0x10210000
 8001a18:	10120000 	.word	0x10120000
 8001a1c:	10110000 	.word	0x10110000
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40010000 	.word	0x40010000
 8001a28:	40010800 	.word	0x40010800
 8001a2c:	40010c00 	.word	0x40010c00
 8001a30:	40011000 	.word	0x40011000
 8001a34:	40010400 	.word	0x40010400

08001a38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	887b      	ldrh	r3, [r7, #2]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d002      	beq.n	8001a56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a50:	2301      	movs	r3, #1
 8001a52:	73fb      	strb	r3, [r7, #15]
 8001a54:	e001      	b.n	8001a5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a56:	2300      	movs	r3, #0
 8001a58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr

08001a66 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	807b      	strh	r3, [r7, #2]
 8001a72:	4613      	mov	r3, r2
 8001a74:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a76:	787b      	ldrb	r3, [r7, #1]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a7c:	887a      	ldrh	r2, [r7, #2]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a82:	e003      	b.n	8001a8c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a84:	887b      	ldrh	r3, [r7, #2]
 8001a86:	041a      	lsls	r2, r3, #16
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	611a      	str	r2, [r3, #16]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr

08001a96 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b085      	sub	sp, #20
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001aa8:	887a      	ldrh	r2, [r7, #2]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4013      	ands	r3, r2
 8001aae:	041a      	lsls	r2, r3, #16
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	43d9      	mvns	r1, r3
 8001ab4:	887b      	ldrh	r3, [r7, #2]
 8001ab6:	400b      	ands	r3, r1
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	611a      	str	r2, [r3, #16]
}
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e26c      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 8087 	beq.w	8001bf6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ae8:	4b92      	ldr	r3, [pc, #584]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 030c 	and.w	r3, r3, #12
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d00c      	beq.n	8001b0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001af4:	4b8f      	ldr	r3, [pc, #572]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 030c 	and.w	r3, r3, #12
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	d112      	bne.n	8001b26 <HAL_RCC_OscConfig+0x5e>
 8001b00:	4b8c      	ldr	r3, [pc, #560]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b0c:	d10b      	bne.n	8001b26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0e:	4b89      	ldr	r3, [pc, #548]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d06c      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x12c>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d168      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e246      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b2e:	d106      	bne.n	8001b3e <HAL_RCC_OscConfig+0x76>
 8001b30:	4b80      	ldr	r3, [pc, #512]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a7f      	ldr	r2, [pc, #508]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	e02e      	b.n	8001b9c <HAL_RCC_OscConfig+0xd4>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10c      	bne.n	8001b60 <HAL_RCC_OscConfig+0x98>
 8001b46:	4b7b      	ldr	r3, [pc, #492]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a7a      	ldr	r2, [pc, #488]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	4b78      	ldr	r3, [pc, #480]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a77      	ldr	r2, [pc, #476]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	e01d      	b.n	8001b9c <HAL_RCC_OscConfig+0xd4>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b68:	d10c      	bne.n	8001b84 <HAL_RCC_OscConfig+0xbc>
 8001b6a:	4b72      	ldr	r3, [pc, #456]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a71      	ldr	r2, [pc, #452]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	4b6f      	ldr	r3, [pc, #444]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a6e      	ldr	r2, [pc, #440]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	e00b      	b.n	8001b9c <HAL_RCC_OscConfig+0xd4>
 8001b84:	4b6b      	ldr	r3, [pc, #428]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a6a      	ldr	r2, [pc, #424]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	4b68      	ldr	r3, [pc, #416]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a67      	ldr	r2, [pc, #412]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d013      	beq.n	8001bcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7ff fcb6 	bl	8001514 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bac:	f7ff fcb2 	bl	8001514 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b64      	cmp	r3, #100	; 0x64
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e1fa      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bbe:	4b5d      	ldr	r3, [pc, #372]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0xe4>
 8001bca:	e014      	b.n	8001bf6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7ff fca2 	bl	8001514 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd4:	f7ff fc9e 	bl	8001514 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b64      	cmp	r3, #100	; 0x64
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e1e6      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be6:	4b53      	ldr	r3, [pc, #332]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x10c>
 8001bf2:	e000      	b.n	8001bf6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d063      	beq.n	8001cca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c02:	4b4c      	ldr	r3, [pc, #304]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00b      	beq.n	8001c26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c0e:	4b49      	ldr	r3, [pc, #292]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 030c 	and.w	r3, r3, #12
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d11c      	bne.n	8001c54 <HAL_RCC_OscConfig+0x18c>
 8001c1a:	4b46      	ldr	r3, [pc, #280]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d116      	bne.n	8001c54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c26:	4b43      	ldr	r3, [pc, #268]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d005      	beq.n	8001c3e <HAL_RCC_OscConfig+0x176>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d001      	beq.n	8001c3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e1ba      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3e:	4b3d      	ldr	r3, [pc, #244]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4939      	ldr	r1, [pc, #228]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c52:	e03a      	b.n	8001cca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d020      	beq.n	8001c9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c5c:	4b36      	ldr	r3, [pc, #216]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c62:	f7ff fc57 	bl	8001514 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c6a:	f7ff fc53 	bl	8001514 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e19b      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7c:	4b2d      	ldr	r3, [pc, #180]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c88:	4b2a      	ldr	r3, [pc, #168]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4927      	ldr	r1, [pc, #156]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	600b      	str	r3, [r1, #0]
 8001c9c:	e015      	b.n	8001cca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c9e:	4b26      	ldr	r3, [pc, #152]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fc36 	bl	8001514 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cac:	f7ff fc32 	bl	8001514 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e17a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cbe:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d03a      	beq.n	8001d4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d019      	beq.n	8001d12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cde:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce4:	f7ff fc16 	bl	8001514 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cec:	f7ff fc12 	bl	8001514 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e15a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfe:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	f000 fa9a 	bl	8002244 <RCC_Delay>
 8001d10:	e01c      	b.n	8001d4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d12:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d18:	f7ff fbfc 	bl	8001514 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d1e:	e00f      	b.n	8001d40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d20:	f7ff fbf8 	bl	8001514 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d908      	bls.n	8001d40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e140      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000
 8001d38:	42420000 	.word	0x42420000
 8001d3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d40:	4b9e      	ldr	r3, [pc, #632]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1e9      	bne.n	8001d20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80a6 	beq.w	8001ea6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d5e:	4b97      	ldr	r3, [pc, #604]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10d      	bne.n	8001d86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d6a:	4b94      	ldr	r3, [pc, #592]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	4a93      	ldr	r2, [pc, #588]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d74:	61d3      	str	r3, [r2, #28]
 8001d76:	4b91      	ldr	r3, [pc, #580]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d82:	2301      	movs	r3, #1
 8001d84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d86:	4b8e      	ldr	r3, [pc, #568]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d118      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d92:	4b8b      	ldr	r3, [pc, #556]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a8a      	ldr	r2, [pc, #552]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d9e:	f7ff fbb9 	bl	8001514 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da6:	f7ff fbb5 	bl	8001514 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b64      	cmp	r3, #100	; 0x64
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e0fd      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db8:	4b81      	ldr	r3, [pc, #516]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0f0      	beq.n	8001da6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d106      	bne.n	8001dda <HAL_RCC_OscConfig+0x312>
 8001dcc:	4b7b      	ldr	r3, [pc, #492]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	4a7a      	ldr	r2, [pc, #488]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6213      	str	r3, [r2, #32]
 8001dd8:	e02d      	b.n	8001e36 <HAL_RCC_OscConfig+0x36e>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10c      	bne.n	8001dfc <HAL_RCC_OscConfig+0x334>
 8001de2:	4b76      	ldr	r3, [pc, #472]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	4a75      	ldr	r2, [pc, #468]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001de8:	f023 0301 	bic.w	r3, r3, #1
 8001dec:	6213      	str	r3, [r2, #32]
 8001dee:	4b73      	ldr	r3, [pc, #460]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	4a72      	ldr	r2, [pc, #456]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001df4:	f023 0304 	bic.w	r3, r3, #4
 8001df8:	6213      	str	r3, [r2, #32]
 8001dfa:	e01c      	b.n	8001e36 <HAL_RCC_OscConfig+0x36e>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	2b05      	cmp	r3, #5
 8001e02:	d10c      	bne.n	8001e1e <HAL_RCC_OscConfig+0x356>
 8001e04:	4b6d      	ldr	r3, [pc, #436]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	4a6c      	ldr	r2, [pc, #432]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001e0a:	f043 0304 	orr.w	r3, r3, #4
 8001e0e:	6213      	str	r3, [r2, #32]
 8001e10:	4b6a      	ldr	r3, [pc, #424]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	4a69      	ldr	r2, [pc, #420]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	6213      	str	r3, [r2, #32]
 8001e1c:	e00b      	b.n	8001e36 <HAL_RCC_OscConfig+0x36e>
 8001e1e:	4b67      	ldr	r3, [pc, #412]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	4a66      	ldr	r2, [pc, #408]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001e24:	f023 0301 	bic.w	r3, r3, #1
 8001e28:	6213      	str	r3, [r2, #32]
 8001e2a:	4b64      	ldr	r3, [pc, #400]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	4a63      	ldr	r2, [pc, #396]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001e30:	f023 0304 	bic.w	r3, r3, #4
 8001e34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d015      	beq.n	8001e6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3e:	f7ff fb69 	bl	8001514 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e44:	e00a      	b.n	8001e5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e46:	f7ff fb65 	bl	8001514 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e0ab      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e5c:	4b57      	ldr	r3, [pc, #348]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0ee      	beq.n	8001e46 <HAL_RCC_OscConfig+0x37e>
 8001e68:	e014      	b.n	8001e94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6a:	f7ff fb53 	bl	8001514 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e70:	e00a      	b.n	8001e88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e72:	f7ff fb4f 	bl	8001514 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e095      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e88:	4b4c      	ldr	r3, [pc, #304]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1ee      	bne.n	8001e72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e94:	7dfb      	ldrb	r3, [r7, #23]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d105      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e9a:	4b48      	ldr	r3, [pc, #288]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	4a47      	ldr	r2, [pc, #284]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ea4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 8081 	beq.w	8001fb2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eb0:	4b42      	ldr	r3, [pc, #264]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 030c 	and.w	r3, r3, #12
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d061      	beq.n	8001f80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d146      	bne.n	8001f52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec4:	4b3f      	ldr	r3, [pc, #252]	; (8001fc4 <HAL_RCC_OscConfig+0x4fc>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eca:	f7ff fb23 	bl	8001514 <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed2:	f7ff fb1f 	bl	8001514 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e067      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee4:	4b35      	ldr	r3, [pc, #212]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1f0      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef8:	d108      	bne.n	8001f0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001efa:	4b30      	ldr	r3, [pc, #192]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	492d      	ldr	r1, [pc, #180]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f0c:	4b2b      	ldr	r3, [pc, #172]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a19      	ldr	r1, [r3, #32]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	430b      	orrs	r3, r1
 8001f1e:	4927      	ldr	r1, [pc, #156]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f24:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <HAL_RCC_OscConfig+0x4fc>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2a:	f7ff faf3 	bl	8001514 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f32:	f7ff faef 	bl	8001514 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e037      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f44:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0f0      	beq.n	8001f32 <HAL_RCC_OscConfig+0x46a>
 8001f50:	e02f      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f52:	4b1c      	ldr	r3, [pc, #112]	; (8001fc4 <HAL_RCC_OscConfig+0x4fc>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7ff fadc 	bl	8001514 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f60:	f7ff fad8 	bl	8001514 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e020      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f72:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x498>
 8001f7e:	e018      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e013      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d106      	bne.n	8001fae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d001      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40007000 	.word	0x40007000
 8001fc4:	42420060 	.word	0x42420060

08001fc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e0d0      	b.n	800217e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fdc:	4b6a      	ldr	r3, [pc, #424]	; (8002188 <HAL_RCC_ClockConfig+0x1c0>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d910      	bls.n	800200c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fea:	4b67      	ldr	r3, [pc, #412]	; (8002188 <HAL_RCC_ClockConfig+0x1c0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 0207 	bic.w	r2, r3, #7
 8001ff2:	4965      	ldr	r1, [pc, #404]	; (8002188 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffa:	4b63      	ldr	r3, [pc, #396]	; (8002188 <HAL_RCC_ClockConfig+0x1c0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d001      	beq.n	800200c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0b8      	b.n	800217e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d020      	beq.n	800205a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	d005      	beq.n	8002030 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002024:	4b59      	ldr	r3, [pc, #356]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	4a58      	ldr	r2, [pc, #352]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 800202a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800202e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	2b00      	cmp	r3, #0
 800203a:	d005      	beq.n	8002048 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800203c:	4b53      	ldr	r3, [pc, #332]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	4a52      	ldr	r2, [pc, #328]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002046:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002048:	4b50      	ldr	r3, [pc, #320]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	494d      	ldr	r1, [pc, #308]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002056:	4313      	orrs	r3, r2
 8002058:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d040      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d107      	bne.n	800207e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206e:	4b47      	ldr	r3, [pc, #284]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d115      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e07f      	b.n	800217e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d107      	bne.n	8002096 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002086:	4b41      	ldr	r3, [pc, #260]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d109      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e073      	b.n	800217e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002096:	4b3d      	ldr	r3, [pc, #244]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e06b      	b.n	800217e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020a6:	4b39      	ldr	r3, [pc, #228]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f023 0203 	bic.w	r2, r3, #3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	4936      	ldr	r1, [pc, #216]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020b8:	f7ff fa2c 	bl	8001514 <HAL_GetTick>
 80020bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020be:	e00a      	b.n	80020d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c0:	f7ff fa28 	bl	8001514 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e053      	b.n	800217e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d6:	4b2d      	ldr	r3, [pc, #180]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 020c 	and.w	r2, r3, #12
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d1eb      	bne.n	80020c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020e8:	4b27      	ldr	r3, [pc, #156]	; (8002188 <HAL_RCC_ClockConfig+0x1c0>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d210      	bcs.n	8002118 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f6:	4b24      	ldr	r3, [pc, #144]	; (8002188 <HAL_RCC_ClockConfig+0x1c0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 0207 	bic.w	r2, r3, #7
 80020fe:	4922      	ldr	r1, [pc, #136]	; (8002188 <HAL_RCC_ClockConfig+0x1c0>)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	4313      	orrs	r3, r2
 8002104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002106:	4b20      	ldr	r3, [pc, #128]	; (8002188 <HAL_RCC_ClockConfig+0x1c0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d001      	beq.n	8002118 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e032      	b.n	800217e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d008      	beq.n	8002136 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002124:	4b19      	ldr	r3, [pc, #100]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	4916      	ldr	r1, [pc, #88]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	4313      	orrs	r3, r2
 8002134:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d009      	beq.n	8002156 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002142:	4b12      	ldr	r3, [pc, #72]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	490e      	ldr	r1, [pc, #56]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	4313      	orrs	r3, r2
 8002154:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002156:	f000 f821 	bl	800219c <HAL_RCC_GetSysClockFreq>
 800215a:	4602      	mov	r2, r0
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	490a      	ldr	r1, [pc, #40]	; (8002190 <HAL_RCC_ClockConfig+0x1c8>)
 8002168:	5ccb      	ldrb	r3, [r1, r3]
 800216a:	fa22 f303 	lsr.w	r3, r2, r3
 800216e:	4a09      	ldr	r2, [pc, #36]	; (8002194 <HAL_RCC_ClockConfig+0x1cc>)
 8002170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002172:	4b09      	ldr	r3, [pc, #36]	; (8002198 <HAL_RCC_ClockConfig+0x1d0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff f98a 	bl	8001490 <HAL_InitTick>

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40022000 	.word	0x40022000
 800218c:	40021000 	.word	0x40021000
 8002190:	08002aa8 	.word	0x08002aa8
 8002194:	20000010 	.word	0x20000010
 8002198:	2000003c 	.word	0x2000003c

0800219c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800219c:	b480      	push	{r7}
 800219e:	b087      	sub	sp, #28
 80021a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	2300      	movs	r3, #0
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	2300      	movs	r3, #0
 80021b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021b6:	4b1e      	ldr	r3, [pc, #120]	; (8002230 <HAL_RCC_GetSysClockFreq+0x94>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 030c 	and.w	r3, r3, #12
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d002      	beq.n	80021cc <HAL_RCC_GetSysClockFreq+0x30>
 80021c6:	2b08      	cmp	r3, #8
 80021c8:	d003      	beq.n	80021d2 <HAL_RCC_GetSysClockFreq+0x36>
 80021ca:	e027      	b.n	800221c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021cc:	4b19      	ldr	r3, [pc, #100]	; (8002234 <HAL_RCC_GetSysClockFreq+0x98>)
 80021ce:	613b      	str	r3, [r7, #16]
      break;
 80021d0:	e027      	b.n	8002222 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	0c9b      	lsrs	r3, r3, #18
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	4a17      	ldr	r2, [pc, #92]	; (8002238 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021dc:	5cd3      	ldrb	r3, [r2, r3]
 80021de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d010      	beq.n	800220c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021ea:	4b11      	ldr	r3, [pc, #68]	; (8002230 <HAL_RCC_GetSysClockFreq+0x94>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	0c5b      	lsrs	r3, r3, #17
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	4a11      	ldr	r2, [pc, #68]	; (800223c <HAL_RCC_GetSysClockFreq+0xa0>)
 80021f6:	5cd3      	ldrb	r3, [r2, r3]
 80021f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a0d      	ldr	r2, [pc, #52]	; (8002234 <HAL_RCC_GetSysClockFreq+0x98>)
 80021fe:	fb02 f203 	mul.w	r2, r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	fbb2 f3f3 	udiv	r3, r2, r3
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	e004      	b.n	8002216 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a0c      	ldr	r2, [pc, #48]	; (8002240 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002210:	fb02 f303 	mul.w	r3, r2, r3
 8002214:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	613b      	str	r3, [r7, #16]
      break;
 800221a:	e002      	b.n	8002222 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800221c:	4b05      	ldr	r3, [pc, #20]	; (8002234 <HAL_RCC_GetSysClockFreq+0x98>)
 800221e:	613b      	str	r3, [r7, #16]
      break;
 8002220:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002222:	693b      	ldr	r3, [r7, #16]
}
 8002224:	4618      	mov	r0, r3
 8002226:	371c      	adds	r7, #28
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40021000 	.word	0x40021000
 8002234:	007a1200 	.word	0x007a1200
 8002238:	08002ab8 	.word	0x08002ab8
 800223c:	08002ac8 	.word	0x08002ac8
 8002240:	003d0900 	.word	0x003d0900

08002244 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800224c:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <RCC_Delay+0x34>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a0a      	ldr	r2, [pc, #40]	; (800227c <RCC_Delay+0x38>)
 8002252:	fba2 2303 	umull	r2, r3, r2, r3
 8002256:	0a5b      	lsrs	r3, r3, #9
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002260:	bf00      	nop
  }
  while (Delay --);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	1e5a      	subs	r2, r3, #1
 8002266:	60fa      	str	r2, [r7, #12]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1f9      	bne.n	8002260 <RCC_Delay+0x1c>
}
 800226c:	bf00      	nop
 800226e:	bf00      	nop
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr
 8002278:	20000010 	.word	0x20000010
 800227c:	10624dd3 	.word	0x10624dd3

08002280 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e041      	b.n	8002316 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d106      	bne.n	80022ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7fe ff80 	bl	80011ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2202      	movs	r2, #2
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3304      	adds	r3, #4
 80022bc:	4619      	mov	r1, r3
 80022be:	4610      	mov	r0, r2
 80022c0:	f000 fa56 	bl	8002770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
	...

08002320 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b01      	cmp	r3, #1
 8002332:	d001      	beq.n	8002338 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e035      	b.n	80023a4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2202      	movs	r2, #2
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0201 	orr.w	r2, r2, #1
 800234e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a16      	ldr	r2, [pc, #88]	; (80023b0 <HAL_TIM_Base_Start_IT+0x90>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d009      	beq.n	800236e <HAL_TIM_Base_Start_IT+0x4e>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002362:	d004      	beq.n	800236e <HAL_TIM_Base_Start_IT+0x4e>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a12      	ldr	r2, [pc, #72]	; (80023b4 <HAL_TIM_Base_Start_IT+0x94>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d111      	bne.n	8002392 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2b06      	cmp	r3, #6
 800237e:	d010      	beq.n	80023a2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0201 	orr.w	r2, r2, #1
 800238e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002390:	e007      	b.n	80023a2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f042 0201 	orr.w	r2, r2, #1
 80023a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40012c00 	.word	0x40012c00
 80023b4:	40000400 	.word	0x40000400

080023b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d020      	beq.n	800241c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d01b      	beq.n	800241c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f06f 0202 	mvn.w	r2, #2
 80023ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f998 	bl	8002738 <HAL_TIM_IC_CaptureCallback>
 8002408:	e005      	b.n	8002416 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f98b 	bl	8002726 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f99a 	bl	800274a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	2b00      	cmp	r3, #0
 8002424:	d020      	beq.n	8002468 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	d01b      	beq.n	8002468 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f06f 0204 	mvn.w	r2, #4
 8002438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2202      	movs	r2, #2
 800243e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f972 	bl	8002738 <HAL_TIM_IC_CaptureCallback>
 8002454:	e005      	b.n	8002462 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f965 	bl	8002726 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f974 	bl	800274a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d020      	beq.n	80024b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f003 0308 	and.w	r3, r3, #8
 8002478:	2b00      	cmp	r3, #0
 800247a:	d01b      	beq.n	80024b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f06f 0208 	mvn.w	r2, #8
 8002484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2204      	movs	r2, #4
 800248a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f94c 	bl	8002738 <HAL_TIM_IC_CaptureCallback>
 80024a0:	e005      	b.n	80024ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f93f 	bl	8002726 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 f94e 	bl	800274a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	f003 0310 	and.w	r3, r3, #16
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d020      	beq.n	8002500 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f003 0310 	and.w	r3, r3, #16
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d01b      	beq.n	8002500 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f06f 0210 	mvn.w	r2, #16
 80024d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2208      	movs	r2, #8
 80024d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f926 	bl	8002738 <HAL_TIM_IC_CaptureCallback>
 80024ec:	e005      	b.n	80024fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f919 	bl	8002726 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f928 	bl	800274a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00c      	beq.n	8002524 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b00      	cmp	r3, #0
 8002512:	d007      	beq.n	8002524 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f06f 0201 	mvn.w	r2, #1
 800251c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7fe fdee 	bl	8001100 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00c      	beq.n	8002548 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002534:	2b00      	cmp	r3, #0
 8002536:	d007      	beq.n	8002548 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 fa6f 	bl	8002a26 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00c      	beq.n	800256c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002558:	2b00      	cmp	r3, #0
 800255a:	d007      	beq.n	800256c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f8f8 	bl	800275c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f003 0320 	and.w	r3, r3, #32
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00c      	beq.n	8002590 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	2b00      	cmp	r3, #0
 800257e:	d007      	beq.n	8002590 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f06f 0220 	mvn.w	r2, #32
 8002588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 fa42 	bl	8002a14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002590:	bf00      	nop
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d101      	bne.n	80025b4 <HAL_TIM_ConfigClockSource+0x1c>
 80025b0:	2302      	movs	r3, #2
 80025b2:	e0b4      	b.n	800271e <HAL_TIM_ConfigClockSource+0x186>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025ec:	d03e      	beq.n	800266c <HAL_TIM_ConfigClockSource+0xd4>
 80025ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025f2:	f200 8087 	bhi.w	8002704 <HAL_TIM_ConfigClockSource+0x16c>
 80025f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025fa:	f000 8086 	beq.w	800270a <HAL_TIM_ConfigClockSource+0x172>
 80025fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002602:	d87f      	bhi.n	8002704 <HAL_TIM_ConfigClockSource+0x16c>
 8002604:	2b70      	cmp	r3, #112	; 0x70
 8002606:	d01a      	beq.n	800263e <HAL_TIM_ConfigClockSource+0xa6>
 8002608:	2b70      	cmp	r3, #112	; 0x70
 800260a:	d87b      	bhi.n	8002704 <HAL_TIM_ConfigClockSource+0x16c>
 800260c:	2b60      	cmp	r3, #96	; 0x60
 800260e:	d050      	beq.n	80026b2 <HAL_TIM_ConfigClockSource+0x11a>
 8002610:	2b60      	cmp	r3, #96	; 0x60
 8002612:	d877      	bhi.n	8002704 <HAL_TIM_ConfigClockSource+0x16c>
 8002614:	2b50      	cmp	r3, #80	; 0x50
 8002616:	d03c      	beq.n	8002692 <HAL_TIM_ConfigClockSource+0xfa>
 8002618:	2b50      	cmp	r3, #80	; 0x50
 800261a:	d873      	bhi.n	8002704 <HAL_TIM_ConfigClockSource+0x16c>
 800261c:	2b40      	cmp	r3, #64	; 0x40
 800261e:	d058      	beq.n	80026d2 <HAL_TIM_ConfigClockSource+0x13a>
 8002620:	2b40      	cmp	r3, #64	; 0x40
 8002622:	d86f      	bhi.n	8002704 <HAL_TIM_ConfigClockSource+0x16c>
 8002624:	2b30      	cmp	r3, #48	; 0x30
 8002626:	d064      	beq.n	80026f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002628:	2b30      	cmp	r3, #48	; 0x30
 800262a:	d86b      	bhi.n	8002704 <HAL_TIM_ConfigClockSource+0x16c>
 800262c:	2b20      	cmp	r3, #32
 800262e:	d060      	beq.n	80026f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002630:	2b20      	cmp	r3, #32
 8002632:	d867      	bhi.n	8002704 <HAL_TIM_ConfigClockSource+0x16c>
 8002634:	2b00      	cmp	r3, #0
 8002636:	d05c      	beq.n	80026f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002638:	2b10      	cmp	r3, #16
 800263a:	d05a      	beq.n	80026f2 <HAL_TIM_ConfigClockSource+0x15a>
 800263c:	e062      	b.n	8002704 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	6899      	ldr	r1, [r3, #8]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	f000 f96a 	bl	8002926 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002660:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	609a      	str	r2, [r3, #8]
      break;
 800266a:	e04f      	b.n	800270c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	6899      	ldr	r1, [r3, #8]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f000 f953 	bl	8002926 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800268e:	609a      	str	r2, [r3, #8]
      break;
 8002690:	e03c      	b.n	800270c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6818      	ldr	r0, [r3, #0]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	6859      	ldr	r1, [r3, #4]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	461a      	mov	r2, r3
 80026a0:	f000 f8ca 	bl	8002838 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2150      	movs	r1, #80	; 0x50
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 f921 	bl	80028f2 <TIM_ITRx_SetConfig>
      break;
 80026b0:	e02c      	b.n	800270c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6818      	ldr	r0, [r3, #0]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	6859      	ldr	r1, [r3, #4]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	461a      	mov	r2, r3
 80026c0:	f000 f8e8 	bl	8002894 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2160      	movs	r1, #96	; 0x60
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 f911 	bl	80028f2 <TIM_ITRx_SetConfig>
      break;
 80026d0:	e01c      	b.n	800270c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6818      	ldr	r0, [r3, #0]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	6859      	ldr	r1, [r3, #4]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	461a      	mov	r2, r3
 80026e0:	f000 f8aa 	bl	8002838 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2140      	movs	r1, #64	; 0x40
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 f901 	bl	80028f2 <TIM_ITRx_SetConfig>
      break;
 80026f0:	e00c      	b.n	800270c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4619      	mov	r1, r3
 80026fc:	4610      	mov	r0, r2
 80026fe:	f000 f8f8 	bl	80028f2 <TIM_ITRx_SetConfig>
      break;
 8002702:	e003      	b.n	800270c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]
      break;
 8002708:	e000      	b.n	800270c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800270a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800271c:	7bfb      	ldrb	r3, [r7, #15]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr

08002738 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr

0800274a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr

0800275c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr
	...

08002770 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a2b      	ldr	r2, [pc, #172]	; (8002830 <TIM_Base_SetConfig+0xc0>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d007      	beq.n	8002798 <TIM_Base_SetConfig+0x28>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800278e:	d003      	beq.n	8002798 <TIM_Base_SetConfig+0x28>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a28      	ldr	r2, [pc, #160]	; (8002834 <TIM_Base_SetConfig+0xc4>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d108      	bne.n	80027aa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800279e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a20      	ldr	r2, [pc, #128]	; (8002830 <TIM_Base_SetConfig+0xc0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d007      	beq.n	80027c2 <TIM_Base_SetConfig+0x52>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b8:	d003      	beq.n	80027c2 <TIM_Base_SetConfig+0x52>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a1d      	ldr	r2, [pc, #116]	; (8002834 <TIM_Base_SetConfig+0xc4>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d108      	bne.n	80027d4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	4313      	orrs	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a0d      	ldr	r2, [pc, #52]	; (8002830 <TIM_Base_SetConfig+0xc0>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d103      	bne.n	8002808 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d005      	beq.n	8002826 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f023 0201 	bic.w	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	611a      	str	r2, [r3, #16]
  }
}
 8002826:	bf00      	nop
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	40012c00 	.word	0x40012c00
 8002834:	40000400 	.word	0x40000400

08002838 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	f023 0201 	bic.w	r2, r3, #1
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4313      	orrs	r3, r2
 800286c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f023 030a 	bic.w	r3, r3, #10
 8002874:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	4313      	orrs	r3, r2
 800287c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	621a      	str	r2, [r3, #32]
}
 800288a:	bf00      	nop
 800288c:	371c      	adds	r7, #28
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	f023 0210 	bic.w	r2, r3, #16
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	031b      	lsls	r3, r3, #12
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	4313      	orrs	r3, r2
 80028da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	621a      	str	r2, [r3, #32]
}
 80028e8:	bf00      	nop
 80028ea:	371c      	adds	r7, #28
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr

080028f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b085      	sub	sp, #20
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002908:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4313      	orrs	r3, r2
 8002910:	f043 0307 	orr.w	r3, r3, #7
 8002914:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	609a      	str	r2, [r3, #8]
}
 800291c:	bf00      	nop
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr

08002926 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002926:	b480      	push	{r7}
 8002928:	b087      	sub	sp, #28
 800292a:	af00      	add	r7, sp, #0
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	607a      	str	r2, [r7, #4]
 8002932:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002940:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	021a      	lsls	r2, r3, #8
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	431a      	orrs	r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	4313      	orrs	r3, r2
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	4313      	orrs	r3, r2
 8002952:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	609a      	str	r2, [r3, #8]
}
 800295a:	bf00      	nop
 800295c:	371c      	adds	r7, #28
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr

08002964 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002978:	2302      	movs	r3, #2
 800297a:	e041      	b.n	8002a00 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a14      	ldr	r2, [pc, #80]	; (8002a0c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d009      	beq.n	80029d4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c8:	d004      	beq.n	80029d4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a10      	ldr	r2, [pc, #64]	; (8002a10 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d10c      	bne.n	80029ee <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	40012c00 	.word	0x40012c00
 8002a10:	40000400 	.word	0x40000400

08002a14 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr

08002a26 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <__libc_init_array>:
 8002a38:	b570      	push	{r4, r5, r6, lr}
 8002a3a:	2600      	movs	r6, #0
 8002a3c:	4d0c      	ldr	r5, [pc, #48]	; (8002a70 <__libc_init_array+0x38>)
 8002a3e:	4c0d      	ldr	r4, [pc, #52]	; (8002a74 <__libc_init_array+0x3c>)
 8002a40:	1b64      	subs	r4, r4, r5
 8002a42:	10a4      	asrs	r4, r4, #2
 8002a44:	42a6      	cmp	r6, r4
 8002a46:	d109      	bne.n	8002a5c <__libc_init_array+0x24>
 8002a48:	f000 f822 	bl	8002a90 <_init>
 8002a4c:	2600      	movs	r6, #0
 8002a4e:	4d0a      	ldr	r5, [pc, #40]	; (8002a78 <__libc_init_array+0x40>)
 8002a50:	4c0a      	ldr	r4, [pc, #40]	; (8002a7c <__libc_init_array+0x44>)
 8002a52:	1b64      	subs	r4, r4, r5
 8002a54:	10a4      	asrs	r4, r4, #2
 8002a56:	42a6      	cmp	r6, r4
 8002a58:	d105      	bne.n	8002a66 <__libc_init_array+0x2e>
 8002a5a:	bd70      	pop	{r4, r5, r6, pc}
 8002a5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a60:	4798      	blx	r3
 8002a62:	3601      	adds	r6, #1
 8002a64:	e7ee      	b.n	8002a44 <__libc_init_array+0xc>
 8002a66:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a6a:	4798      	blx	r3
 8002a6c:	3601      	adds	r6, #1
 8002a6e:	e7f2      	b.n	8002a56 <__libc_init_array+0x1e>
 8002a70:	08002acc 	.word	0x08002acc
 8002a74:	08002acc 	.word	0x08002acc
 8002a78:	08002acc 	.word	0x08002acc
 8002a7c:	08002ad0 	.word	0x08002ad0

08002a80 <memset>:
 8002a80:	4603      	mov	r3, r0
 8002a82:	4402      	add	r2, r0
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d100      	bne.n	8002a8a <memset+0xa>
 8002a88:	4770      	bx	lr
 8002a8a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a8e:	e7f9      	b.n	8002a84 <memset+0x4>

08002a90 <_init>:
 8002a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a92:	bf00      	nop
 8002a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a96:	bc08      	pop	{r3}
 8002a98:	469e      	mov	lr, r3
 8002a9a:	4770      	bx	lr

08002a9c <_fini>:
 8002a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a9e:	bf00      	nop
 8002aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aa2:	bc08      	pop	{r3}
 8002aa4:	469e      	mov	lr, r3
 8002aa6:	4770      	bx	lr
