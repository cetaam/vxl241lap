
led_animation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002abc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002bc8  08002bc8  00012bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bec  08002bec  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08002bec  08002bec  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bec  08002bec  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bec  08002bec  00012bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bf0  08002bf0  00012bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08002bf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  2000003c  08002c30  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08002c30  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c0e  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d29  00000000  00000000  00029c73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  0002b9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  0002c418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017328  00000000  00000000  0002cd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce02  00000000  00000000  00044090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823f9  00000000  00000000  00050e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d328b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002880  00000000  00000000  000d32e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002bb0 	.word	0x08002bb0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	08002bb0 	.word	0x08002bb0

0800014c <getkeyInput>:

int timePress[10];
int buttonFlag[10];
int buttonkey[10][4];

void getkeyInput(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
//		if(timePress<=0){
//			buttonkey[j][3]=NORMAL;
//			timePress[j]=100;
//		}
//	}
	if(timer_flag[5]==1&& HAL_GPIO_ReadPin(BT0_GPIO_Port, BT0_Pin)==0){
 8000150:	4b23      	ldr	r3, [pc, #140]	; (80001e0 <getkeyInput+0x94>)
 8000152:	695b      	ldr	r3, [r3, #20]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d112      	bne.n	800017e <getkeyInput+0x32>
 8000158:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800015c:	4821      	ldr	r0, [pc, #132]	; (80001e4 <getkeyInput+0x98>)
 800015e:	f001 fcfb 	bl	8001b58 <HAL_GPIO_ReadPin>
 8000162:	4603      	mov	r3, r0
 8000164:	2b00      	cmp	r3, #0
 8000166:	d10a      	bne.n	800017e <getkeyInput+0x32>
		buttonFlag[0]=1;
 8000168:	4b1f      	ldr	r3, [pc, #124]	; (80001e8 <getkeyInput+0x9c>)
 800016a:	2201      	movs	r2, #1
 800016c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800016e:	2120      	movs	r1, #32
 8000170:	481c      	ldr	r0, [pc, #112]	; (80001e4 <getkeyInput+0x98>)
 8000172:	f001 fd20 	bl	8001bb6 <HAL_GPIO_TogglePin>
		set_timer(5, 50);
 8000176:	2132      	movs	r1, #50	; 0x32
 8000178:	2005      	movs	r0, #5
 800017a:	f001 f89f 	bl	80012bc <set_timer>
	}
	if(timer_flag[6]==1&& HAL_GPIO_ReadPin(BT1_GPIO_Port, BT1_Pin)==0){
 800017e:	4b18      	ldr	r3, [pc, #96]	; (80001e0 <getkeyInput+0x94>)
 8000180:	699b      	ldr	r3, [r3, #24]
 8000182:	2b01      	cmp	r3, #1
 8000184:	d112      	bne.n	80001ac <getkeyInput+0x60>
 8000186:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800018a:	4816      	ldr	r0, [pc, #88]	; (80001e4 <getkeyInput+0x98>)
 800018c:	f001 fce4 	bl	8001b58 <HAL_GPIO_ReadPin>
 8000190:	4603      	mov	r3, r0
 8000192:	2b00      	cmp	r3, #0
 8000194:	d10a      	bne.n	80001ac <getkeyInput+0x60>
		buttonFlag[1]=1;
 8000196:	4b14      	ldr	r3, [pc, #80]	; (80001e8 <getkeyInput+0x9c>)
 8000198:	2201      	movs	r2, #1
 800019a:	605a      	str	r2, [r3, #4]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800019c:	2120      	movs	r1, #32
 800019e:	4811      	ldr	r0, [pc, #68]	; (80001e4 <getkeyInput+0x98>)
 80001a0:	f001 fd09 	bl	8001bb6 <HAL_GPIO_TogglePin>
		set_timer(6, 50);
 80001a4:	2132      	movs	r1, #50	; 0x32
 80001a6:	2006      	movs	r0, #6
 80001a8:	f001 f888 	bl	80012bc <set_timer>
	}
	if(timer_flag[7]==1&& HAL_GPIO_ReadPin(BT2_GPIO_Port, BT2_Pin)==0){
 80001ac:	4b0c      	ldr	r3, [pc, #48]	; (80001e0 <getkeyInput+0x94>)
 80001ae:	69db      	ldr	r3, [r3, #28]
 80001b0:	2b01      	cmp	r3, #1
 80001b2:	d112      	bne.n	80001da <getkeyInput+0x8e>
 80001b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001b8:	480a      	ldr	r0, [pc, #40]	; (80001e4 <getkeyInput+0x98>)
 80001ba:	f001 fccd 	bl	8001b58 <HAL_GPIO_ReadPin>
 80001be:	4603      	mov	r3, r0
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d10a      	bne.n	80001da <getkeyInput+0x8e>
		buttonFlag[2]=1;
 80001c4:	4b08      	ldr	r3, [pc, #32]	; (80001e8 <getkeyInput+0x9c>)
 80001c6:	2201      	movs	r2, #1
 80001c8:	609a      	str	r2, [r3, #8]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80001ca:	2120      	movs	r1, #32
 80001cc:	4805      	ldr	r0, [pc, #20]	; (80001e4 <getkeyInput+0x98>)
 80001ce:	f001 fcf2 	bl	8001bb6 <HAL_GPIO_TogglePin>
		set_timer(7, 50);
 80001d2:	2132      	movs	r1, #50	; 0x32
 80001d4:	2007      	movs	r0, #7
 80001d6:	f001 f871 	bl	80012bc <set_timer>
//		}
//	}



}
 80001da:	bf00      	nop
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	40010800 	.word	0x40010800
 80001e8:	20000100 	.word	0x20000100

080001ec <isButtonPress>:
int isButtonPress(int i){
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	if(buttonFlag[i] == 1){
 80001f4:	4a09      	ldr	r2, [pc, #36]	; (800021c <isButtonPress+0x30>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001fc:	2b01      	cmp	r3, #1
 80001fe:	d106      	bne.n	800020e <isButtonPress+0x22>
		buttonFlag[i] = 0;
 8000200:	4a06      	ldr	r2, [pc, #24]	; (800021c <isButtonPress+0x30>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	2100      	movs	r1, #0
 8000206:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800020a:	2301      	movs	r3, #1
 800020c:	e000      	b.n	8000210 <isButtonPress+0x24>
	}
	return 0;
 800020e:	2300      	movs	r3, #0
}
 8000210:	4618      	mov	r0, r3
 8000212:	370c      	adds	r7, #12
 8000214:	46bd      	mov	sp, r7
 8000216:	bc80      	pop	{r7}
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	20000100 	.word	0x20000100

08000220 <fsm_auto_run>:

#include "fsm_auto.h"
int duration[10];

int led_index=0;
void fsm_auto_run(){
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	switch (status){
 8000224:	4b99      	ldr	r3, [pc, #612]	; (800048c <fsm_auto_run+0x26c>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	3b01      	subs	r3, #1
 800022a:	2b04      	cmp	r3, #4
 800022c:	f200 81cb 	bhi.w	80005c6 <fsm_auto_run+0x3a6>
 8000230:	a201      	add	r2, pc, #4	; (adr r2, 8000238 <fsm_auto_run+0x18>)
 8000232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000236:	bf00      	nop
 8000238:	0800024d 	.word	0x0800024d
 800023c:	080002bb 	.word	0x080002bb
 8000240:	08000355 	.word	0x08000355
 8000244:	080003f3 	.word	0x080003f3
 8000248:	080004a5 	.word	0x080004a5
	case INIT:
		resetled();
 800024c:	f000 fbe4 	bl	8000a18 <resetled>
		reset7seg();
 8000250:	f000 fc24 	bl	8000a9c <reset7seg>
		duration[0] = 200;
 8000254:	4b8e      	ldr	r3, [pc, #568]	; (8000490 <fsm_auto_run+0x270>)
 8000256:	22c8      	movs	r2, #200	; 0xc8
 8000258:	601a      	str	r2, [r3, #0]
		duration[1] =200; //DEFAULT_GREEN;
 800025a:	4b8d      	ldr	r3, [pc, #564]	; (8000490 <fsm_auto_run+0x270>)
 800025c:	22c8      	movs	r2, #200	; 0xc8
 800025e:	605a      	str	r2, [r3, #4]
		duration[2] =300; //DEFAULT_YELLOW;
 8000260:	4b8b      	ldr	r3, [pc, #556]	; (8000490 <fsm_auto_run+0x270>)
 8000262:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000266:	609a      	str	r2, [r3, #8]
		status=AUTO_RED_GREEN;
 8000268:	4b88      	ldr	r3, [pc, #544]	; (800048c <fsm_auto_run+0x26c>)
 800026a:	2202      	movs	r2, #2
 800026c:	601a      	str	r2, [r3, #0]
		led_traffic(RED_GREEN);
 800026e:	2002      	movs	r0, #2
 8000270:	f001 f864 	bl	800133c <led_traffic>
		set_timer(0, 24);
 8000274:	2118      	movs	r1, #24
 8000276:	2000      	movs	r0, #0
 8000278:	f001 f820 	bl	80012bc <set_timer>
		set_timer(1, duration[1]);//led
 800027c:	4b84      	ldr	r3, [pc, #528]	; (8000490 <fsm_auto_run+0x270>)
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	4619      	mov	r1, r3
 8000282:	2001      	movs	r0, #1
 8000284:	f001 f81a 	bl	80012bc <set_timer>
		set_timer(2,100);
 8000288:	2164      	movs	r1, #100	; 0x64
 800028a:	2002      	movs	r0, #2
 800028c:	f001 f816 	bl	80012bc <set_timer>
		counter_reset();
 8000290:	f000 f9a8 	bl	80005e4 <counter_reset>
		updateClockBuffer(--counter[0], --counter[1]);
 8000294:	4b7f      	ldr	r3, [pc, #508]	; (8000494 <fsm_auto_run+0x274>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	3b01      	subs	r3, #1
 800029a:	4a7e      	ldr	r2, [pc, #504]	; (8000494 <fsm_auto_run+0x274>)
 800029c:	6013      	str	r3, [r2, #0]
 800029e:	4b7d      	ldr	r3, [pc, #500]	; (8000494 <fsm_auto_run+0x274>)
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	4b7c      	ldr	r3, [pc, #496]	; (8000494 <fsm_auto_run+0x274>)
 80002a4:	685b      	ldr	r3, [r3, #4]
 80002a6:	3b01      	subs	r3, #1
 80002a8:	497a      	ldr	r1, [pc, #488]	; (8000494 <fsm_auto_run+0x274>)
 80002aa:	604b      	str	r3, [r1, #4]
 80002ac:	4b79      	ldr	r3, [pc, #484]	; (8000494 <fsm_auto_run+0x274>)
 80002ae:	685b      	ldr	r3, [r3, #4]
 80002b0:	4619      	mov	r1, r3
 80002b2:	4610      	mov	r0, r2
 80002b4:	f000 fc1c 	bl	8000af0 <updateClockBuffer>
		break;
 80002b8:	e148      	b.n	800054c <fsm_auto_run+0x32c>
	case AUTO_RED_GREEN:
		if(timer_flag[2]==1){//every 1s
 80002ba:	4b77      	ldr	r3, [pc, #476]	; (8000498 <fsm_auto_run+0x278>)
 80002bc:	689b      	ldr	r3, [r3, #8]
 80002be:	2b01      	cmp	r3, #1
 80002c0:	f040 813d 	bne.w	800053e <fsm_auto_run+0x31e>
			updateClockBuffer(--counter[0], --counter[1]);
 80002c4:	4b73      	ldr	r3, [pc, #460]	; (8000494 <fsm_auto_run+0x274>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	3b01      	subs	r3, #1
 80002ca:	4a72      	ldr	r2, [pc, #456]	; (8000494 <fsm_auto_run+0x274>)
 80002cc:	6013      	str	r3, [r2, #0]
 80002ce:	4b71      	ldr	r3, [pc, #452]	; (8000494 <fsm_auto_run+0x274>)
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	4b70      	ldr	r3, [pc, #448]	; (8000494 <fsm_auto_run+0x274>)
 80002d4:	685b      	ldr	r3, [r3, #4]
 80002d6:	3b01      	subs	r3, #1
 80002d8:	496e      	ldr	r1, [pc, #440]	; (8000494 <fsm_auto_run+0x274>)
 80002da:	604b      	str	r3, [r1, #4]
 80002dc:	4b6d      	ldr	r3, [pc, #436]	; (8000494 <fsm_auto_run+0x274>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	4619      	mov	r1, r3
 80002e2:	4610      	mov	r0, r2
 80002e4:	f000 fc04 	bl	8000af0 <updateClockBuffer>
			set_timer(2, 100);
 80002e8:	2164      	movs	r1, #100	; 0x64
 80002ea:	2002      	movs	r0, #2
 80002ec:	f000 ffe6 	bl	80012bc <set_timer>
			set_timer(0, 24);
 80002f0:	2118      	movs	r1, #24
 80002f2:	2000      	movs	r0, #0
 80002f4:	f000 ffe2 	bl	80012bc <set_timer>
			led_index=0;
 80002f8:	4b68      	ldr	r3, [pc, #416]	; (800049c <fsm_auto_run+0x27c>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]

		if(timer_flag[1]==1){
 80002fe:	4b66      	ldr	r3, [pc, #408]	; (8000498 <fsm_auto_run+0x278>)
 8000300:	685b      	ldr	r3, [r3, #4]
 8000302:	2b01      	cmp	r3, #1
 8000304:	f040 811b 	bne.w	800053e <fsm_auto_run+0x31e>
			prev_status=status;
 8000308:	4b60      	ldr	r3, [pc, #384]	; (800048c <fsm_auto_run+0x26c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a64      	ldr	r2, [pc, #400]	; (80004a0 <fsm_auto_run+0x280>)
 800030e:	6013      	str	r3, [r2, #0]
			status=AUTO_RED_YELLOW;
 8000310:	4b5e      	ldr	r3, [pc, #376]	; (800048c <fsm_auto_run+0x26c>)
 8000312:	2203      	movs	r2, #3
 8000314:	601a      	str	r2, [r3, #0]
			updateClockBuffer(--counter[2], counter[2]);
 8000316:	4b5f      	ldr	r3, [pc, #380]	; (8000494 <fsm_auto_run+0x274>)
 8000318:	689b      	ldr	r3, [r3, #8]
 800031a:	3b01      	subs	r3, #1
 800031c:	4a5d      	ldr	r2, [pc, #372]	; (8000494 <fsm_auto_run+0x274>)
 800031e:	6093      	str	r3, [r2, #8]
 8000320:	4b5c      	ldr	r3, [pc, #368]	; (8000494 <fsm_auto_run+0x274>)
 8000322:	689b      	ldr	r3, [r3, #8]
 8000324:	4a5b      	ldr	r2, [pc, #364]	; (8000494 <fsm_auto_run+0x274>)
 8000326:	6892      	ldr	r2, [r2, #8]
 8000328:	4611      	mov	r1, r2
 800032a:	4618      	mov	r0, r3
 800032c:	f000 fbe0 	bl	8000af0 <updateClockBuffer>
			set_timer(1, duration[2]);
 8000330:	4b57      	ldr	r3, [pc, #348]	; (8000490 <fsm_auto_run+0x270>)
 8000332:	689b      	ldr	r3, [r3, #8]
 8000334:	4619      	mov	r1, r3
 8000336:	2001      	movs	r0, #1
 8000338:	f000 ffc0 	bl	80012bc <set_timer>
			set_timer(2,100);
 800033c:	2164      	movs	r1, #100	; 0x64
 800033e:	2002      	movs	r0, #2
 8000340:	f000 ffbc 	bl	80012bc <set_timer>
			set_timer(0, 24);
 8000344:	2118      	movs	r1, #24
 8000346:	2000      	movs	r0, #0
 8000348:	f000 ffb8 	bl	80012bc <set_timer>
			led_traffic(RED_YELLOW);
 800034c:	2003      	movs	r0, #3
 800034e:	f000 fff5 	bl	800133c <led_traffic>
			}
		}
		break;
 8000352:	e0f4      	b.n	800053e <fsm_auto_run+0x31e>
	case AUTO_RED_YELLOW:

		if(timer_flag[2]==1){//every 1s
 8000354:	4b50      	ldr	r3, [pc, #320]	; (8000498 <fsm_auto_run+0x278>)
 8000356:	689b      	ldr	r3, [r3, #8]
 8000358:	2b01      	cmp	r3, #1
 800035a:	f040 80f2 	bne.w	8000542 <fsm_auto_run+0x322>
			updateClockBuffer(--counter[2], counter[2]);
 800035e:	4b4d      	ldr	r3, [pc, #308]	; (8000494 <fsm_auto_run+0x274>)
 8000360:	689b      	ldr	r3, [r3, #8]
 8000362:	3b01      	subs	r3, #1
 8000364:	4a4b      	ldr	r2, [pc, #300]	; (8000494 <fsm_auto_run+0x274>)
 8000366:	6093      	str	r3, [r2, #8]
 8000368:	4b4a      	ldr	r3, [pc, #296]	; (8000494 <fsm_auto_run+0x274>)
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	4a49      	ldr	r2, [pc, #292]	; (8000494 <fsm_auto_run+0x274>)
 800036e:	6892      	ldr	r2, [r2, #8]
 8000370:	4611      	mov	r1, r2
 8000372:	4618      	mov	r0, r3
 8000374:	f000 fbbc 	bl	8000af0 <updateClockBuffer>
			set_timer(2, 100);
 8000378:	2164      	movs	r1, #100	; 0x64
 800037a:	2002      	movs	r0, #2
 800037c:	f000 ff9e 	bl	80012bc <set_timer>
			set_timer(0, 24);
 8000380:	2118      	movs	r1, #24
 8000382:	2000      	movs	r0, #0
 8000384:	f000 ff9a 	bl	80012bc <set_timer>
			led_index=0;
 8000388:	4b44      	ldr	r3, [pc, #272]	; (800049c <fsm_auto_run+0x27c>)
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
		if(timer_flag[1]==1){
 800038e:	4b42      	ldr	r3, [pc, #264]	; (8000498 <fsm_auto_run+0x278>)
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	2b01      	cmp	r3, #1
 8000394:	f040 80d5 	bne.w	8000542 <fsm_auto_run+0x322>
			prev_status=status;
 8000398:	4b3c      	ldr	r3, [pc, #240]	; (800048c <fsm_auto_run+0x26c>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a40      	ldr	r2, [pc, #256]	; (80004a0 <fsm_auto_run+0x280>)
 800039e:	6013      	str	r3, [r2, #0]
			status = AUTO_GREEN_RED;
 80003a0:	4b3a      	ldr	r3, [pc, #232]	; (800048c <fsm_auto_run+0x26c>)
 80003a2:	2204      	movs	r2, #4
 80003a4:	601a      	str	r2, [r3, #0]
			counter_reset();
 80003a6:	f000 f91d 	bl	80005e4 <counter_reset>
			updateClockBuffer(--counter[1], --counter[0]);
 80003aa:	4b3a      	ldr	r3, [pc, #232]	; (8000494 <fsm_auto_run+0x274>)
 80003ac:	685b      	ldr	r3, [r3, #4]
 80003ae:	3b01      	subs	r3, #1
 80003b0:	4a38      	ldr	r2, [pc, #224]	; (8000494 <fsm_auto_run+0x274>)
 80003b2:	6053      	str	r3, [r2, #4]
 80003b4:	4b37      	ldr	r3, [pc, #220]	; (8000494 <fsm_auto_run+0x274>)
 80003b6:	685a      	ldr	r2, [r3, #4]
 80003b8:	4b36      	ldr	r3, [pc, #216]	; (8000494 <fsm_auto_run+0x274>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	3b01      	subs	r3, #1
 80003be:	4935      	ldr	r1, [pc, #212]	; (8000494 <fsm_auto_run+0x274>)
 80003c0:	600b      	str	r3, [r1, #0]
 80003c2:	4b34      	ldr	r3, [pc, #208]	; (8000494 <fsm_auto_run+0x274>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4619      	mov	r1, r3
 80003c8:	4610      	mov	r0, r2
 80003ca:	f000 fb91 	bl	8000af0 <updateClockBuffer>
			set_timer(1, duration[1]);
 80003ce:	4b30      	ldr	r3, [pc, #192]	; (8000490 <fsm_auto_run+0x270>)
 80003d0:	685b      	ldr	r3, [r3, #4]
 80003d2:	4619      	mov	r1, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	f000 ff71 	bl	80012bc <set_timer>
			set_timer(2,100);
 80003da:	2164      	movs	r1, #100	; 0x64
 80003dc:	2002      	movs	r0, #2
 80003de:	f000 ff6d 	bl	80012bc <set_timer>
			set_timer(0, 24);
 80003e2:	2118      	movs	r1, #24
 80003e4:	2000      	movs	r0, #0
 80003e6:	f000 ff69 	bl	80012bc <set_timer>
			led_traffic(GREEN_RED);
 80003ea:	2004      	movs	r0, #4
 80003ec:	f000 ffa6 	bl	800133c <led_traffic>
		}
		}

		break;
 80003f0:	e0a7      	b.n	8000542 <fsm_auto_run+0x322>

	case AUTO_GREEN_RED:
		if(timer_flag[2]==1){//every 1s
 80003f2:	4b29      	ldr	r3, [pc, #164]	; (8000498 <fsm_auto_run+0x278>)
 80003f4:	689b      	ldr	r3, [r3, #8]
 80003f6:	2b01      	cmp	r3, #1
 80003f8:	f040 80a5 	bne.w	8000546 <fsm_auto_run+0x326>
			updateClockBuffer(--counter[1], --counter[0]);
 80003fc:	4b25      	ldr	r3, [pc, #148]	; (8000494 <fsm_auto_run+0x274>)
 80003fe:	685b      	ldr	r3, [r3, #4]
 8000400:	3b01      	subs	r3, #1
 8000402:	4a24      	ldr	r2, [pc, #144]	; (8000494 <fsm_auto_run+0x274>)
 8000404:	6053      	str	r3, [r2, #4]
 8000406:	4b23      	ldr	r3, [pc, #140]	; (8000494 <fsm_auto_run+0x274>)
 8000408:	685a      	ldr	r2, [r3, #4]
 800040a:	4b22      	ldr	r3, [pc, #136]	; (8000494 <fsm_auto_run+0x274>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	3b01      	subs	r3, #1
 8000410:	4920      	ldr	r1, [pc, #128]	; (8000494 <fsm_auto_run+0x274>)
 8000412:	600b      	str	r3, [r1, #0]
 8000414:	4b1f      	ldr	r3, [pc, #124]	; (8000494 <fsm_auto_run+0x274>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4619      	mov	r1, r3
 800041a:	4610      	mov	r0, r2
 800041c:	f000 fb68 	bl	8000af0 <updateClockBuffer>
			set_timer(2, 100);
 8000420:	2164      	movs	r1, #100	; 0x64
 8000422:	2002      	movs	r0, #2
 8000424:	f000 ff4a 	bl	80012bc <set_timer>
			set_timer(0, 24);
 8000428:	2118      	movs	r1, #24
 800042a:	2000      	movs	r0, #0
 800042c:	f000 ff46 	bl	80012bc <set_timer>
			led_index=0;
 8000430:	4b1a      	ldr	r3, [pc, #104]	; (800049c <fsm_auto_run+0x27c>)
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
		if(timer_flag[1]==1){
 8000436:	4b18      	ldr	r3, [pc, #96]	; (8000498 <fsm_auto_run+0x278>)
 8000438:	685b      	ldr	r3, [r3, #4]
 800043a:	2b01      	cmp	r3, #1
 800043c:	f040 8083 	bne.w	8000546 <fsm_auto_run+0x326>
			prev_status=status;
 8000440:	4b12      	ldr	r3, [pc, #72]	; (800048c <fsm_auto_run+0x26c>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a16      	ldr	r2, [pc, #88]	; (80004a0 <fsm_auto_run+0x280>)
 8000446:	6013      	str	r3, [r2, #0]
			status = AUTO_YELLOW_RED;
 8000448:	4b10      	ldr	r3, [pc, #64]	; (800048c <fsm_auto_run+0x26c>)
 800044a:	2205      	movs	r2, #5
 800044c:	601a      	str	r2, [r3, #0]
			updateClockBuffer(--counter[2], counter[2]);
 800044e:	4b11      	ldr	r3, [pc, #68]	; (8000494 <fsm_auto_run+0x274>)
 8000450:	689b      	ldr	r3, [r3, #8]
 8000452:	3b01      	subs	r3, #1
 8000454:	4a0f      	ldr	r2, [pc, #60]	; (8000494 <fsm_auto_run+0x274>)
 8000456:	6093      	str	r3, [r2, #8]
 8000458:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <fsm_auto_run+0x274>)
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	4a0d      	ldr	r2, [pc, #52]	; (8000494 <fsm_auto_run+0x274>)
 800045e:	6892      	ldr	r2, [r2, #8]
 8000460:	4611      	mov	r1, r2
 8000462:	4618      	mov	r0, r3
 8000464:	f000 fb44 	bl	8000af0 <updateClockBuffer>
			set_timer(1, duration[2]);
 8000468:	4b09      	ldr	r3, [pc, #36]	; (8000490 <fsm_auto_run+0x270>)
 800046a:	689b      	ldr	r3, [r3, #8]
 800046c:	4619      	mov	r1, r3
 800046e:	2001      	movs	r0, #1
 8000470:	f000 ff24 	bl	80012bc <set_timer>
			set_timer(2,100);
 8000474:	2164      	movs	r1, #100	; 0x64
 8000476:	2002      	movs	r0, #2
 8000478:	f000 ff20 	bl	80012bc <set_timer>
			set_timer(0, 24);
 800047c:	2118      	movs	r1, #24
 800047e:	2000      	movs	r0, #0
 8000480:	f000 ff1c 	bl	80012bc <set_timer>
			led_traffic(YELLOW_RED);
 8000484:	2005      	movs	r0, #5
 8000486:	f000 ff59 	bl	800133c <led_traffic>
		}
		}

		break;
 800048a:	e05c      	b.n	8000546 <fsm_auto_run+0x326>
 800048c:	20000000 	.word	0x20000000
 8000490:	20000150 	.word	0x20000150
 8000494:	20000178 	.word	0x20000178
 8000498:	2000000c 	.word	0x2000000c
 800049c:	20000058 	.word	0x20000058
 80004a0:	20000004 	.word	0x20000004
	case AUTO_YELLOW_RED:
		if(timer_flag[2]==1){//every 1s
 80004a4:	4b49      	ldr	r3, [pc, #292]	; (80005cc <fsm_auto_run+0x3ac>)
 80004a6:	689b      	ldr	r3, [r3, #8]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d14e      	bne.n	800054a <fsm_auto_run+0x32a>
			updateClockBuffer(--counter[2], counter[2]);
 80004ac:	4b48      	ldr	r3, [pc, #288]	; (80005d0 <fsm_auto_run+0x3b0>)
 80004ae:	689b      	ldr	r3, [r3, #8]
 80004b0:	3b01      	subs	r3, #1
 80004b2:	4a47      	ldr	r2, [pc, #284]	; (80005d0 <fsm_auto_run+0x3b0>)
 80004b4:	6093      	str	r3, [r2, #8]
 80004b6:	4b46      	ldr	r3, [pc, #280]	; (80005d0 <fsm_auto_run+0x3b0>)
 80004b8:	689b      	ldr	r3, [r3, #8]
 80004ba:	4a45      	ldr	r2, [pc, #276]	; (80005d0 <fsm_auto_run+0x3b0>)
 80004bc:	6892      	ldr	r2, [r2, #8]
 80004be:	4611      	mov	r1, r2
 80004c0:	4618      	mov	r0, r3
 80004c2:	f000 fb15 	bl	8000af0 <updateClockBuffer>
			set_timer(2, 100);
 80004c6:	2164      	movs	r1, #100	; 0x64
 80004c8:	2002      	movs	r0, #2
 80004ca:	f000 fef7 	bl	80012bc <set_timer>
			set_timer(0, 24);
 80004ce:	2118      	movs	r1, #24
 80004d0:	2000      	movs	r0, #0
 80004d2:	f000 fef3 	bl	80012bc <set_timer>
			led_index=0;
 80004d6:	4b3f      	ldr	r3, [pc, #252]	; (80005d4 <fsm_auto_run+0x3b4>)
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
		if(timer_flag[1]==1){
 80004dc:	4b3b      	ldr	r3, [pc, #236]	; (80005cc <fsm_auto_run+0x3ac>)
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d132      	bne.n	800054a <fsm_auto_run+0x32a>
			prev_status=status;
 80004e4:	4b3c      	ldr	r3, [pc, #240]	; (80005d8 <fsm_auto_run+0x3b8>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a3c      	ldr	r2, [pc, #240]	; (80005dc <fsm_auto_run+0x3bc>)
 80004ea:	6013      	str	r3, [r2, #0]
			status = AUTO_RED_GREEN;
 80004ec:	4b3a      	ldr	r3, [pc, #232]	; (80005d8 <fsm_auto_run+0x3b8>)
 80004ee:	2202      	movs	r2, #2
 80004f0:	601a      	str	r2, [r3, #0]
			counter_reset();
 80004f2:	f000 f877 	bl	80005e4 <counter_reset>
			updateClockBuffer(--counter[0], --counter[1]);
 80004f6:	4b36      	ldr	r3, [pc, #216]	; (80005d0 <fsm_auto_run+0x3b0>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	3b01      	subs	r3, #1
 80004fc:	4a34      	ldr	r2, [pc, #208]	; (80005d0 <fsm_auto_run+0x3b0>)
 80004fe:	6013      	str	r3, [r2, #0]
 8000500:	4b33      	ldr	r3, [pc, #204]	; (80005d0 <fsm_auto_run+0x3b0>)
 8000502:	681a      	ldr	r2, [r3, #0]
 8000504:	4b32      	ldr	r3, [pc, #200]	; (80005d0 <fsm_auto_run+0x3b0>)
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	3b01      	subs	r3, #1
 800050a:	4931      	ldr	r1, [pc, #196]	; (80005d0 <fsm_auto_run+0x3b0>)
 800050c:	604b      	str	r3, [r1, #4]
 800050e:	4b30      	ldr	r3, [pc, #192]	; (80005d0 <fsm_auto_run+0x3b0>)
 8000510:	685b      	ldr	r3, [r3, #4]
 8000512:	4619      	mov	r1, r3
 8000514:	4610      	mov	r0, r2
 8000516:	f000 faeb 	bl	8000af0 <updateClockBuffer>
			set_timer(1,duration[1]);
 800051a:	4b31      	ldr	r3, [pc, #196]	; (80005e0 <fsm_auto_run+0x3c0>)
 800051c:	685b      	ldr	r3, [r3, #4]
 800051e:	4619      	mov	r1, r3
 8000520:	2001      	movs	r0, #1
 8000522:	f000 fecb 	bl	80012bc <set_timer>
			set_timer(2,100);
 8000526:	2164      	movs	r1, #100	; 0x64
 8000528:	2002      	movs	r0, #2
 800052a:	f000 fec7 	bl	80012bc <set_timer>
			set_timer(0, 24);
 800052e:	2118      	movs	r1, #24
 8000530:	2000      	movs	r0, #0
 8000532:	f000 fec3 	bl	80012bc <set_timer>
			led_traffic(RED_GREEN);
 8000536:	2002      	movs	r0, #2
 8000538:	f000 ff00 	bl	800133c <led_traffic>
		}

		}
		break;
 800053c:	e005      	b.n	800054a <fsm_auto_run+0x32a>
		break;
 800053e:	bf00      	nop
 8000540:	e004      	b.n	800054c <fsm_auto_run+0x32c>
		break;
 8000542:	bf00      	nop
 8000544:	e002      	b.n	800054c <fsm_auto_run+0x32c>
		break;
 8000546:	bf00      	nop
 8000548:	e000      	b.n	800054c <fsm_auto_run+0x32c>
		break;
 800054a:	bf00      	nop
	default:
		return;
		break;
	}
	//SWITCH TO MANUAL
	if(isButtonPress(0)){
 800054c:	2000      	movs	r0, #0
 800054e:	f7ff fe4d 	bl	80001ec <isButtonPress>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d011      	beq.n	800057c <fsm_auto_run+0x35c>
		counter_reset();
 8000558:	f000 f844 	bl	80005e4 <counter_reset>
		prev_status=status;
 800055c:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <fsm_auto_run+0x3b8>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a1e      	ldr	r2, [pc, #120]	; (80005dc <fsm_auto_run+0x3bc>)
 8000562:	6013      	str	r3, [r2, #0]
		status += 30;//correspond status in manual
 8000564:	4b1c      	ldr	r3, [pc, #112]	; (80005d8 <fsm_auto_run+0x3b8>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	331e      	adds	r3, #30
 800056a:	4a1b      	ldr	r2, [pc, #108]	; (80005d8 <fsm_auto_run+0x3b8>)
 800056c:	6013      	str	r3, [r2, #0]
		set_timer(1, duration[0]);
 800056e:	4b1c      	ldr	r3, [pc, #112]	; (80005e0 <fsm_auto_run+0x3c0>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4619      	mov	r1, r3
 8000574:	2001      	movs	r0, #1
 8000576:	f000 fea1 	bl	80012bc <set_timer>
		return;
 800057a:	e025      	b.n	80005c8 <fsm_auto_run+0x3a8>
	}
	//SWITCH TO SETTING
	if(isButtonPress(2)){
 800057c:	2002      	movs	r0, #2
 800057e:	f7ff fe35 	bl	80001ec <isButtonPress>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d00d      	beq.n	80005a4 <fsm_auto_run+0x384>
		prev_status=status;
 8000588:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <fsm_auto_run+0x3b8>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a13      	ldr	r2, [pc, #76]	; (80005dc <fsm_auto_run+0x3bc>)
 800058e:	6013      	str	r3, [r2, #0]
		counter_reset();
 8000590:	f000 f828 	bl	80005e4 <counter_reset>
		resetled();
 8000594:	f000 fa40 	bl	8000a18 <resetled>
		reset7seg();
 8000598:	f000 fa80 	bl	8000a9c <reset7seg>
		status= SET_GREEN;
 800059c:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <fsm_auto_run+0x3b8>)
 800059e:	220b      	movs	r2, #11
 80005a0:	601a      	str	r2, [r3, #0]
		return;
 80005a2:	e011      	b.n	80005c8 <fsm_auto_run+0x3a8>
	}
	if(timer_flag[0]==1){
 80005a4:	4b09      	ldr	r3, [pc, #36]	; (80005cc <fsm_auto_run+0x3ac>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d10d      	bne.n	80005c8 <fsm_auto_run+0x3a8>
		update7SEG(led_index++);
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <fsm_auto_run+0x3b4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	1c5a      	adds	r2, r3, #1
 80005b2:	4908      	ldr	r1, [pc, #32]	; (80005d4 <fsm_auto_run+0x3b4>)
 80005b4:	600a      	str	r2, [r1, #0]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fad6 	bl	8000b68 <update7SEG>
		set_timer(0, 24);
 80005bc:	2118      	movs	r1, #24
 80005be:	2000      	movs	r0, #0
 80005c0:	f000 fe7c 	bl	80012bc <set_timer>
 80005c4:	e000      	b.n	80005c8 <fsm_auto_run+0x3a8>
		return;
 80005c6:	bf00      	nop
	}

}
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	2000000c 	.word	0x2000000c
 80005d0:	20000178 	.word	0x20000178
 80005d4:	20000058 	.word	0x20000058
 80005d8:	20000000 	.word	0x20000000
 80005dc:	20000004 	.word	0x20000004
 80005e0:	20000150 	.word	0x20000150

080005e4 <counter_reset>:

void counter_reset(){
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
	counter[1]=duration[1]/100;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <counter_reset+0x44>)
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	4a0f      	ldr	r2, [pc, #60]	; (800062c <counter_reset+0x48>)
 80005ee:	fb82 1203 	smull	r1, r2, r2, r3
 80005f2:	1152      	asrs	r2, r2, #5
 80005f4:	17db      	asrs	r3, r3, #31
 80005f6:	1ad3      	subs	r3, r2, r3
 80005f8:	4a0d      	ldr	r2, [pc, #52]	; (8000630 <counter_reset+0x4c>)
 80005fa:	6053      	str	r3, [r2, #4]
	counter[2]=duration[2]/100;
 80005fc:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <counter_reset+0x44>)
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	4a0a      	ldr	r2, [pc, #40]	; (800062c <counter_reset+0x48>)
 8000602:	fb82 1203 	smull	r1, r2, r2, r3
 8000606:	1152      	asrs	r2, r2, #5
 8000608:	17db      	asrs	r3, r3, #31
 800060a:	1ad3      	subs	r3, r2, r3
 800060c:	4a08      	ldr	r2, [pc, #32]	; (8000630 <counter_reset+0x4c>)
 800060e:	6093      	str	r3, [r2, #8]
	counter[0]=counter[1]+counter[2];
 8000610:	4b07      	ldr	r3, [pc, #28]	; (8000630 <counter_reset+0x4c>)
 8000612:	685a      	ldr	r2, [r3, #4]
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <counter_reset+0x4c>)
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	4413      	add	r3, r2
 800061a:	4a05      	ldr	r2, [pc, #20]	; (8000630 <counter_reset+0x4c>)
 800061c:	6013      	str	r3, [r2, #0]


	}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	20000150 	.word	0x20000150
 800062c:	51eb851f 	.word	0x51eb851f
 8000630:	20000178 	.word	0x20000178

08000634 <fsm_manual_run>:


#include "fsm_manual.h"
int duration[10];

void fsm_manual_run(){
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	switch(status){
 8000638:	4b49      	ldr	r3, [pc, #292]	; (8000760 <fsm_manual_run+0x12c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	3b20      	subs	r3, #32
 800063e:	2b03      	cmp	r3, #3
 8000640:	f200 808b 	bhi.w	800075a <fsm_manual_run+0x126>
 8000644:	a201      	add	r2, pc, #4	; (adr r2, 800064c <fsm_manual_run+0x18>)
 8000646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800064a:	bf00      	nop
 800064c:	0800065d 	.word	0x0800065d
 8000650:	0800068b 	.word	0x0800068b
 8000654:	080006b9 	.word	0x080006b9
 8000658:	080006e7 	.word	0x080006e7
	case MANUAL_RED_GREEN:

		if(isButtonPress(1)){
 800065c:	2001      	movs	r0, #1
 800065e:	f7ff fdc5 	bl	80001ec <isButtonPress>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d055      	beq.n	8000714 <fsm_manual_run+0xe0>
			led_traffic(RED_YELLOW);
 8000668:	2003      	movs	r0, #3
 800066a:	f000 fe67 	bl	800133c <led_traffic>
			prev_status=status;
 800066e:	4b3c      	ldr	r3, [pc, #240]	; (8000760 <fsm_manual_run+0x12c>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a3c      	ldr	r2, [pc, #240]	; (8000764 <fsm_manual_run+0x130>)
 8000674:	6013      	str	r3, [r2, #0]
			status = MANUAL_RED_YELLOW;
 8000676:	4b3a      	ldr	r3, [pc, #232]	; (8000760 <fsm_manual_run+0x12c>)
 8000678:	2221      	movs	r2, #33	; 0x21
 800067a:	601a      	str	r2, [r3, #0]
			set_timer(1, duration[0]);
 800067c:	4b3a      	ldr	r3, [pc, #232]	; (8000768 <fsm_manual_run+0x134>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4619      	mov	r1, r3
 8000682:	2001      	movs	r0, #1
 8000684:	f000 fe1a 	bl	80012bc <set_timer>
		}
		break;
 8000688:	e044      	b.n	8000714 <fsm_manual_run+0xe0>
	case MANUAL_RED_YELLOW:
		if(isButtonPress(1)){
 800068a:	2001      	movs	r0, #1
 800068c:	f7ff fdae 	bl	80001ec <isButtonPress>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d040      	beq.n	8000718 <fsm_manual_run+0xe4>
			led_traffic(GREEN_RED);
 8000696:	2004      	movs	r0, #4
 8000698:	f000 fe50 	bl	800133c <led_traffic>
			prev_status=status;
 800069c:	4b30      	ldr	r3, [pc, #192]	; (8000760 <fsm_manual_run+0x12c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a30      	ldr	r2, [pc, #192]	; (8000764 <fsm_manual_run+0x130>)
 80006a2:	6013      	str	r3, [r2, #0]
			status = MANUAL_GREEN_RED;
 80006a4:	4b2e      	ldr	r3, [pc, #184]	; (8000760 <fsm_manual_run+0x12c>)
 80006a6:	2222      	movs	r2, #34	; 0x22
 80006a8:	601a      	str	r2, [r3, #0]
			set_timer(1, duration[0]);
 80006aa:	4b2f      	ldr	r3, [pc, #188]	; (8000768 <fsm_manual_run+0x134>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4619      	mov	r1, r3
 80006b0:	2001      	movs	r0, #1
 80006b2:	f000 fe03 	bl	80012bc <set_timer>
		}
		break;
 80006b6:	e02f      	b.n	8000718 <fsm_manual_run+0xe4>
	case MANUAL_GREEN_RED:
		if(isButtonPress(1)){
 80006b8:	2001      	movs	r0, #1
 80006ba:	f7ff fd97 	bl	80001ec <isButtonPress>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d02b      	beq.n	800071c <fsm_manual_run+0xe8>
			led_traffic(YELLOW_RED);
 80006c4:	2005      	movs	r0, #5
 80006c6:	f000 fe39 	bl	800133c <led_traffic>
			prev_status=status;
 80006ca:	4b25      	ldr	r3, [pc, #148]	; (8000760 <fsm_manual_run+0x12c>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a25      	ldr	r2, [pc, #148]	; (8000764 <fsm_manual_run+0x130>)
 80006d0:	6013      	str	r3, [r2, #0]
			status = MANUAL_YELLOW_RED;
 80006d2:	4b23      	ldr	r3, [pc, #140]	; (8000760 <fsm_manual_run+0x12c>)
 80006d4:	2223      	movs	r2, #35	; 0x23
 80006d6:	601a      	str	r2, [r3, #0]
			set_timer(1, duration[0]);
 80006d8:	4b23      	ldr	r3, [pc, #140]	; (8000768 <fsm_manual_run+0x134>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4619      	mov	r1, r3
 80006de:	2001      	movs	r0, #1
 80006e0:	f000 fdec 	bl	80012bc <set_timer>
		}
		break;
 80006e4:	e01a      	b.n	800071c <fsm_manual_run+0xe8>
	case MANUAL_YELLOW_RED:
		if(isButtonPress(1)){
 80006e6:	2001      	movs	r0, #1
 80006e8:	f7ff fd80 	bl	80001ec <isButtonPress>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d016      	beq.n	8000720 <fsm_manual_run+0xec>
			led_traffic(RED_GREEN);
 80006f2:	2002      	movs	r0, #2
 80006f4:	f000 fe22 	bl	800133c <led_traffic>
			prev_status=status;
 80006f8:	4b19      	ldr	r3, [pc, #100]	; (8000760 <fsm_manual_run+0x12c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a19      	ldr	r2, [pc, #100]	; (8000764 <fsm_manual_run+0x130>)
 80006fe:	6013      	str	r3, [r2, #0]
			status = MANUAL_RED_GREEN;
 8000700:	4b17      	ldr	r3, [pc, #92]	; (8000760 <fsm_manual_run+0x12c>)
 8000702:	2220      	movs	r2, #32
 8000704:	601a      	str	r2, [r3, #0]
			set_timer(1, duration[0]);
 8000706:	4b18      	ldr	r3, [pc, #96]	; (8000768 <fsm_manual_run+0x134>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4619      	mov	r1, r3
 800070c:	2001      	movs	r0, #1
 800070e:	f000 fdd5 	bl	80012bc <set_timer>
		}
		break;
 8000712:	e005      	b.n	8000720 <fsm_manual_run+0xec>
		break;
 8000714:	bf00      	nop
 8000716:	e004      	b.n	8000722 <fsm_manual_run+0xee>
		break;
 8000718:	bf00      	nop
 800071a:	e002      	b.n	8000722 <fsm_manual_run+0xee>
		break;
 800071c:	bf00      	nop
 800071e:	e000      	b.n	8000722 <fsm_manual_run+0xee>
		break;
 8000720:	bf00      	nop
	default:
		return;

		}
	if(timer_flag[1] ==1){
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <fsm_manual_run+0x138>)
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d109      	bne.n	800073e <fsm_manual_run+0x10a>
		prev_status=status;
 800072a:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <fsm_manual_run+0x12c>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a0d      	ldr	r2, [pc, #52]	; (8000764 <fsm_manual_run+0x130>)
 8000730:	6013      	str	r3, [r2, #0]
		status -=30;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <fsm_manual_run+0x12c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	3b1e      	subs	r3, #30
 8000738:	4a09      	ldr	r2, [pc, #36]	; (8000760 <fsm_manual_run+0x12c>)
 800073a:	6013      	str	r3, [r2, #0]
		return;
 800073c:	e00e      	b.n	800075c <fsm_manual_run+0x128>
	}

	if(isButtonPress(2)){
 800073e:	2002      	movs	r0, #2
 8000740:	f7ff fd54 	bl	80001ec <isButtonPress>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d008      	beq.n	800075c <fsm_manual_run+0x128>
		prev_status=status;
 800074a:	4b05      	ldr	r3, [pc, #20]	; (8000760 <fsm_manual_run+0x12c>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a05      	ldr	r2, [pc, #20]	; (8000764 <fsm_manual_run+0x130>)
 8000750:	6013      	str	r3, [r2, #0]
		status= SET_MANUAL;
 8000752:	4b03      	ldr	r3, [pc, #12]	; (8000760 <fsm_manual_run+0x12c>)
 8000754:	220d      	movs	r2, #13
 8000756:	601a      	str	r2, [r3, #0]
		return;
 8000758:	e000      	b.n	800075c <fsm_manual_run+0x128>
		return;
 800075a:	bf00      	nop
	}
}
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000000 	.word	0x20000000
 8000764:	20000004 	.word	0x20000004
 8000768:	20000150 	.word	0x20000150
 800076c:	2000000c 	.word	0x2000000c

08000770 <fsm_setting_run>:
#include "fsm_setting.h"

int temp=0;


void fsm_setting_run(){
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	switch(status){
 8000774:	4ba1      	ldr	r3, [pc, #644]	; (80009fc <fsm_setting_run+0x28c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b0d      	cmp	r3, #13
 800077a:	f000 80c7 	beq.w	800090c <fsm_setting_run+0x19c>
 800077e:	2b0d      	cmp	r3, #13
 8000780:	f300 8139 	bgt.w	80009f6 <fsm_setting_run+0x286>
 8000784:	2b0b      	cmp	r3, #11
 8000786:	d002      	beq.n	800078e <fsm_setting_run+0x1e>
 8000788:	2b0c      	cmp	r3, #12
 800078a:	d053      	beq.n	8000834 <fsm_setting_run+0xc4>
			temp=0;
		}

		break;
	default:
		return;
 800078c:	e133      	b.n	80009f6 <fsm_setting_run+0x286>
		led_setting(SET_GREEN);
 800078e:	200b      	movs	r0, #11
 8000790:	f000 fe38 	bl	8001404 <led_setting>
		if(isButtonPress(1)){
 8000794:	2001      	movs	r0, #1
 8000796:	f7ff fd29 	bl	80001ec <isButtonPress>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d011      	beq.n	80007c4 <fsm_setting_run+0x54>
			temp++;
 80007a0:	4b97      	ldr	r3, [pc, #604]	; (8000a00 <fsm_setting_run+0x290>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	3301      	adds	r3, #1
 80007a6:	4a96      	ldr	r2, [pc, #600]	; (8000a00 <fsm_setting_run+0x290>)
 80007a8:	6013      	str	r3, [r2, #0]
			if(temp>98){
 80007aa:	4b95      	ldr	r3, [pc, #596]	; (8000a00 <fsm_setting_run+0x290>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2b62      	cmp	r3, #98	; 0x62
 80007b0:	dd02      	ble.n	80007b8 <fsm_setting_run+0x48>
				temp=0;
 80007b2:	4b93      	ldr	r3, [pc, #588]	; (8000a00 <fsm_setting_run+0x290>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
		updateClockBuffer(0, temp);
 80007b8:	4b91      	ldr	r3, [pc, #580]	; (8000a00 <fsm_setting_run+0x290>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4619      	mov	r1, r3
 80007be:	2000      	movs	r0, #0
 80007c0:	f000 f996 	bl	8000af0 <updateClockBuffer>
		if(isButtonPress(0)){
 80007c4:	2000      	movs	r0, #0
 80007c6:	f7ff fd11 	bl	80001ec <isButtonPress>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d026      	beq.n	800081e <fsm_setting_run+0xae>
			status = SET_YELLOW;
 80007d0:	4b8a      	ldr	r3, [pc, #552]	; (80009fc <fsm_setting_run+0x28c>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	601a      	str	r2, [r3, #0]
			temp*=100;
 80007d6:	4b8a      	ldr	r3, [pc, #552]	; (8000a00 <fsm_setting_run+0x290>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2264      	movs	r2, #100	; 0x64
 80007dc:	fb02 f303 	mul.w	r3, r2, r3
 80007e0:	4a87      	ldr	r2, [pc, #540]	; (8000a00 <fsm_setting_run+0x290>)
 80007e2:	6013      	str	r3, [r2, #0]
			temp = temp^duration[1];
 80007e4:	4b87      	ldr	r3, [pc, #540]	; (8000a04 <fsm_setting_run+0x294>)
 80007e6:	685a      	ldr	r2, [r3, #4]
 80007e8:	4b85      	ldr	r3, [pc, #532]	; (8000a00 <fsm_setting_run+0x290>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4053      	eors	r3, r2
 80007ee:	4a84      	ldr	r2, [pc, #528]	; (8000a00 <fsm_setting_run+0x290>)
 80007f0:	6013      	str	r3, [r2, #0]
			duration[1] = temp^duration[1];
 80007f2:	4b84      	ldr	r3, [pc, #528]	; (8000a04 <fsm_setting_run+0x294>)
 80007f4:	685a      	ldr	r2, [r3, #4]
 80007f6:	4b82      	ldr	r3, [pc, #520]	; (8000a00 <fsm_setting_run+0x290>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4053      	eors	r3, r2
 80007fc:	4a81      	ldr	r2, [pc, #516]	; (8000a04 <fsm_setting_run+0x294>)
 80007fe:	6053      	str	r3, [r2, #4]
			temp = temp^duration[1];
 8000800:	4b80      	ldr	r3, [pc, #512]	; (8000a04 <fsm_setting_run+0x294>)
 8000802:	685a      	ldr	r2, [r3, #4]
 8000804:	4b7e      	ldr	r3, [pc, #504]	; (8000a00 <fsm_setting_run+0x290>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4053      	eors	r3, r2
 800080a:	4a7d      	ldr	r2, [pc, #500]	; (8000a00 <fsm_setting_run+0x290>)
 800080c:	6013      	str	r3, [r2, #0]
			if(duration[1]<=0){//no changes=old value
 800080e:	4b7d      	ldr	r3, [pc, #500]	; (8000a04 <fsm_setting_run+0x294>)
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	dc03      	bgt.n	800081e <fsm_setting_run+0xae>
				duration[1]=temp;
 8000816:	4b7a      	ldr	r3, [pc, #488]	; (8000a00 <fsm_setting_run+0x290>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a7a      	ldr	r2, [pc, #488]	; (8000a04 <fsm_setting_run+0x294>)
 800081c:	6053      	str	r3, [r2, #4]
		if(isButtonPress(2)){
 800081e:	2002      	movs	r0, #2
 8000820:	f7ff fce4 	bl	80001ec <isButtonPress>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	f000 80ba 	beq.w	80009a0 <fsm_setting_run+0x230>
			temp=0;
 800082c:	4b74      	ldr	r3, [pc, #464]	; (8000a00 <fsm_setting_run+0x290>)
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
		break;
 8000832:	e0b5      	b.n	80009a0 <fsm_setting_run+0x230>
		led_setting(SET_YELLOW);
 8000834:	200c      	movs	r0, #12
 8000836:	f000 fde5 	bl	8001404 <led_setting>
		if(isButtonPress(1)){
 800083a:	2001      	movs	r0, #1
 800083c:	f7ff fcd6 	bl	80001ec <isButtonPress>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d01b      	beq.n	800087e <fsm_setting_run+0x10e>
			temp++;
 8000846:	4b6e      	ldr	r3, [pc, #440]	; (8000a00 <fsm_setting_run+0x290>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	3301      	adds	r3, #1
 800084c:	4a6c      	ldr	r2, [pc, #432]	; (8000a00 <fsm_setting_run+0x290>)
 800084e:	6013      	str	r3, [r2, #0]
			if(temp>(99-duration[1]/100)){
 8000850:	4b6c      	ldr	r3, [pc, #432]	; (8000a04 <fsm_setting_run+0x294>)
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	4a6c      	ldr	r2, [pc, #432]	; (8000a08 <fsm_setting_run+0x298>)
 8000856:	fb82 1203 	smull	r1, r2, r2, r3
 800085a:	1152      	asrs	r2, r2, #5
 800085c:	17db      	asrs	r3, r3, #31
 800085e:	1a9b      	subs	r3, r3, r2
 8000860:	f103 0263 	add.w	r2, r3, #99	; 0x63
 8000864:	4b66      	ldr	r3, [pc, #408]	; (8000a00 <fsm_setting_run+0x290>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	429a      	cmp	r2, r3
 800086a:	da02      	bge.n	8000872 <fsm_setting_run+0x102>
				temp=0;
 800086c:	4b64      	ldr	r3, [pc, #400]	; (8000a00 <fsm_setting_run+0x290>)
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
			updateClockBuffer(0, temp);
 8000872:	4b63      	ldr	r3, [pc, #396]	; (8000a00 <fsm_setting_run+0x290>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4619      	mov	r1, r3
 8000878:	2000      	movs	r0, #0
 800087a:	f000 f939 	bl	8000af0 <updateClockBuffer>
		if(isButtonPress(0)){
 800087e:	2000      	movs	r0, #0
 8000880:	f7ff fcb4 	bl	80001ec <isButtonPress>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d036      	beq.n	80008f8 <fsm_setting_run+0x188>
			status =prev_status;
 800088a:	4b60      	ldr	r3, [pc, #384]	; (8000a0c <fsm_setting_run+0x29c>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a5b      	ldr	r2, [pc, #364]	; (80009fc <fsm_setting_run+0x28c>)
 8000890:	6013      	str	r3, [r2, #0]
			led_traffic_back(status);
 8000892:	4b5a      	ldr	r3, [pc, #360]	; (80009fc <fsm_setting_run+0x28c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4618      	mov	r0, r3
 8000898:	f000 fdea 	bl	8001470 <led_traffic_back>
			temp*=100;
 800089c:	4b58      	ldr	r3, [pc, #352]	; (8000a00 <fsm_setting_run+0x290>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2264      	movs	r2, #100	; 0x64
 80008a2:	fb02 f303 	mul.w	r3, r2, r3
 80008a6:	4a56      	ldr	r2, [pc, #344]	; (8000a00 <fsm_setting_run+0x290>)
 80008a8:	6013      	str	r3, [r2, #0]
			temp = temp^duration[2];
 80008aa:	4b56      	ldr	r3, [pc, #344]	; (8000a04 <fsm_setting_run+0x294>)
 80008ac:	689a      	ldr	r2, [r3, #8]
 80008ae:	4b54      	ldr	r3, [pc, #336]	; (8000a00 <fsm_setting_run+0x290>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4053      	eors	r3, r2
 80008b4:	4a52      	ldr	r2, [pc, #328]	; (8000a00 <fsm_setting_run+0x290>)
 80008b6:	6013      	str	r3, [r2, #0]
			duration[2] = temp^duration[2];
 80008b8:	4b52      	ldr	r3, [pc, #328]	; (8000a04 <fsm_setting_run+0x294>)
 80008ba:	689a      	ldr	r2, [r3, #8]
 80008bc:	4b50      	ldr	r3, [pc, #320]	; (8000a00 <fsm_setting_run+0x290>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4053      	eors	r3, r2
 80008c2:	4a50      	ldr	r2, [pc, #320]	; (8000a04 <fsm_setting_run+0x294>)
 80008c4:	6093      	str	r3, [r2, #8]
			temp = temp^duration[2];
 80008c6:	4b4f      	ldr	r3, [pc, #316]	; (8000a04 <fsm_setting_run+0x294>)
 80008c8:	689a      	ldr	r2, [r3, #8]
 80008ca:	4b4d      	ldr	r3, [pc, #308]	; (8000a00 <fsm_setting_run+0x290>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4053      	eors	r3, r2
 80008d0:	4a4b      	ldr	r2, [pc, #300]	; (8000a00 <fsm_setting_run+0x290>)
 80008d2:	6013      	str	r3, [r2, #0]
			if(duration[2]<=0){
 80008d4:	4b4b      	ldr	r3, [pc, #300]	; (8000a04 <fsm_setting_run+0x294>)
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	dc03      	bgt.n	80008e4 <fsm_setting_run+0x174>
				duration[2]=temp;
 80008dc:	4b48      	ldr	r3, [pc, #288]	; (8000a00 <fsm_setting_run+0x290>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a48      	ldr	r2, [pc, #288]	; (8000a04 <fsm_setting_run+0x294>)
 80008e2:	6093      	str	r3, [r2, #8]
			counter_reset();
 80008e4:	f7ff fe7e 	bl	80005e4 <counter_reset>
			set_timer(0, 24);
 80008e8:	2118      	movs	r1, #24
 80008ea:	2000      	movs	r0, #0
 80008ec:	f000 fce6 	bl	80012bc <set_timer>
			set_timer(2, 100);
 80008f0:	2164      	movs	r1, #100	; 0x64
 80008f2:	2002      	movs	r0, #2
 80008f4:	f000 fce2 	bl	80012bc <set_timer>
		if(isButtonPress(2)){
 80008f8:	2002      	movs	r0, #2
 80008fa:	f7ff fc77 	bl	80001ec <isButtonPress>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d04f      	beq.n	80009a4 <fsm_setting_run+0x234>
			temp=0;
 8000904:	4b3e      	ldr	r3, [pc, #248]	; (8000a00 <fsm_setting_run+0x290>)
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
		break;
 800090a:	e04b      	b.n	80009a4 <fsm_setting_run+0x234>
		if(isButtonPress(1)){
 800090c:	2001      	movs	r0, #1
 800090e:	f7ff fc6d 	bl	80001ec <isButtonPress>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d00b      	beq.n	8000930 <fsm_setting_run+0x1c0>
			temp++;
 8000918:	4b39      	ldr	r3, [pc, #228]	; (8000a00 <fsm_setting_run+0x290>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	3301      	adds	r3, #1
 800091e:	4a38      	ldr	r2, [pc, #224]	; (8000a00 <fsm_setting_run+0x290>)
 8000920:	6013      	str	r3, [r2, #0]
			if(temp>99){
 8000922:	4b37      	ldr	r3, [pc, #220]	; (8000a00 <fsm_setting_run+0x290>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b63      	cmp	r3, #99	; 0x63
 8000928:	dd02      	ble.n	8000930 <fsm_setting_run+0x1c0>
				temp=0;
 800092a:	4b35      	ldr	r3, [pc, #212]	; (8000a00 <fsm_setting_run+0x290>)
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
		if(isButtonPress(0)){
 8000930:	2000      	movs	r0, #0
 8000932:	f7ff fc5b 	bl	80001ec <isButtonPress>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d027      	beq.n	800098c <fsm_setting_run+0x21c>
			status = prev_status;
 800093c:	4b33      	ldr	r3, [pc, #204]	; (8000a0c <fsm_setting_run+0x29c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a2e      	ldr	r2, [pc, #184]	; (80009fc <fsm_setting_run+0x28c>)
 8000942:	6013      	str	r3, [r2, #0]
			temp*=100;
 8000944:	4b2e      	ldr	r3, [pc, #184]	; (8000a00 <fsm_setting_run+0x290>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2264      	movs	r2, #100	; 0x64
 800094a:	fb02 f303 	mul.w	r3, r2, r3
 800094e:	4a2c      	ldr	r2, [pc, #176]	; (8000a00 <fsm_setting_run+0x290>)
 8000950:	6013      	str	r3, [r2, #0]
			temp = temp^duration[0];
 8000952:	4b2c      	ldr	r3, [pc, #176]	; (8000a04 <fsm_setting_run+0x294>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	4b2a      	ldr	r3, [pc, #168]	; (8000a00 <fsm_setting_run+0x290>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4053      	eors	r3, r2
 800095c:	4a28      	ldr	r2, [pc, #160]	; (8000a00 <fsm_setting_run+0x290>)
 800095e:	6013      	str	r3, [r2, #0]
			duration[0] = temp^duration[0];
 8000960:	4b28      	ldr	r3, [pc, #160]	; (8000a04 <fsm_setting_run+0x294>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b26      	ldr	r3, [pc, #152]	; (8000a00 <fsm_setting_run+0x290>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4053      	eors	r3, r2
 800096a:	4a26      	ldr	r2, [pc, #152]	; (8000a04 <fsm_setting_run+0x294>)
 800096c:	6013      	str	r3, [r2, #0]
			temp = temp^duration[0];
 800096e:	4b25      	ldr	r3, [pc, #148]	; (8000a04 <fsm_setting_run+0x294>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	4b23      	ldr	r3, [pc, #140]	; (8000a00 <fsm_setting_run+0x290>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4053      	eors	r3, r2
 8000978:	4a21      	ldr	r2, [pc, #132]	; (8000a00 <fsm_setting_run+0x290>)
 800097a:	6013      	str	r3, [r2, #0]
			if(!duration[0]){
 800097c:	4b21      	ldr	r3, [pc, #132]	; (8000a04 <fsm_setting_run+0x294>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d103      	bne.n	800098c <fsm_setting_run+0x21c>
				duration[0]=temp;
 8000984:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <fsm_setting_run+0x290>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a1e      	ldr	r2, [pc, #120]	; (8000a04 <fsm_setting_run+0x294>)
 800098a:	6013      	str	r3, [r2, #0]
		if(isButtonPress(2)){
 800098c:	2002      	movs	r0, #2
 800098e:	f7ff fc2d 	bl	80001ec <isButtonPress>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d007      	beq.n	80009a8 <fsm_setting_run+0x238>
			temp=0;
 8000998:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <fsm_setting_run+0x290>)
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
		break;
 800099e:	e003      	b.n	80009a8 <fsm_setting_run+0x238>
		break;
 80009a0:	bf00      	nop
 80009a2:	e002      	b.n	80009aa <fsm_setting_run+0x23a>
		break;
 80009a4:	bf00      	nop
 80009a6:	e000      	b.n	80009aa <fsm_setting_run+0x23a>
		break;
 80009a8:	bf00      	nop


	}
	if(timer_flag[2]==1){
 80009aa:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <fsm_setting_run+0x2a0>)
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d110      	bne.n	80009d4 <fsm_setting_run+0x264>
		updateClockBuffer(0, temp);
 80009b2:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <fsm_setting_run+0x290>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4619      	mov	r1, r3
 80009b8:	2000      	movs	r0, #0
 80009ba:	f000 f899 	bl	8000af0 <updateClockBuffer>
		set_timer(2, 100);
 80009be:	2164      	movs	r1, #100	; 0x64
 80009c0:	2002      	movs	r0, #2
 80009c2:	f000 fc7b 	bl	80012bc <set_timer>
		set_timer(0, 24);
 80009c6:	2118      	movs	r1, #24
 80009c8:	2000      	movs	r0, #0
 80009ca:	f000 fc77 	bl	80012bc <set_timer>
		led_index=0;
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <fsm_setting_run+0x2a4>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
	}
	if(timer_flag[0]==1){
 80009d4:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <fsm_setting_run+0x2a0>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d10d      	bne.n	80009f8 <fsm_setting_run+0x288>
		update7SEG(led_index++);
 80009dc:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <fsm_setting_run+0x2a4>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	1c5a      	adds	r2, r3, #1
 80009e2:	490c      	ldr	r1, [pc, #48]	; (8000a14 <fsm_setting_run+0x2a4>)
 80009e4:	600a      	str	r2, [r1, #0]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 f8be 	bl	8000b68 <update7SEG>
		set_timer(0, 24);
 80009ec:	2118      	movs	r1, #24
 80009ee:	2000      	movs	r0, #0
 80009f0:	f000 fc64 	bl	80012bc <set_timer>
 80009f4:	e000      	b.n	80009f8 <fsm_setting_run+0x288>
		return;
 80009f6:	bf00      	nop
	}
}
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000000 	.word	0x20000000
 8000a00:	2000005c 	.word	0x2000005c
 8000a04:	20000150 	.word	0x20000150
 8000a08:	51eb851f 	.word	0x51eb851f
 8000a0c:	20000004 	.word	0x20000004
 8000a10:	2000000c 	.word	0x2000000c
 8000a14:	20000058 	.word	0x20000058

08000a18 <resetled>:

#include "global.h"
int status = 1;
int prev_status=1;
int counter[10];
void resetled(){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2102      	movs	r1, #2
 8000a20:	481d      	ldr	r0, [pc, #116]	; (8000a98 <resetled+0x80>)
 8000a22:	f001 f8b0 	bl	8001b86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2104      	movs	r1, #4
 8000a2a:	481b      	ldr	r0, [pc, #108]	; (8000a98 <resetled+0x80>)
 8000a2c:	f001 f8ab 	bl	8001b86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2108      	movs	r1, #8
 8000a34:	4818      	ldr	r0, [pc, #96]	; (8000a98 <resetled+0x80>)
 8000a36:	f001 f8a6 	bl	8001b86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2110      	movs	r1, #16
 8000a3e:	4816      	ldr	r0, [pc, #88]	; (8000a98 <resetled+0x80>)
 8000a40:	f001 f8a1 	bl	8001b86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2120      	movs	r1, #32
 8000a48:	4813      	ldr	r0, [pc, #76]	; (8000a98 <resetled+0x80>)
 8000a4a:	f001 f89c 	bl	8001b86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2140      	movs	r1, #64	; 0x40
 8000a52:	4811      	ldr	r0, [pc, #68]	; (8000a98 <resetled+0x80>)
 8000a54:	f001 f897 	bl	8001b86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2180      	movs	r1, #128	; 0x80
 8000a5c:	480e      	ldr	r0, [pc, #56]	; (8000a98 <resetled+0x80>)
 8000a5e:	f001 f892 	bl	8001b86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a68:	480b      	ldr	r0, [pc, #44]	; (8000a98 <resetled+0x80>)
 8000a6a:	f001 f88c 	bl	8001b86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a74:	4808      	ldr	r0, [pc, #32]	; (8000a98 <resetled+0x80>)
 8000a76:	f001 f886 	bl	8001b86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a80:	4805      	ldr	r0, [pc, #20]	; (8000a98 <resetled+0x80>)
 8000a82:	f001 f880 	bl	8001b86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a8c:	4802      	ldr	r0, [pc, #8]	; (8000a98 <resetled+0x80>)
 8000a8e:	f001 f87a 	bl	8001b86 <HAL_GPIO_WritePin>
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40010800 	.word	0x40010800

08000a9c <reset7seg>:
void reset7seg(){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	4811      	ldr	r0, [pc, #68]	; (8000aec <reset7seg+0x50>)
 8000aa6:	f001 f86e 	bl	8001b86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2102      	movs	r1, #2
 8000aae:	480f      	ldr	r0, [pc, #60]	; (8000aec <reset7seg+0x50>)
 8000ab0:	f001 f869 	bl	8001b86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2104      	movs	r1, #4
 8000ab8:	480c      	ldr	r0, [pc, #48]	; (8000aec <reset7seg+0x50>)
 8000aba:	f001 f864 	bl	8001b86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2108      	movs	r1, #8
 8000ac2:	480a      	ldr	r0, [pc, #40]	; (8000aec <reset7seg+0x50>)
 8000ac4:	f001 f85f 	bl	8001b86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2110      	movs	r1, #16
 8000acc:	4807      	ldr	r0, [pc, #28]	; (8000aec <reset7seg+0x50>)
 8000ace:	f001 f85a 	bl	8001b86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2120      	movs	r1, #32
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <reset7seg+0x50>)
 8000ad8:	f001 f855 	bl	8001b86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2140      	movs	r1, #64	; 0x40
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <reset7seg+0x50>)
 8000ae2:	f001 f850 	bl	8001b86 <HAL_GPIO_WritePin>
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40010c00 	.word	0x40010c00

08000af0 <updateClockBuffer>:
 */
#include "led7_seg.h"
int led_buffer[4];


void updateClockBuffer(int num_X,int num_Y){
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
	led_buffer[3]= num_Y%10;
 8000afa:	6839      	ldr	r1, [r7, #0]
 8000afc:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <updateClockBuffer+0x70>)
 8000afe:	fb83 2301 	smull	r2, r3, r3, r1
 8000b02:	109a      	asrs	r2, r3, #2
 8000b04:	17cb      	asrs	r3, r1, #31
 8000b06:	1ad2      	subs	r2, r2, r3
 8000b08:	4613      	mov	r3, r2
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	4413      	add	r3, r2
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	1aca      	subs	r2, r1, r3
 8000b12:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <updateClockBuffer+0x74>)
 8000b14:	60da      	str	r2, [r3, #12]
	led_buffer[2]= num_Y/10;
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	4a11      	ldr	r2, [pc, #68]	; (8000b60 <updateClockBuffer+0x70>)
 8000b1a:	fb82 1203 	smull	r1, r2, r2, r3
 8000b1e:	1092      	asrs	r2, r2, #2
 8000b20:	17db      	asrs	r3, r3, #31
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	4a0f      	ldr	r2, [pc, #60]	; (8000b64 <updateClockBuffer+0x74>)
 8000b26:	6093      	str	r3, [r2, #8]

	led_buffer[1]= num_X%10;
 8000b28:	6879      	ldr	r1, [r7, #4]
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <updateClockBuffer+0x70>)
 8000b2c:	fb83 2301 	smull	r2, r3, r3, r1
 8000b30:	109a      	asrs	r2, r3, #2
 8000b32:	17cb      	asrs	r3, r1, #31
 8000b34:	1ad2      	subs	r2, r2, r3
 8000b36:	4613      	mov	r3, r2
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	4413      	add	r3, r2
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	1aca      	subs	r2, r1, r3
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <updateClockBuffer+0x74>)
 8000b42:	605a      	str	r2, [r3, #4]
	led_buffer[0]= num_X/10;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a06      	ldr	r2, [pc, #24]	; (8000b60 <updateClockBuffer+0x70>)
 8000b48:	fb82 1203 	smull	r1, r2, r2, r3
 8000b4c:	1092      	asrs	r2, r2, #2
 8000b4e:	17db      	asrs	r3, r3, #31
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <updateClockBuffer+0x74>)
 8000b54:	6013      	str	r3, [r2, #0]
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	66666667 	.word	0x66666667
 8000b64:	200001a0 	.word	0x200001a0

08000b68 <update7SEG>:
void update7SEG(int index){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
 8000b70:	2201      	movs	r2, #1
 8000b72:	2102      	movs	r1, #2
 8000b74:	482b      	ldr	r0, [pc, #172]	; (8000c24 <update7SEG+0xbc>)
 8000b76:	f001 f806 	bl	8001b86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, SET);
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	2104      	movs	r1, #4
 8000b7e:	4829      	ldr	r0, [pc, #164]	; (8000c24 <update7SEG+0xbc>)
 8000b80:	f001 f801 	bl	8001b86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, SET);
 8000b84:	2201      	movs	r2, #1
 8000b86:	2108      	movs	r1, #8
 8000b88:	4826      	ldr	r0, [pc, #152]	; (8000c24 <update7SEG+0xbc>)
 8000b8a:	f000 fffc 	bl	8001b86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET);
 8000b8e:	2201      	movs	r2, #1
 8000b90:	2110      	movs	r1, #16
 8000b92:	4824      	ldr	r0, [pc, #144]	; (8000c24 <update7SEG+0xbc>)
 8000b94:	f000 fff7 	bl	8001b86 <HAL_GPIO_WritePin>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b03      	cmp	r3, #3
 8000b9c:	d83e      	bhi.n	8000c1c <update7SEG+0xb4>
 8000b9e:	a201      	add	r2, pc, #4	; (adr r2, 8000ba4 <update7SEG+0x3c>)
 8000ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba4:	08000bb5 	.word	0x08000bb5
 8000ba8:	08000bcf 	.word	0x08000bcf
 8000bac:	08000be9 	.word	0x08000be9
 8000bb0:	08000c03 	.word	0x08000c03
switch (index){
case 0:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2102      	movs	r1, #2
 8000bb8:	481a      	ldr	r0, [pc, #104]	; (8000c24 <update7SEG+0xbc>)
 8000bba:	f000 ffe4 	bl	8001b86 <HAL_GPIO_WritePin>
	display7SEG(led_buffer[index]);
 8000bbe:	4a1a      	ldr	r2, [pc, #104]	; (8000c28 <update7SEG+0xc0>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 f830 	bl	8000c2c <display7SEG>
	break;
 8000bcc:	e026      	b.n	8000c1c <update7SEG+0xb4>
case 1:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2104      	movs	r1, #4
 8000bd2:	4814      	ldr	r0, [pc, #80]	; (8000c24 <update7SEG+0xbc>)
 8000bd4:	f000 ffd7 	bl	8001b86 <HAL_GPIO_WritePin>
	display7SEG(led_buffer[index]);
 8000bd8:	4a13      	ldr	r2, [pc, #76]	; (8000c28 <update7SEG+0xc0>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f000 f823 	bl	8000c2c <display7SEG>
	break;
 8000be6:	e019      	b.n	8000c1c <update7SEG+0xb4>
case 2:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2108      	movs	r1, #8
 8000bec:	480d      	ldr	r0, [pc, #52]	; (8000c24 <update7SEG+0xbc>)
 8000bee:	f000 ffca 	bl	8001b86 <HAL_GPIO_WritePin>
	display7SEG(led_buffer[index]);
 8000bf2:	4a0d      	ldr	r2, [pc, #52]	; (8000c28 <update7SEG+0xc0>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 f816 	bl	8000c2c <display7SEG>
	break;
 8000c00:	e00c      	b.n	8000c1c <update7SEG+0xb4>
case 3:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2110      	movs	r1, #16
 8000c06:	4807      	ldr	r0, [pc, #28]	; (8000c24 <update7SEG+0xbc>)
 8000c08:	f000 ffbd 	bl	8001b86 <HAL_GPIO_WritePin>
	display7SEG(led_buffer[index]);
 8000c0c:	4a06      	ldr	r2, [pc, #24]	; (8000c28 <update7SEG+0xc0>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f000 f809 	bl	8000c2c <display7SEG>
	break;
 8000c1a:	bf00      	nop
	}
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40010800 	.word	0x40010800
 8000c28:	200001a0 	.word	0x200001a0

08000c2c <display7SEG>:


void display7SEG(int num){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b09      	cmp	r3, #9
 8000c38:	f200 8180 	bhi.w	8000f3c <display7SEG+0x310>
 8000c3c:	a201      	add	r2, pc, #4	; (adr r2, 8000c44 <display7SEG+0x18>)
 8000c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c42:	bf00      	nop
 8000c44:	08000c6d 	.word	0x08000c6d
 8000c48:	08000cb5 	.word	0x08000cb5
 8000c4c:	08000cfd 	.word	0x08000cfd
 8000c50:	08000d45 	.word	0x08000d45
 8000c54:	08000d8d 	.word	0x08000d8d
 8000c58:	08000dd5 	.word	0x08000dd5
 8000c5c:	08000e1d 	.word	0x08000e1d
 8000c60:	08000e65 	.word	0x08000e65
 8000c64:	08000ead 	.word	0x08000ead
 8000c68:	08000ef5 	.word	0x08000ef5
	switch (num){
	case 0:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2101      	movs	r1, #1
 8000c70:	48b5      	ldr	r0, [pc, #724]	; (8000f48 <display7SEG+0x31c>)
 8000c72:	f000 ff88 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2102      	movs	r1, #2
 8000c7a:	48b3      	ldr	r0, [pc, #716]	; (8000f48 <display7SEG+0x31c>)
 8000c7c:	f000 ff83 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2104      	movs	r1, #4
 8000c84:	48b0      	ldr	r0, [pc, #704]	; (8000f48 <display7SEG+0x31c>)
 8000c86:	f000 ff7e 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2108      	movs	r1, #8
 8000c8e:	48ae      	ldr	r0, [pc, #696]	; (8000f48 <display7SEG+0x31c>)
 8000c90:	f000 ff79 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2110      	movs	r1, #16
 8000c98:	48ab      	ldr	r0, [pc, #684]	; (8000f48 <display7SEG+0x31c>)
 8000c9a:	f000 ff74 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2120      	movs	r1, #32
 8000ca2:	48a9      	ldr	r0, [pc, #676]	; (8000f48 <display7SEG+0x31c>)
 8000ca4:	f000 ff6f 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 	SET);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2140      	movs	r1, #64	; 0x40
 8000cac:	48a6      	ldr	r0, [pc, #664]	; (8000f48 <display7SEG+0x31c>)
 8000cae:	f000 ff6a 	bl	8001b86 <HAL_GPIO_WritePin>
		break;
 8000cb2:	e144      	b.n	8000f3e <display7SEG+0x312>
	case 1:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 	SET);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	48a3      	ldr	r0, [pc, #652]	; (8000f48 <display7SEG+0x31c>)
 8000cba:	f000 ff64 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2102      	movs	r1, #2
 8000cc2:	48a1      	ldr	r0, [pc, #644]	; (8000f48 <display7SEG+0x31c>)
 8000cc4:	f000 ff5f 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2104      	movs	r1, #4
 8000ccc:	489e      	ldr	r0, [pc, #632]	; (8000f48 <display7SEG+0x31c>)
 8000cce:	f000 ff5a 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 	SET);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	2108      	movs	r1, #8
 8000cd6:	489c      	ldr	r0, [pc, #624]	; (8000f48 <display7SEG+0x31c>)
 8000cd8:	f000 ff55 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 	SET);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2110      	movs	r1, #16
 8000ce0:	4899      	ldr	r0, [pc, #612]	; (8000f48 <display7SEG+0x31c>)
 8000ce2:	f000 ff50 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 	SET);
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	2120      	movs	r1, #32
 8000cea:	4897      	ldr	r0, [pc, #604]	; (8000f48 <display7SEG+0x31c>)
 8000cec:	f000 ff4b 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 	SET);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	2140      	movs	r1, #64	; 0x40
 8000cf4:	4894      	ldr	r0, [pc, #592]	; (8000f48 <display7SEG+0x31c>)
 8000cf6:	f000 ff46 	bl	8001b86 <HAL_GPIO_WritePin>
		break;
 8000cfa:	e120      	b.n	8000f3e <display7SEG+0x312>
	case 2:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2101      	movs	r1, #1
 8000d00:	4891      	ldr	r0, [pc, #580]	; (8000f48 <display7SEG+0x31c>)
 8000d02:	f000 ff40 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2102      	movs	r1, #2
 8000d0a:	488f      	ldr	r0, [pc, #572]	; (8000f48 <display7SEG+0x31c>)
 8000d0c:	f000 ff3b 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 	SET);
 8000d10:	2201      	movs	r2, #1
 8000d12:	2104      	movs	r1, #4
 8000d14:	488c      	ldr	r0, [pc, #560]	; (8000f48 <display7SEG+0x31c>)
 8000d16:	f000 ff36 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2108      	movs	r1, #8
 8000d1e:	488a      	ldr	r0, [pc, #552]	; (8000f48 <display7SEG+0x31c>)
 8000d20:	f000 ff31 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2110      	movs	r1, #16
 8000d28:	4887      	ldr	r0, [pc, #540]	; (8000f48 <display7SEG+0x31c>)
 8000d2a:	f000 ff2c 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 	SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	2120      	movs	r1, #32
 8000d32:	4885      	ldr	r0, [pc, #532]	; (8000f48 <display7SEG+0x31c>)
 8000d34:	f000 ff27 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, RESET);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2140      	movs	r1, #64	; 0x40
 8000d3c:	4882      	ldr	r0, [pc, #520]	; (8000f48 <display7SEG+0x31c>)
 8000d3e:	f000 ff22 	bl	8001b86 <HAL_GPIO_WritePin>
		break;
 8000d42:	e0fc      	b.n	8000f3e <display7SEG+0x312>
	case 3:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2101      	movs	r1, #1
 8000d48:	487f      	ldr	r0, [pc, #508]	; (8000f48 <display7SEG+0x31c>)
 8000d4a:	f000 ff1c 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2102      	movs	r1, #2
 8000d52:	487d      	ldr	r0, [pc, #500]	; (8000f48 <display7SEG+0x31c>)
 8000d54:	f000 ff17 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2104      	movs	r1, #4
 8000d5c:	487a      	ldr	r0, [pc, #488]	; (8000f48 <display7SEG+0x31c>)
 8000d5e:	f000 ff12 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2108      	movs	r1, #8
 8000d66:	4878      	ldr	r0, [pc, #480]	; (8000f48 <display7SEG+0x31c>)
 8000d68:	f000 ff0d 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 	SET);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	2110      	movs	r1, #16
 8000d70:	4875      	ldr	r0, [pc, #468]	; (8000f48 <display7SEG+0x31c>)
 8000d72:	f000 ff08 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 	SET);
 8000d76:	2201      	movs	r2, #1
 8000d78:	2120      	movs	r1, #32
 8000d7a:	4873      	ldr	r0, [pc, #460]	; (8000f48 <display7SEG+0x31c>)
 8000d7c:	f000 ff03 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2140      	movs	r1, #64	; 0x40
 8000d84:	4870      	ldr	r0, [pc, #448]	; (8000f48 <display7SEG+0x31c>)
 8000d86:	f000 fefe 	bl	8001b86 <HAL_GPIO_WritePin>
		break;
 8000d8a:	e0d8      	b.n	8000f3e <display7SEG+0x312>
	case 4:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 	SET);
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	2101      	movs	r1, #1
 8000d90:	486d      	ldr	r0, [pc, #436]	; (8000f48 <display7SEG+0x31c>)
 8000d92:	f000 fef8 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2102      	movs	r1, #2
 8000d9a:	486b      	ldr	r0, [pc, #428]	; (8000f48 <display7SEG+0x31c>)
 8000d9c:	f000 fef3 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2104      	movs	r1, #4
 8000da4:	4868      	ldr	r0, [pc, #416]	; (8000f48 <display7SEG+0x31c>)
 8000da6:	f000 feee 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 	SET);
 8000daa:	2201      	movs	r2, #1
 8000dac:	2108      	movs	r1, #8
 8000dae:	4866      	ldr	r0, [pc, #408]	; (8000f48 <display7SEG+0x31c>)
 8000db0:	f000 fee9 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 	SET);
 8000db4:	2201      	movs	r2, #1
 8000db6:	2110      	movs	r1, #16
 8000db8:	4863      	ldr	r0, [pc, #396]	; (8000f48 <display7SEG+0x31c>)
 8000dba:	f000 fee4 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2120      	movs	r1, #32
 8000dc2:	4861      	ldr	r0, [pc, #388]	; (8000f48 <display7SEG+0x31c>)
 8000dc4:	f000 fedf 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2140      	movs	r1, #64	; 0x40
 8000dcc:	485e      	ldr	r0, [pc, #376]	; (8000f48 <display7SEG+0x31c>)
 8000dce:	f000 feda 	bl	8001b86 <HAL_GPIO_WritePin>
		break;
 8000dd2:	e0b4      	b.n	8000f3e <display7SEG+0x312>
	case 5:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	485b      	ldr	r0, [pc, #364]	; (8000f48 <display7SEG+0x31c>)
 8000dda:	f000 fed4 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 	SET);
 8000dde:	2201      	movs	r2, #1
 8000de0:	2102      	movs	r1, #2
 8000de2:	4859      	ldr	r0, [pc, #356]	; (8000f48 <display7SEG+0x31c>)
 8000de4:	f000 fecf 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2104      	movs	r1, #4
 8000dec:	4856      	ldr	r0, [pc, #344]	; (8000f48 <display7SEG+0x31c>)
 8000dee:	f000 feca 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2108      	movs	r1, #8
 8000df6:	4854      	ldr	r0, [pc, #336]	; (8000f48 <display7SEG+0x31c>)
 8000df8:	f000 fec5 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 	SET);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	2110      	movs	r1, #16
 8000e00:	4851      	ldr	r0, [pc, #324]	; (8000f48 <display7SEG+0x31c>)
 8000e02:	f000 fec0 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2120      	movs	r1, #32
 8000e0a:	484f      	ldr	r0, [pc, #316]	; (8000f48 <display7SEG+0x31c>)
 8000e0c:	f000 febb 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2140      	movs	r1, #64	; 0x40
 8000e14:	484c      	ldr	r0, [pc, #304]	; (8000f48 <display7SEG+0x31c>)
 8000e16:	f000 feb6 	bl	8001b86 <HAL_GPIO_WritePin>
		break;
 8000e1a:	e090      	b.n	8000f3e <display7SEG+0x312>
	case 6:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2101      	movs	r1, #1
 8000e20:	4849      	ldr	r0, [pc, #292]	; (8000f48 <display7SEG+0x31c>)
 8000e22:	f000 feb0 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 	SET);
 8000e26:	2201      	movs	r2, #1
 8000e28:	2102      	movs	r1, #2
 8000e2a:	4847      	ldr	r0, [pc, #284]	; (8000f48 <display7SEG+0x31c>)
 8000e2c:	f000 feab 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2104      	movs	r1, #4
 8000e34:	4844      	ldr	r0, [pc, #272]	; (8000f48 <display7SEG+0x31c>)
 8000e36:	f000 fea6 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2108      	movs	r1, #8
 8000e3e:	4842      	ldr	r0, [pc, #264]	; (8000f48 <display7SEG+0x31c>)
 8000e40:	f000 fea1 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2110      	movs	r1, #16
 8000e48:	483f      	ldr	r0, [pc, #252]	; (8000f48 <display7SEG+0x31c>)
 8000e4a:	f000 fe9c 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2120      	movs	r1, #32
 8000e52:	483d      	ldr	r0, [pc, #244]	; (8000f48 <display7SEG+0x31c>)
 8000e54:	f000 fe97 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2140      	movs	r1, #64	; 0x40
 8000e5c:	483a      	ldr	r0, [pc, #232]	; (8000f48 <display7SEG+0x31c>)
 8000e5e:	f000 fe92 	bl	8001b86 <HAL_GPIO_WritePin>
		break;
 8000e62:	e06c      	b.n	8000f3e <display7SEG+0x312>
	case 7:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2101      	movs	r1, #1
 8000e68:	4837      	ldr	r0, [pc, #220]	; (8000f48 <display7SEG+0x31c>)
 8000e6a:	f000 fe8c 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2102      	movs	r1, #2
 8000e72:	4835      	ldr	r0, [pc, #212]	; (8000f48 <display7SEG+0x31c>)
 8000e74:	f000 fe87 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2104      	movs	r1, #4
 8000e7c:	4832      	ldr	r0, [pc, #200]	; (8000f48 <display7SEG+0x31c>)
 8000e7e:	f000 fe82 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 	SET);
 8000e82:	2201      	movs	r2, #1
 8000e84:	2108      	movs	r1, #8
 8000e86:	4830      	ldr	r0, [pc, #192]	; (8000f48 <display7SEG+0x31c>)
 8000e88:	f000 fe7d 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin,	SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2110      	movs	r1, #16
 8000e90:	482d      	ldr	r0, [pc, #180]	; (8000f48 <display7SEG+0x31c>)
 8000e92:	f000 fe78 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin,	SET);
 8000e96:	2201      	movs	r2, #1
 8000e98:	2120      	movs	r1, #32
 8000e9a:	482b      	ldr	r0, [pc, #172]	; (8000f48 <display7SEG+0x31c>)
 8000e9c:	f000 fe73 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin,	SET);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2140      	movs	r1, #64	; 0x40
 8000ea4:	4828      	ldr	r0, [pc, #160]	; (8000f48 <display7SEG+0x31c>)
 8000ea6:	f000 fe6e 	bl	8001b86 <HAL_GPIO_WritePin>
		break;
 8000eaa:	e048      	b.n	8000f3e <display7SEG+0x312>
	case 8:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2101      	movs	r1, #1
 8000eb0:	4825      	ldr	r0, [pc, #148]	; (8000f48 <display7SEG+0x31c>)
 8000eb2:	f000 fe68 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2102      	movs	r1, #2
 8000eba:	4823      	ldr	r0, [pc, #140]	; (8000f48 <display7SEG+0x31c>)
 8000ebc:	f000 fe63 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	4820      	ldr	r0, [pc, #128]	; (8000f48 <display7SEG+0x31c>)
 8000ec6:	f000 fe5e 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2108      	movs	r1, #8
 8000ece:	481e      	ldr	r0, [pc, #120]	; (8000f48 <display7SEG+0x31c>)
 8000ed0:	f000 fe59 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2110      	movs	r1, #16
 8000ed8:	481b      	ldr	r0, [pc, #108]	; (8000f48 <display7SEG+0x31c>)
 8000eda:	f000 fe54 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2120      	movs	r1, #32
 8000ee2:	4819      	ldr	r0, [pc, #100]	; (8000f48 <display7SEG+0x31c>)
 8000ee4:	f000 fe4f 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2140      	movs	r1, #64	; 0x40
 8000eec:	4816      	ldr	r0, [pc, #88]	; (8000f48 <display7SEG+0x31c>)
 8000eee:	f000 fe4a 	bl	8001b86 <HAL_GPIO_WritePin>
		break;
 8000ef2:	e024      	b.n	8000f3e <display7SEG+0x312>
	case 9:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	4813      	ldr	r0, [pc, #76]	; (8000f48 <display7SEG+0x31c>)
 8000efa:	f000 fe44 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2102      	movs	r1, #2
 8000f02:	4811      	ldr	r0, [pc, #68]	; (8000f48 <display7SEG+0x31c>)
 8000f04:	f000 fe3f 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2104      	movs	r1, #4
 8000f0c:	480e      	ldr	r0, [pc, #56]	; (8000f48 <display7SEG+0x31c>)
 8000f0e:	f000 fe3a 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2108      	movs	r1, #8
 8000f16:	480c      	ldr	r0, [pc, #48]	; (8000f48 <display7SEG+0x31c>)
 8000f18:	f000 fe35 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 	SET);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2110      	movs	r1, #16
 8000f20:	4809      	ldr	r0, [pc, #36]	; (8000f48 <display7SEG+0x31c>)
 8000f22:	f000 fe30 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2120      	movs	r1, #32
 8000f2a:	4807      	ldr	r0, [pc, #28]	; (8000f48 <display7SEG+0x31c>)
 8000f2c:	f000 fe2b 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2140      	movs	r1, #64	; 0x40
 8000f34:	4804      	ldr	r0, [pc, #16]	; (8000f48 <display7SEG+0x31c>)
 8000f36:	f000 fe26 	bl	8001b86 <HAL_GPIO_WritePin>
		break;
 8000f3a:	e000      	b.n	8000f3e <display7SEG+0x312>
	default:
		break;
 8000f3c:	bf00      	nop
	}
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40010c00 	.word	0x40010c00

08000f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f50:	f000 fb18 	bl	8001584 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f54:	f000 f816 	bl	8000f84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f58:	f000 f89c 	bl	8001094 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f5c:	f000 f84e 	bl	8000ffc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8000f60:	4806      	ldr	r0, [pc, #24]	; (8000f7c <main+0x30>)
 8000f62:	f001 fa6d 	bl	8002440 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
status = INIT;
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <main+0x34>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]
  while (1)
  {

		 fsm_auto_run();
 8000f6c:	f7ff f958 	bl	8000220 <fsm_auto_run>
		 fsm_manual_run();
 8000f70:	f7ff fb60 	bl	8000634 <fsm_manual_run>
		 fsm_setting_run();
 8000f74:	f7ff fbfc 	bl	8000770 <fsm_setting_run>
		 fsm_auto_run();
 8000f78:	e7f8      	b.n	8000f6c <main+0x20>
 8000f7a:	bf00      	nop
 8000f7c:	200001b0 	.word	0x200001b0
 8000f80:	20000000 	.word	0x20000000

08000f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b090      	sub	sp, #64	; 0x40
 8000f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8a:	f107 0318 	add.w	r3, r7, #24
 8000f8e:	2228      	movs	r2, #40	; 0x28
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f001 fe04 	bl	8002ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000faa:	2301      	movs	r3, #1
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fae:	2310      	movs	r3, #16
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb6:	f107 0318 	add.w	r3, r7, #24
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 fe14 	bl	8001be8 <HAL_RCC_OscConfig>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000fc6:	f000 f8e6 	bl	8001196 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fca:	230f      	movs	r3, #15
 8000fcc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f001 f880 	bl	80020e8 <HAL_RCC_ClockConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000fee:	f000 f8d2 	bl	8001196 <Error_Handler>
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	3740      	adds	r7, #64	; 0x40
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001002:	f107 0308 	add.w	r3, r7, #8
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001010:	463b      	mov	r3, r7
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <MX_TIM2_Init+0x94>)
 800101a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800101e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001020:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <MX_TIM2_Init+0x94>)
 8001022:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001026:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001028:	4b19      	ldr	r3, [pc, #100]	; (8001090 <MX_TIM2_Init+0x94>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800102e:	4b18      	ldr	r3, [pc, #96]	; (8001090 <MX_TIM2_Init+0x94>)
 8001030:	2209      	movs	r2, #9
 8001032:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <MX_TIM2_Init+0x94>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103a:	4b15      	ldr	r3, [pc, #84]	; (8001090 <MX_TIM2_Init+0x94>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001040:	4813      	ldr	r0, [pc, #76]	; (8001090 <MX_TIM2_Init+0x94>)
 8001042:	f001 f9ad 	bl	80023a0 <HAL_TIM_Base_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800104c:	f000 f8a3 	bl	8001196 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001054:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001056:	f107 0308 	add.w	r3, r7, #8
 800105a:	4619      	mov	r1, r3
 800105c:	480c      	ldr	r0, [pc, #48]	; (8001090 <MX_TIM2_Init+0x94>)
 800105e:	f001 fb2b 	bl	80026b8 <HAL_TIM_ConfigClockSource>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001068:	f000 f895 	bl	8001196 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800106c:	2300      	movs	r3, #0
 800106e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_TIM2_Init+0x94>)
 800107a:	f001 fd03 	bl	8002a84 <HAL_TIMEx_MasterConfigSynchronization>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001084:	f000 f887 	bl	8001196 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200001b0 	.word	0x200001b0

08001094 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109a:	f107 0308 	add.w	r3, r7, #8
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a8:	4b28      	ldr	r3, [pc, #160]	; (800114c <MX_GPIO_Init+0xb8>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	4a27      	ldr	r2, [pc, #156]	; (800114c <MX_GPIO_Init+0xb8>)
 80010ae:	f043 0304 	orr.w	r3, r3, #4
 80010b2:	6193      	str	r3, [r2, #24]
 80010b4:	4b25      	ldr	r3, [pc, #148]	; (800114c <MX_GPIO_Init+0xb8>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c0:	4b22      	ldr	r3, [pc, #136]	; (800114c <MX_GPIO_Init+0xb8>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a21      	ldr	r2, [pc, #132]	; (800114c <MX_GPIO_Init+0xb8>)
 80010c6:	f043 0308 	orr.w	r3, r3, #8
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b1f      	ldr	r3, [pc, #124]	; (800114c <MX_GPIO_Init+0xb8>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f003 0308 	and.w	r3, r3, #8
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 80010d8:	2200      	movs	r2, #0
 80010da:	f640 71fe 	movw	r1, #4094	; 0xffe
 80010de:	481c      	ldr	r0, [pc, #112]	; (8001150 <MX_GPIO_Init+0xbc>)
 80010e0:	f000 fd51 	bl	8001b86 <HAL_GPIO_WritePin>
                          |TEST_PIN_Pin|LR_X_Pin|LG_X_Pin|LY_X_Pin
                          |LR_Y_Pin|LG_Y_Pin|LY_Y_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S0_Pin|S1_Pin|S2_Pin|S3_Pin
 80010e4:	2200      	movs	r2, #0
 80010e6:	217f      	movs	r1, #127	; 0x7f
 80010e8:	481a      	ldr	r0, [pc, #104]	; (8001154 <MX_GPIO_Init+0xc0>)
 80010ea:	f000 fd4c 	bl	8001b86 <HAL_GPIO_WritePin>
                          |S4_Pin|S5_Pin|S6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           TEST_PIN_Pin LR_X_Pin LG_X_Pin LY_X_Pin
                           LR_Y_Pin LG_Y_Pin LY_Y_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 80010ee:	f640 73fe 	movw	r3, #4094	; 0xffe
 80010f2:	60bb      	str	r3, [r7, #8]
                          |TEST_PIN_Pin|LR_X_Pin|LG_X_Pin|LY_X_Pin
                          |LR_Y_Pin|LG_Y_Pin|LY_Y_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f4:	2301      	movs	r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	2302      	movs	r3, #2
 80010fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	4619      	mov	r1, r3
 8001106:	4812      	ldr	r0, [pc, #72]	; (8001150 <MX_GPIO_Init+0xbc>)
 8001108:	f000 fbac 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : S0_Pin S1_Pin S2_Pin S3_Pin
                           S4_Pin S5_Pin S6_Pin */
  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|S3_Pin
 800110c:	237f      	movs	r3, #127	; 0x7f
 800110e:	60bb      	str	r3, [r7, #8]
                          |S4_Pin|S5_Pin|S6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001110:	2301      	movs	r3, #1
 8001112:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2302      	movs	r3, #2
 800111a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111c:	f107 0308 	add.w	r3, r7, #8
 8001120:	4619      	mov	r1, r3
 8001122:	480c      	ldr	r0, [pc, #48]	; (8001154 <MX_GPIO_Init+0xc0>)
 8001124:	f000 fb9e 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT0_Pin BT1_Pin BT2_Pin */
  GPIO_InitStruct.Pin = BT0_Pin|BT1_Pin|BT2_Pin;
 8001128:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800112c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001132:	2301      	movs	r3, #1
 8001134:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001136:	f107 0308 	add.w	r3, r7, #8
 800113a:	4619      	mov	r1, r3
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <MX_GPIO_Init+0xbc>)
 800113e:	f000 fb91 	bl	8001864 <HAL_GPIO_Init>

}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000
 8001150:	40010800 	.word	0x40010800
 8001154:	40010c00 	.word	0x40010c00

08001158 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	timerrun(0);
 8001160:	2000      	movs	r0, #0
 8001162:	f000 f8c3 	bl	80012ec <timerrun>
	timerrun(1);
 8001166:	2001      	movs	r0, #1
 8001168:	f000 f8c0 	bl	80012ec <timerrun>
	timerrun(2);
 800116c:	2002      	movs	r0, #2
 800116e:	f000 f8bd 	bl	80012ec <timerrun>
	timerrun(3);
 8001172:	2003      	movs	r0, #3
 8001174:	f000 f8ba 	bl	80012ec <timerrun>
	timerrun(5);
 8001178:	2005      	movs	r0, #5
 800117a:	f000 f8b7 	bl	80012ec <timerrun>
	timerrun(6);
 800117e:	2006      	movs	r0, #6
 8001180:	f000 f8b4 	bl	80012ec <timerrun>
	timerrun(7);
 8001184:	2007      	movs	r0, #7
 8001186:	f000 f8b1 	bl	80012ec <timerrun>
	getkeyInput();
 800118a:	f7fe ffdf 	bl	800014c <getkeyInput>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800119a:	b672      	cpsid	i
}
 800119c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800119e:	e7fe      	b.n	800119e <Error_Handler+0x8>

080011a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <HAL_MspInit+0x5c>)
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	4a14      	ldr	r2, [pc, #80]	; (80011fc <HAL_MspInit+0x5c>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6193      	str	r3, [r2, #24]
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <HAL_MspInit+0x5c>)
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <HAL_MspInit+0x5c>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	4a0e      	ldr	r2, [pc, #56]	; (80011fc <HAL_MspInit+0x5c>)
 80011c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c8:	61d3      	str	r3, [r2, #28]
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <HAL_MspInit+0x5c>)
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <HAL_MspInit+0x60>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	4a04      	ldr	r2, [pc, #16]	; (8001200 <HAL_MspInit+0x60>)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr
 80011fc:	40021000 	.word	0x40021000
 8001200:	40010000 	.word	0x40010000

08001204 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001214:	d113      	bne.n	800123e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001216:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <HAL_TIM_Base_MspInit+0x44>)
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <HAL_TIM_Base_MspInit+0x44>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	61d3      	str	r3, [r2, #28]
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <HAL_TIM_Base_MspInit+0x44>)
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2100      	movs	r1, #0
 8001232:	201c      	movs	r0, #28
 8001234:	f000 fadf 	bl	80017f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001238:	201c      	movs	r0, #28
 800123a:	f000 faf8 	bl	800182e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40021000 	.word	0x40021000

0800124c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <NMI_Handler+0x4>

08001252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001256:	e7fe      	b.n	8001256 <HardFault_Handler+0x4>

08001258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800125c:	e7fe      	b.n	800125c <MemManage_Handler+0x4>

0800125e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001262:	e7fe      	b.n	8001262 <BusFault_Handler+0x4>

08001264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <UsageFault_Handler+0x4>

0800126a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr

08001276 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr

08001282 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr

0800128e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001292:	f000 f9bd 	bl	8001610 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <TIM2_IRQHandler+0x10>)
 80012a2:	f001 f919 	bl	80024d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200001b0 	.word	0x200001b0

080012b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <set_timer>:


int timer_flag[10]={0,0,0,0,0,1,1,1,0,0};
int timer_counter[10];

void set_timer(int i, int durr){
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
	timer_flag[i]=0;
 80012c6:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <set_timer+0x28>)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2100      	movs	r1, #0
 80012cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[i]=durr;
 80012d0:	4905      	ldr	r1, [pc, #20]	; (80012e8 <set_timer+0x2c>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	2000000c 	.word	0x2000000c
 80012e8:	200001f8 	.word	0x200001f8

080012ec <timerrun>:
void timerrun(int i){
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	if(timer_counter[i]>0){
 80012f4:	4a0f      	ldr	r2, [pc, #60]	; (8001334 <timerrun+0x48>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	dd13      	ble.n	8001328 <timerrun+0x3c>
		timer_counter[i]--;
 8001300:	4a0c      	ldr	r2, [pc, #48]	; (8001334 <timerrun+0x48>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001308:	1e5a      	subs	r2, r3, #1
 800130a:	490a      	ldr	r1, [pc, #40]	; (8001334 <timerrun+0x48>)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[i]<=0)
 8001312:	4a08      	ldr	r2, [pc, #32]	; (8001334 <timerrun+0x48>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131a:	2b00      	cmp	r3, #0
 800131c:	dc04      	bgt.n	8001328 <timerrun+0x3c>
			timer_flag[i]=1;
 800131e:	4a06      	ldr	r2, [pc, #24]	; (8001338 <timerrun+0x4c>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2101      	movs	r1, #1
 8001324:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	200001f8 	.word	0x200001f8
 8001338:	2000000c 	.word	0x2000000c

0800133c <led_traffic>:
 *  Created on: Oct 30, 2024
 *      Author: xjkpr
 */
#include "traffic_light.h"

void led_traffic(int i){
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b02      	subs	r3, #2
 8001348:	2b03      	cmp	r3, #3
 800134a:	d853      	bhi.n	80013f4 <led_traffic+0xb8>
 800134c:	a201      	add	r2, pc, #4	; (adr r2, 8001354 <led_traffic+0x18>)
 800134e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001352:	bf00      	nop
 8001354:	08001365 	.word	0x08001365
 8001358:	08001395 	.word	0x08001395
 800135c:	080013af 	.word	0x080013af
 8001360:	080013dd 	.word	0x080013dd
	switch (i){
	case RED_GREEN:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 8001364:	2201      	movs	r2, #1
 8001366:	2140      	movs	r1, #64	; 0x40
 8001368:	4825      	ldr	r0, [pc, #148]	; (8001400 <led_traffic+0xc4>)
 800136a:	f000 fc0c 	bl	8001b86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001374:	4822      	ldr	r0, [pc, #136]	; (8001400 <led_traffic+0xc4>)
 8001376:	f000 fc06 	bl	8001b86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001380:	481f      	ldr	r0, [pc, #124]	; (8001400 <led_traffic+0xc4>)
 8001382:	f000 fc00 	bl	8001b86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 8001386:	2201      	movs	r2, #1
 8001388:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800138c:	481c      	ldr	r0, [pc, #112]	; (8001400 <led_traffic+0xc4>)
 800138e:	f000 fbfa 	bl	8001b86 <HAL_GPIO_WritePin>
		break;
 8001392:	e030      	b.n	80013f6 <led_traffic+0xba>
	case RED_YELLOW:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 8001394:	2200      	movs	r2, #0
 8001396:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800139a:	4819      	ldr	r0, [pc, #100]	; (8001400 <led_traffic+0xc4>)
 800139c:	f000 fbf3 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, SET);
 80013a0:	2201      	movs	r2, #1
 80013a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013a6:	4816      	ldr	r0, [pc, #88]	; (8001400 <led_traffic+0xc4>)
 80013a8:	f000 fbed 	bl	8001b86 <HAL_GPIO_WritePin>
		break;
 80013ac:	e023      	b.n	80013f6 <led_traffic+0xba>
	case GREEN_RED:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2140      	movs	r1, #64	; 0x40
 80013b2:	4813      	ldr	r0, [pc, #76]	; (8001400 <led_traffic+0xc4>)
 80013b4:	f000 fbe7 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	2180      	movs	r1, #128	; 0x80
 80013bc:	4810      	ldr	r0, [pc, #64]	; (8001400 <led_traffic+0xc4>)
 80013be:	f000 fbe2 	bl	8001b86 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 80013c2:	2201      	movs	r2, #1
 80013c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013c8:	480d      	ldr	r0, [pc, #52]	; (8001400 <led_traffic+0xc4>)
 80013ca:	f000 fbdc 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11,RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013d4:	480a      	ldr	r0, [pc, #40]	; (8001400 <led_traffic+0xc4>)
 80013d6:	f000 fbd6 	bl	8001b86 <HAL_GPIO_WritePin>
		break;
 80013da:	e00c      	b.n	80013f6 <led_traffic+0xba>
	case YELLOW_RED:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	2180      	movs	r1, #128	; 0x80
 80013e0:	4807      	ldr	r0, [pc, #28]	; (8001400 <led_traffic+0xc4>)
 80013e2:	f000 fbd0 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);
 80013e6:	2201      	movs	r2, #1
 80013e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ec:	4804      	ldr	r0, [pc, #16]	; (8001400 <led_traffic+0xc4>)
 80013ee:	f000 fbca 	bl	8001b86 <HAL_GPIO_WritePin>
		break;
 80013f2:	e000      	b.n	80013f6 <led_traffic+0xba>
	default:
		break;
 80013f4:	bf00      	nop
	}
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40010800 	.word	0x40010800

08001404 <led_setting>:
void led_setting(int i){
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

	switch(i){
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b0b      	cmp	r3, #11
 8001410:	d003      	beq.n	800141a <led_setting+0x16>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b0c      	cmp	r3, #12
 8001416:	d00c      	beq.n	8001432 <led_setting+0x2e>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,SET);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11,SET);
	break;
default :
	break;
 8001418:	e023      	b.n	8001462 <led_setting+0x5e>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,SET);
 800141a:	2201      	movs	r2, #1
 800141c:	2180      	movs	r1, #128	; 0x80
 800141e:	4813      	ldr	r0, [pc, #76]	; (800146c <led_setting+0x68>)
 8001420:	f000 fbb1 	bl	8001b86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,SET);
 8001424:	2201      	movs	r2, #1
 8001426:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800142a:	4810      	ldr	r0, [pc, #64]	; (800146c <led_setting+0x68>)
 800142c:	f000 fbab 	bl	8001b86 <HAL_GPIO_WritePin>
	break;
 8001430:	e017      	b.n	8001462 <led_setting+0x5e>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	2180      	movs	r1, #128	; 0x80
 8001436:	480d      	ldr	r0, [pc, #52]	; (800146c <led_setting+0x68>)
 8001438:	f000 fba5 	bl	8001b86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,RESET);
 800143c:	2200      	movs	r2, #0
 800143e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001442:	480a      	ldr	r0, [pc, #40]	; (800146c <led_setting+0x68>)
 8001444:	f000 fb9f 	bl	8001b86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,SET);
 8001448:	2201      	movs	r2, #1
 800144a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800144e:	4807      	ldr	r0, [pc, #28]	; (800146c <led_setting+0x68>)
 8001450:	f000 fb99 	bl	8001b86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11,SET);
 8001454:	2201      	movs	r2, #1
 8001456:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800145a:	4804      	ldr	r0, [pc, #16]	; (800146c <led_setting+0x68>)
 800145c:	f000 fb93 	bl	8001b86 <HAL_GPIO_WritePin>
	break;
 8001460:	bf00      	nop
	}
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40010800 	.word	0x40010800

08001470 <led_traffic_back>:
void led_traffic_back(int i){
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3b02      	subs	r3, #2
 800147c:	2b03      	cmp	r3, #3
 800147e:	d854      	bhi.n	800152a <led_traffic_back+0xba>
 8001480:	a201      	add	r2, pc, #4	; (adr r2, 8001488 <led_traffic_back+0x18>)
 8001482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001486:	bf00      	nop
 8001488:	08001499 	.word	0x08001499
 800148c:	080014c9 	.word	0x080014c9
 8001490:	080014e1 	.word	0x080014e1
 8001494:	08001511 	.word	0x08001511
	switch (i){
	case RED_GREEN:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 8001498:	2201      	movs	r2, #1
 800149a:	2140      	movs	r1, #64	; 0x40
 800149c:	4825      	ldr	r0, [pc, #148]	; (8001534 <led_traffic_back+0xc4>)
 800149e:	f000 fb72 	bl	8001b86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 80014a2:	2201      	movs	r2, #1
 80014a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014a8:	4822      	ldr	r0, [pc, #136]	; (8001534 <led_traffic_back+0xc4>)
 80014aa:	f000 fb6c 	bl	8001b86 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014b4:	481f      	ldr	r0, [pc, #124]	; (8001534 <led_traffic_back+0xc4>)
 80014b6:	f000 fb66 	bl	8001b86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014c0:	481c      	ldr	r0, [pc, #112]	; (8001534 <led_traffic_back+0xc4>)
 80014c2:	f000 fb60 	bl	8001b86 <HAL_GPIO_WritePin>
		break;
 80014c6:	e031      	b.n	800152c <led_traffic_back+0xbc>
	case RED_YELLOW:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 80014c8:	2201      	movs	r2, #1
 80014ca:	2140      	movs	r1, #64	; 0x40
 80014cc:	4819      	ldr	r0, [pc, #100]	; (8001534 <led_traffic_back+0xc4>)
 80014ce:	f000 fb5a 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 80014d2:	2200      	movs	r2, #0
 80014d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014d8:	4816      	ldr	r0, [pc, #88]	; (8001534 <led_traffic_back+0xc4>)
 80014da:	f000 fb54 	bl	8001b86 <HAL_GPIO_WritePin>
		break;
 80014de:	e025      	b.n	800152c <led_traffic_back+0xbc>
	case GREEN_RED:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 80014e0:	2201      	movs	r2, #1
 80014e2:	2180      	movs	r1, #128	; 0x80
 80014e4:	4813      	ldr	r0, [pc, #76]	; (8001534 <led_traffic_back+0xc4>)
 80014e6:	f000 fb4e 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 80014ea:	2201      	movs	r2, #1
 80014ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014f0:	4810      	ldr	r0, [pc, #64]	; (8001534 <led_traffic_back+0xc4>)
 80014f2:	f000 fb48 	bl	8001b86 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 80014f6:	2200      	movs	r2, #0
 80014f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014fc:	480d      	ldr	r0, [pc, #52]	; (8001534 <led_traffic_back+0xc4>)
 80014fe:	f000 fb42 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11,RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001508:	480a      	ldr	r0, [pc, #40]	; (8001534 <led_traffic_back+0xc4>)
 800150a:	f000 fb3c 	bl	8001b86 <HAL_GPIO_WritePin>
		break;
 800150e:	e00d      	b.n	800152c <led_traffic_back+0xbc>
	case YELLOW_RED:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 8001510:	2201      	movs	r2, #1
 8001512:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001516:	4807      	ldr	r0, [pc, #28]	; (8001534 <led_traffic_back+0xc4>)
 8001518:	f000 fb35 	bl	8001b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, RESET);
 800151c:	2200      	movs	r2, #0
 800151e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001522:	4804      	ldr	r0, [pc, #16]	; (8001534 <led_traffic_back+0xc4>)
 8001524:	f000 fb2f 	bl	8001b86 <HAL_GPIO_WritePin>
		break;
 8001528:	e000      	b.n	800152c <led_traffic_back+0xbc>
	default:
		break;
 800152a:	bf00      	nop
	}
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40010800 	.word	0x40010800

08001538 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001538:	f7ff feba 	bl	80012b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800153c:	480b      	ldr	r0, [pc, #44]	; (800156c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800153e:	490c      	ldr	r1, [pc, #48]	; (8001570 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001540:	4a0c      	ldr	r2, [pc, #48]	; (8001574 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001544:	e002      	b.n	800154c <LoopCopyDataInit>

08001546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800154a:	3304      	adds	r3, #4

0800154c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800154c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800154e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001550:	d3f9      	bcc.n	8001546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001552:	4a09      	ldr	r2, [pc, #36]	; (8001578 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001554:	4c09      	ldr	r4, [pc, #36]	; (800157c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001558:	e001      	b.n	800155e <LoopFillZerobss>

0800155a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800155a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800155c:	3204      	adds	r2, #4

0800155e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800155e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001560:	d3fb      	bcc.n	800155a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001562:	f001 faf9 	bl	8002b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001566:	f7ff fcf1 	bl	8000f4c <main>
  bx lr
 800156a:	4770      	bx	lr
  ldr r0, =_sdata
 800156c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001570:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8001574:	08002bf4 	.word	0x08002bf4
  ldr r2, =_sbss
 8001578:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 800157c:	20000224 	.word	0x20000224

08001580 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001580:	e7fe      	b.n	8001580 <ADC1_2_IRQHandler>
	...

08001584 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <HAL_Init+0x28>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a07      	ldr	r2, [pc, #28]	; (80015ac <HAL_Init+0x28>)
 800158e:	f043 0310 	orr.w	r3, r3, #16
 8001592:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001594:	2003      	movs	r0, #3
 8001596:	f000 f923 	bl	80017e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800159a:	200f      	movs	r0, #15
 800159c:	f000 f808 	bl	80015b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a0:	f7ff fdfe 	bl	80011a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40022000 	.word	0x40022000

080015b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b8:	4b12      	ldr	r3, [pc, #72]	; (8001604 <HAL_InitTick+0x54>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_InitTick+0x58>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	4619      	mov	r1, r3
 80015c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 f93b 	bl	800184a <HAL_SYSTICK_Config>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e00e      	b.n	80015fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b0f      	cmp	r3, #15
 80015e2:	d80a      	bhi.n	80015fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e4:	2200      	movs	r2, #0
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ec:	f000 f903 	bl	80017f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f0:	4a06      	ldr	r2, [pc, #24]	; (800160c <HAL_InitTick+0x5c>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e000      	b.n	80015fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000008 	.word	0x20000008
 8001608:	20000038 	.word	0x20000038
 800160c:	20000034 	.word	0x20000034

08001610 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <HAL_IncTick+0x1c>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	4b05      	ldr	r3, [pc, #20]	; (8001630 <HAL_IncTick+0x20>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4413      	add	r3, r2
 8001620:	4a03      	ldr	r2, [pc, #12]	; (8001630 <HAL_IncTick+0x20>)
 8001622:	6013      	str	r3, [r2, #0]
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	20000038 	.word	0x20000038
 8001630:	20000220 	.word	0x20000220

08001634 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return uwTick;
 8001638:	4b02      	ldr	r3, [pc, #8]	; (8001644 <HAL_GetTick+0x10>)
 800163a:	681b      	ldr	r3, [r3, #0]
}
 800163c:	4618      	mov	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr
 8001644:	20000220 	.word	0x20000220

08001648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <__NVIC_SetPriorityGrouping+0x44>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001664:	4013      	ands	r3, r2
 8001666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001670:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800167a:	4a04      	ldr	r2, [pc, #16]	; (800168c <__NVIC_SetPriorityGrouping+0x44>)
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	60d3      	str	r3, [r2, #12]
}
 8001680:	bf00      	nop
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001694:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	0a1b      	lsrs	r3, r3, #8
 800169a:	f003 0307 	and.w	r3, r3, #7
}
 800169e:	4618      	mov	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	db0b      	blt.n	80016d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	f003 021f 	and.w	r2, r3, #31
 80016c4:	4906      	ldr	r1, [pc, #24]	; (80016e0 <__NVIC_EnableIRQ+0x34>)
 80016c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ca:	095b      	lsrs	r3, r3, #5
 80016cc:	2001      	movs	r0, #1
 80016ce:	fa00 f202 	lsl.w	r2, r0, r2
 80016d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	e000e100 	.word	0xe000e100

080016e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	6039      	str	r1, [r7, #0]
 80016ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	db0a      	blt.n	800170e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	490c      	ldr	r1, [pc, #48]	; (8001730 <__NVIC_SetPriority+0x4c>)
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	0112      	lsls	r2, r2, #4
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	440b      	add	r3, r1
 8001708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800170c:	e00a      	b.n	8001724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	b2da      	uxtb	r2, r3
 8001712:	4908      	ldr	r1, [pc, #32]	; (8001734 <__NVIC_SetPriority+0x50>)
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	3b04      	subs	r3, #4
 800171c:	0112      	lsls	r2, r2, #4
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	440b      	add	r3, r1
 8001722:	761a      	strb	r2, [r3, #24]
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000e100 	.word	0xe000e100
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001738:	b480      	push	{r7}
 800173a:	b089      	sub	sp, #36	; 0x24
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f1c3 0307 	rsb	r3, r3, #7
 8001752:	2b04      	cmp	r3, #4
 8001754:	bf28      	it	cs
 8001756:	2304      	movcs	r3, #4
 8001758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3304      	adds	r3, #4
 800175e:	2b06      	cmp	r3, #6
 8001760:	d902      	bls.n	8001768 <NVIC_EncodePriority+0x30>
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3b03      	subs	r3, #3
 8001766:	e000      	b.n	800176a <NVIC_EncodePriority+0x32>
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	f04f 32ff 	mov.w	r2, #4294967295
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43da      	mvns	r2, r3
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	401a      	ands	r2, r3
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001780:	f04f 31ff 	mov.w	r1, #4294967295
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	fa01 f303 	lsl.w	r3, r1, r3
 800178a:	43d9      	mvns	r1, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	4313      	orrs	r3, r2
         );
}
 8001792:	4618      	mov	r0, r3
 8001794:	3724      	adds	r7, #36	; 0x24
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017ac:	d301      	bcc.n	80017b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ae:	2301      	movs	r3, #1
 80017b0:	e00f      	b.n	80017d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017b2:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <SysTick_Config+0x40>)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ba:	210f      	movs	r1, #15
 80017bc:	f04f 30ff 	mov.w	r0, #4294967295
 80017c0:	f7ff ff90 	bl	80016e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <SysTick_Config+0x40>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ca:	4b04      	ldr	r3, [pc, #16]	; (80017dc <SysTick_Config+0x40>)
 80017cc:	2207      	movs	r2, #7
 80017ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	e000e010 	.word	0xe000e010

080017e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff ff2d 	bl	8001648 <__NVIC_SetPriorityGrouping>
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b086      	sub	sp, #24
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	4603      	mov	r3, r0
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	607a      	str	r2, [r7, #4]
 8001802:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001808:	f7ff ff42 	bl	8001690 <__NVIC_GetPriorityGrouping>
 800180c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	68b9      	ldr	r1, [r7, #8]
 8001812:	6978      	ldr	r0, [r7, #20]
 8001814:	f7ff ff90 	bl	8001738 <NVIC_EncodePriority>
 8001818:	4602      	mov	r2, r0
 800181a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181e:	4611      	mov	r1, r2
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff5f 	bl	80016e4 <__NVIC_SetPriority>
}
 8001826:	bf00      	nop
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	4603      	mov	r3, r0
 8001836:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff35 	bl	80016ac <__NVIC_EnableIRQ>
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff ffa2 	bl	800179c <SysTick_Config>
 8001858:	4603      	mov	r3, r0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001864:	b480      	push	{r7}
 8001866:	b08b      	sub	sp, #44	; 0x2c
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800186e:	2300      	movs	r3, #0
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001872:	2300      	movs	r3, #0
 8001874:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001876:	e148      	b.n	8001b0a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001878:	2201      	movs	r2, #1
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	429a      	cmp	r2, r3
 8001892:	f040 8137 	bne.w	8001b04 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	4aa3      	ldr	r2, [pc, #652]	; (8001b28 <HAL_GPIO_Init+0x2c4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d05e      	beq.n	800195e <HAL_GPIO_Init+0xfa>
 80018a0:	4aa1      	ldr	r2, [pc, #644]	; (8001b28 <HAL_GPIO_Init+0x2c4>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d875      	bhi.n	8001992 <HAL_GPIO_Init+0x12e>
 80018a6:	4aa1      	ldr	r2, [pc, #644]	; (8001b2c <HAL_GPIO_Init+0x2c8>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d058      	beq.n	800195e <HAL_GPIO_Init+0xfa>
 80018ac:	4a9f      	ldr	r2, [pc, #636]	; (8001b2c <HAL_GPIO_Init+0x2c8>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d86f      	bhi.n	8001992 <HAL_GPIO_Init+0x12e>
 80018b2:	4a9f      	ldr	r2, [pc, #636]	; (8001b30 <HAL_GPIO_Init+0x2cc>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d052      	beq.n	800195e <HAL_GPIO_Init+0xfa>
 80018b8:	4a9d      	ldr	r2, [pc, #628]	; (8001b30 <HAL_GPIO_Init+0x2cc>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d869      	bhi.n	8001992 <HAL_GPIO_Init+0x12e>
 80018be:	4a9d      	ldr	r2, [pc, #628]	; (8001b34 <HAL_GPIO_Init+0x2d0>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d04c      	beq.n	800195e <HAL_GPIO_Init+0xfa>
 80018c4:	4a9b      	ldr	r2, [pc, #620]	; (8001b34 <HAL_GPIO_Init+0x2d0>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d863      	bhi.n	8001992 <HAL_GPIO_Init+0x12e>
 80018ca:	4a9b      	ldr	r2, [pc, #620]	; (8001b38 <HAL_GPIO_Init+0x2d4>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d046      	beq.n	800195e <HAL_GPIO_Init+0xfa>
 80018d0:	4a99      	ldr	r2, [pc, #612]	; (8001b38 <HAL_GPIO_Init+0x2d4>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d85d      	bhi.n	8001992 <HAL_GPIO_Init+0x12e>
 80018d6:	2b12      	cmp	r3, #18
 80018d8:	d82a      	bhi.n	8001930 <HAL_GPIO_Init+0xcc>
 80018da:	2b12      	cmp	r3, #18
 80018dc:	d859      	bhi.n	8001992 <HAL_GPIO_Init+0x12e>
 80018de:	a201      	add	r2, pc, #4	; (adr r2, 80018e4 <HAL_GPIO_Init+0x80>)
 80018e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e4:	0800195f 	.word	0x0800195f
 80018e8:	08001939 	.word	0x08001939
 80018ec:	0800194b 	.word	0x0800194b
 80018f0:	0800198d 	.word	0x0800198d
 80018f4:	08001993 	.word	0x08001993
 80018f8:	08001993 	.word	0x08001993
 80018fc:	08001993 	.word	0x08001993
 8001900:	08001993 	.word	0x08001993
 8001904:	08001993 	.word	0x08001993
 8001908:	08001993 	.word	0x08001993
 800190c:	08001993 	.word	0x08001993
 8001910:	08001993 	.word	0x08001993
 8001914:	08001993 	.word	0x08001993
 8001918:	08001993 	.word	0x08001993
 800191c:	08001993 	.word	0x08001993
 8001920:	08001993 	.word	0x08001993
 8001924:	08001993 	.word	0x08001993
 8001928:	08001941 	.word	0x08001941
 800192c:	08001955 	.word	0x08001955
 8001930:	4a82      	ldr	r2, [pc, #520]	; (8001b3c <HAL_GPIO_Init+0x2d8>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d013      	beq.n	800195e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001936:	e02c      	b.n	8001992 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	623b      	str	r3, [r7, #32]
          break;
 800193e:	e029      	b.n	8001994 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	3304      	adds	r3, #4
 8001946:	623b      	str	r3, [r7, #32]
          break;
 8001948:	e024      	b.n	8001994 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	3308      	adds	r3, #8
 8001950:	623b      	str	r3, [r7, #32]
          break;
 8001952:	e01f      	b.n	8001994 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	330c      	adds	r3, #12
 800195a:	623b      	str	r3, [r7, #32]
          break;
 800195c:	e01a      	b.n	8001994 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d102      	bne.n	800196c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001966:	2304      	movs	r3, #4
 8001968:	623b      	str	r3, [r7, #32]
          break;
 800196a:	e013      	b.n	8001994 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d105      	bne.n	8001980 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001974:	2308      	movs	r3, #8
 8001976:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	69fa      	ldr	r2, [r7, #28]
 800197c:	611a      	str	r2, [r3, #16]
          break;
 800197e:	e009      	b.n	8001994 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001980:	2308      	movs	r3, #8
 8001982:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	69fa      	ldr	r2, [r7, #28]
 8001988:	615a      	str	r2, [r3, #20]
          break;
 800198a:	e003      	b.n	8001994 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800198c:	2300      	movs	r3, #0
 800198e:	623b      	str	r3, [r7, #32]
          break;
 8001990:	e000      	b.n	8001994 <HAL_GPIO_Init+0x130>
          break;
 8001992:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	2bff      	cmp	r3, #255	; 0xff
 8001998:	d801      	bhi.n	800199e <HAL_GPIO_Init+0x13a>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	e001      	b.n	80019a2 <HAL_GPIO_Init+0x13e>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3304      	adds	r3, #4
 80019a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	2bff      	cmp	r3, #255	; 0xff
 80019a8:	d802      	bhi.n	80019b0 <HAL_GPIO_Init+0x14c>
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	e002      	b.n	80019b6 <HAL_GPIO_Init+0x152>
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	3b08      	subs	r3, #8
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	210f      	movs	r1, #15
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	fa01 f303 	lsl.w	r3, r1, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	401a      	ands	r2, r3
 80019c8:	6a39      	ldr	r1, [r7, #32]
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	fa01 f303 	lsl.w	r3, r1, r3
 80019d0:	431a      	orrs	r2, r3
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 8090 	beq.w	8001b04 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019e4:	4b56      	ldr	r3, [pc, #344]	; (8001b40 <HAL_GPIO_Init+0x2dc>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	4a55      	ldr	r2, [pc, #340]	; (8001b40 <HAL_GPIO_Init+0x2dc>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	6193      	str	r3, [r2, #24]
 80019f0:	4b53      	ldr	r3, [pc, #332]	; (8001b40 <HAL_GPIO_Init+0x2dc>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019fc:	4a51      	ldr	r2, [pc, #324]	; (8001b44 <HAL_GPIO_Init+0x2e0>)
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	089b      	lsrs	r3, r3, #2
 8001a02:	3302      	adds	r3, #2
 8001a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	220f      	movs	r2, #15
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a49      	ldr	r2, [pc, #292]	; (8001b48 <HAL_GPIO_Init+0x2e4>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d00d      	beq.n	8001a44 <HAL_GPIO_Init+0x1e0>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a48      	ldr	r2, [pc, #288]	; (8001b4c <HAL_GPIO_Init+0x2e8>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d007      	beq.n	8001a40 <HAL_GPIO_Init+0x1dc>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a47      	ldr	r2, [pc, #284]	; (8001b50 <HAL_GPIO_Init+0x2ec>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d101      	bne.n	8001a3c <HAL_GPIO_Init+0x1d8>
 8001a38:	2302      	movs	r3, #2
 8001a3a:	e004      	b.n	8001a46 <HAL_GPIO_Init+0x1e2>
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e002      	b.n	8001a46 <HAL_GPIO_Init+0x1e2>
 8001a40:	2301      	movs	r3, #1
 8001a42:	e000      	b.n	8001a46 <HAL_GPIO_Init+0x1e2>
 8001a44:	2300      	movs	r3, #0
 8001a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a48:	f002 0203 	and.w	r2, r2, #3
 8001a4c:	0092      	lsls	r2, r2, #2
 8001a4e:	4093      	lsls	r3, r2
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a56:	493b      	ldr	r1, [pc, #236]	; (8001b44 <HAL_GPIO_Init+0x2e0>)
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	089b      	lsrs	r3, r3, #2
 8001a5c:	3302      	adds	r3, #2
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d006      	beq.n	8001a7e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a70:	4b38      	ldr	r3, [pc, #224]	; (8001b54 <HAL_GPIO_Init+0x2f0>)
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	4937      	ldr	r1, [pc, #220]	; (8001b54 <HAL_GPIO_Init+0x2f0>)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	608b      	str	r3, [r1, #8]
 8001a7c:	e006      	b.n	8001a8c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a7e:	4b35      	ldr	r3, [pc, #212]	; (8001b54 <HAL_GPIO_Init+0x2f0>)
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	43db      	mvns	r3, r3
 8001a86:	4933      	ldr	r1, [pc, #204]	; (8001b54 <HAL_GPIO_Init+0x2f0>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d006      	beq.n	8001aa6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a98:	4b2e      	ldr	r3, [pc, #184]	; (8001b54 <HAL_GPIO_Init+0x2f0>)
 8001a9a:	68da      	ldr	r2, [r3, #12]
 8001a9c:	492d      	ldr	r1, [pc, #180]	; (8001b54 <HAL_GPIO_Init+0x2f0>)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	60cb      	str	r3, [r1, #12]
 8001aa4:	e006      	b.n	8001ab4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001aa6:	4b2b      	ldr	r3, [pc, #172]	; (8001b54 <HAL_GPIO_Init+0x2f0>)
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	43db      	mvns	r3, r3
 8001aae:	4929      	ldr	r1, [pc, #164]	; (8001b54 <HAL_GPIO_Init+0x2f0>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d006      	beq.n	8001ace <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ac0:	4b24      	ldr	r3, [pc, #144]	; (8001b54 <HAL_GPIO_Init+0x2f0>)
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	4923      	ldr	r1, [pc, #140]	; (8001b54 <HAL_GPIO_Init+0x2f0>)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	604b      	str	r3, [r1, #4]
 8001acc:	e006      	b.n	8001adc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ace:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <HAL_GPIO_Init+0x2f0>)
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	491f      	ldr	r1, [pc, #124]	; (8001b54 <HAL_GPIO_Init+0x2f0>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d006      	beq.n	8001af6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ae8:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <HAL_GPIO_Init+0x2f0>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4919      	ldr	r1, [pc, #100]	; (8001b54 <HAL_GPIO_Init+0x2f0>)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	600b      	str	r3, [r1, #0]
 8001af4:	e006      	b.n	8001b04 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001af6:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <HAL_GPIO_Init+0x2f0>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	4915      	ldr	r1, [pc, #84]	; (8001b54 <HAL_GPIO_Init+0x2f0>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	3301      	adds	r3, #1
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	fa22 f303 	lsr.w	r3, r2, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f47f aeaf 	bne.w	8001878 <HAL_GPIO_Init+0x14>
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	bf00      	nop
 8001b1e:	372c      	adds	r7, #44	; 0x2c
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	10320000 	.word	0x10320000
 8001b2c:	10310000 	.word	0x10310000
 8001b30:	10220000 	.word	0x10220000
 8001b34:	10210000 	.word	0x10210000
 8001b38:	10120000 	.word	0x10120000
 8001b3c:	10110000 	.word	0x10110000
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40010000 	.word	0x40010000
 8001b48:	40010800 	.word	0x40010800
 8001b4c:	40010c00 	.word	0x40010c00
 8001b50:	40011000 	.word	0x40011000
 8001b54:	40010400 	.word	0x40010400

08001b58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	887b      	ldrh	r3, [r7, #2]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d002      	beq.n	8001b76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
 8001b74:	e001      	b.n	8001b7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b76:	2300      	movs	r3, #0
 8001b78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr

08001b86 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	807b      	strh	r3, [r7, #2]
 8001b92:	4613      	mov	r3, r2
 8001b94:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b96:	787b      	ldrb	r3, [r7, #1]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b9c:	887a      	ldrh	r2, [r7, #2]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ba2:	e003      	b.n	8001bac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ba4:	887b      	ldrh	r3, [r7, #2]
 8001ba6:	041a      	lsls	r2, r3, #16
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	611a      	str	r2, [r3, #16]
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr

08001bb6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b085      	sub	sp, #20
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bc8:	887a      	ldrh	r2, [r7, #2]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	041a      	lsls	r2, r3, #16
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	43d9      	mvns	r1, r3
 8001bd4:	887b      	ldrh	r3, [r7, #2]
 8001bd6:	400b      	ands	r3, r1
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	611a      	str	r2, [r3, #16]
}
 8001bde:	bf00      	nop
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr

08001be8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e26c      	b.n	80020d4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 8087 	beq.w	8001d16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c08:	4b92      	ldr	r3, [pc, #584]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 030c 	and.w	r3, r3, #12
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d00c      	beq.n	8001c2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c14:	4b8f      	ldr	r3, [pc, #572]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 030c 	and.w	r3, r3, #12
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d112      	bne.n	8001c46 <HAL_RCC_OscConfig+0x5e>
 8001c20:	4b8c      	ldr	r3, [pc, #560]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c2c:	d10b      	bne.n	8001c46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2e:	4b89      	ldr	r3, [pc, #548]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d06c      	beq.n	8001d14 <HAL_RCC_OscConfig+0x12c>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d168      	bne.n	8001d14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e246      	b.n	80020d4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c4e:	d106      	bne.n	8001c5e <HAL_RCC_OscConfig+0x76>
 8001c50:	4b80      	ldr	r3, [pc, #512]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a7f      	ldr	r2, [pc, #508]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	e02e      	b.n	8001cbc <HAL_RCC_OscConfig+0xd4>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10c      	bne.n	8001c80 <HAL_RCC_OscConfig+0x98>
 8001c66:	4b7b      	ldr	r3, [pc, #492]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a7a      	ldr	r2, [pc, #488]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	4b78      	ldr	r3, [pc, #480]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a77      	ldr	r2, [pc, #476]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	e01d      	b.n	8001cbc <HAL_RCC_OscConfig+0xd4>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c88:	d10c      	bne.n	8001ca4 <HAL_RCC_OscConfig+0xbc>
 8001c8a:	4b72      	ldr	r3, [pc, #456]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a71      	ldr	r2, [pc, #452]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	4b6f      	ldr	r3, [pc, #444]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a6e      	ldr	r2, [pc, #440]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	e00b      	b.n	8001cbc <HAL_RCC_OscConfig+0xd4>
 8001ca4:	4b6b      	ldr	r3, [pc, #428]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a6a      	ldr	r2, [pc, #424]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	4b68      	ldr	r3, [pc, #416]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a67      	ldr	r2, [pc, #412]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d013      	beq.n	8001cec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7ff fcb6 	bl	8001634 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ccc:	f7ff fcb2 	bl	8001634 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b64      	cmp	r3, #100	; 0x64
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e1fa      	b.n	80020d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cde:	4b5d      	ldr	r3, [pc, #372]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f0      	beq.n	8001ccc <HAL_RCC_OscConfig+0xe4>
 8001cea:	e014      	b.n	8001d16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cec:	f7ff fca2 	bl	8001634 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf4:	f7ff fc9e 	bl	8001634 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b64      	cmp	r3, #100	; 0x64
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e1e6      	b.n	80020d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d06:	4b53      	ldr	r3, [pc, #332]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x10c>
 8001d12:	e000      	b.n	8001d16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d063      	beq.n	8001dea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d22:	4b4c      	ldr	r3, [pc, #304]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f003 030c 	and.w	r3, r3, #12
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00b      	beq.n	8001d46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d2e:	4b49      	ldr	r3, [pc, #292]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d11c      	bne.n	8001d74 <HAL_RCC_OscConfig+0x18c>
 8001d3a:	4b46      	ldr	r3, [pc, #280]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d116      	bne.n	8001d74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d46:	4b43      	ldr	r3, [pc, #268]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d005      	beq.n	8001d5e <HAL_RCC_OscConfig+0x176>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d001      	beq.n	8001d5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e1ba      	b.n	80020d4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5e:	4b3d      	ldr	r3, [pc, #244]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	4939      	ldr	r1, [pc, #228]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d72:	e03a      	b.n	8001dea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d020      	beq.n	8001dbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d7c:	4b36      	ldr	r3, [pc, #216]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d82:	f7ff fc57 	bl	8001634 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d8a:	f7ff fc53 	bl	8001634 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e19b      	b.n	80020d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9c:	4b2d      	ldr	r3, [pc, #180]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0f0      	beq.n	8001d8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da8:	4b2a      	ldr	r3, [pc, #168]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	4927      	ldr	r1, [pc, #156]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	600b      	str	r3, [r1, #0]
 8001dbc:	e015      	b.n	8001dea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dbe:	4b26      	ldr	r3, [pc, #152]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc4:	f7ff fc36 	bl	8001634 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dcc:	f7ff fc32 	bl	8001634 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e17a      	b.n	80020d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dde:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f0      	bne.n	8001dcc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d03a      	beq.n	8001e6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d019      	beq.n	8001e32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dfe:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <HAL_RCC_OscConfig+0x274>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e04:	f7ff fc16 	bl	8001634 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e0c:	f7ff fc12 	bl	8001634 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e15a      	b.n	80020d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	f000 fa9a 	bl	8002364 <RCC_Delay>
 8001e30:	e01c      	b.n	8001e6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <HAL_RCC_OscConfig+0x274>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e38:	f7ff fbfc 	bl	8001634 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e3e:	e00f      	b.n	8001e60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e40:	f7ff fbf8 	bl	8001634 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d908      	bls.n	8001e60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e140      	b.n	80020d4 <HAL_RCC_OscConfig+0x4ec>
 8001e52:	bf00      	nop
 8001e54:	40021000 	.word	0x40021000
 8001e58:	42420000 	.word	0x42420000
 8001e5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e60:	4b9e      	ldr	r3, [pc, #632]	; (80020dc <HAL_RCC_OscConfig+0x4f4>)
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1e9      	bne.n	8001e40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 80a6 	beq.w	8001fc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e7e:	4b97      	ldr	r3, [pc, #604]	; (80020dc <HAL_RCC_OscConfig+0x4f4>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10d      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e8a:	4b94      	ldr	r3, [pc, #592]	; (80020dc <HAL_RCC_OscConfig+0x4f4>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	4a93      	ldr	r2, [pc, #588]	; (80020dc <HAL_RCC_OscConfig+0x4f4>)
 8001e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e94:	61d3      	str	r3, [r2, #28]
 8001e96:	4b91      	ldr	r3, [pc, #580]	; (80020dc <HAL_RCC_OscConfig+0x4f4>)
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea6:	4b8e      	ldr	r3, [pc, #568]	; (80020e0 <HAL_RCC_OscConfig+0x4f8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d118      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eb2:	4b8b      	ldr	r3, [pc, #556]	; (80020e0 <HAL_RCC_OscConfig+0x4f8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a8a      	ldr	r2, [pc, #552]	; (80020e0 <HAL_RCC_OscConfig+0x4f8>)
 8001eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ebe:	f7ff fbb9 	bl	8001634 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec6:	f7ff fbb5 	bl	8001634 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b64      	cmp	r3, #100	; 0x64
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e0fd      	b.n	80020d4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed8:	4b81      	ldr	r3, [pc, #516]	; (80020e0 <HAL_RCC_OscConfig+0x4f8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0f0      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d106      	bne.n	8001efa <HAL_RCC_OscConfig+0x312>
 8001eec:	4b7b      	ldr	r3, [pc, #492]	; (80020dc <HAL_RCC_OscConfig+0x4f4>)
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	4a7a      	ldr	r2, [pc, #488]	; (80020dc <HAL_RCC_OscConfig+0x4f4>)
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	6213      	str	r3, [r2, #32]
 8001ef8:	e02d      	b.n	8001f56 <HAL_RCC_OscConfig+0x36e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10c      	bne.n	8001f1c <HAL_RCC_OscConfig+0x334>
 8001f02:	4b76      	ldr	r3, [pc, #472]	; (80020dc <HAL_RCC_OscConfig+0x4f4>)
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	4a75      	ldr	r2, [pc, #468]	; (80020dc <HAL_RCC_OscConfig+0x4f4>)
 8001f08:	f023 0301 	bic.w	r3, r3, #1
 8001f0c:	6213      	str	r3, [r2, #32]
 8001f0e:	4b73      	ldr	r3, [pc, #460]	; (80020dc <HAL_RCC_OscConfig+0x4f4>)
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	4a72      	ldr	r2, [pc, #456]	; (80020dc <HAL_RCC_OscConfig+0x4f4>)
 8001f14:	f023 0304 	bic.w	r3, r3, #4
 8001f18:	6213      	str	r3, [r2, #32]
 8001f1a:	e01c      	b.n	8001f56 <HAL_RCC_OscConfig+0x36e>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	2b05      	cmp	r3, #5
 8001f22:	d10c      	bne.n	8001f3e <HAL_RCC_OscConfig+0x356>
 8001f24:	4b6d      	ldr	r3, [pc, #436]	; (80020dc <HAL_RCC_OscConfig+0x4f4>)
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	4a6c      	ldr	r2, [pc, #432]	; (80020dc <HAL_RCC_OscConfig+0x4f4>)
 8001f2a:	f043 0304 	orr.w	r3, r3, #4
 8001f2e:	6213      	str	r3, [r2, #32]
 8001f30:	4b6a      	ldr	r3, [pc, #424]	; (80020dc <HAL_RCC_OscConfig+0x4f4>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	4a69      	ldr	r2, [pc, #420]	; (80020dc <HAL_RCC_OscConfig+0x4f4>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6213      	str	r3, [r2, #32]
 8001f3c:	e00b      	b.n	8001f56 <HAL_RCC_OscConfig+0x36e>
 8001f3e:	4b67      	ldr	r3, [pc, #412]	; (80020dc <HAL_RCC_OscConfig+0x4f4>)
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	4a66      	ldr	r2, [pc, #408]	; (80020dc <HAL_RCC_OscConfig+0x4f4>)
 8001f44:	f023 0301 	bic.w	r3, r3, #1
 8001f48:	6213      	str	r3, [r2, #32]
 8001f4a:	4b64      	ldr	r3, [pc, #400]	; (80020dc <HAL_RCC_OscConfig+0x4f4>)
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	4a63      	ldr	r2, [pc, #396]	; (80020dc <HAL_RCC_OscConfig+0x4f4>)
 8001f50:	f023 0304 	bic.w	r3, r3, #4
 8001f54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d015      	beq.n	8001f8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5e:	f7ff fb69 	bl	8001634 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f64:	e00a      	b.n	8001f7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f66:	f7ff fb65 	bl	8001634 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e0ab      	b.n	80020d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7c:	4b57      	ldr	r3, [pc, #348]	; (80020dc <HAL_RCC_OscConfig+0x4f4>)
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0ee      	beq.n	8001f66 <HAL_RCC_OscConfig+0x37e>
 8001f88:	e014      	b.n	8001fb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8a:	f7ff fb53 	bl	8001634 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f90:	e00a      	b.n	8001fa8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f92:	f7ff fb4f 	bl	8001634 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e095      	b.n	80020d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa8:	4b4c      	ldr	r3, [pc, #304]	; (80020dc <HAL_RCC_OscConfig+0x4f4>)
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1ee      	bne.n	8001f92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fb4:	7dfb      	ldrb	r3, [r7, #23]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d105      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fba:	4b48      	ldr	r3, [pc, #288]	; (80020dc <HAL_RCC_OscConfig+0x4f4>)
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	4a47      	ldr	r2, [pc, #284]	; (80020dc <HAL_RCC_OscConfig+0x4f4>)
 8001fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 8081 	beq.w	80020d2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fd0:	4b42      	ldr	r3, [pc, #264]	; (80020dc <HAL_RCC_OscConfig+0x4f4>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 030c 	and.w	r3, r3, #12
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d061      	beq.n	80020a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d146      	bne.n	8002072 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe4:	4b3f      	ldr	r3, [pc, #252]	; (80020e4 <HAL_RCC_OscConfig+0x4fc>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fea:	f7ff fb23 	bl	8001634 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff2:	f7ff fb1f 	bl	8001634 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e067      	b.n	80020d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002004:	4b35      	ldr	r3, [pc, #212]	; (80020dc <HAL_RCC_OscConfig+0x4f4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f0      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002018:	d108      	bne.n	800202c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800201a:	4b30      	ldr	r3, [pc, #192]	; (80020dc <HAL_RCC_OscConfig+0x4f4>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	492d      	ldr	r1, [pc, #180]	; (80020dc <HAL_RCC_OscConfig+0x4f4>)
 8002028:	4313      	orrs	r3, r2
 800202a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800202c:	4b2b      	ldr	r3, [pc, #172]	; (80020dc <HAL_RCC_OscConfig+0x4f4>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a19      	ldr	r1, [r3, #32]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203c:	430b      	orrs	r3, r1
 800203e:	4927      	ldr	r1, [pc, #156]	; (80020dc <HAL_RCC_OscConfig+0x4f4>)
 8002040:	4313      	orrs	r3, r2
 8002042:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002044:	4b27      	ldr	r3, [pc, #156]	; (80020e4 <HAL_RCC_OscConfig+0x4fc>)
 8002046:	2201      	movs	r2, #1
 8002048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204a:	f7ff faf3 	bl	8001634 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002052:	f7ff faef 	bl	8001634 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e037      	b.n	80020d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002064:	4b1d      	ldr	r3, [pc, #116]	; (80020dc <HAL_RCC_OscConfig+0x4f4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x46a>
 8002070:	e02f      	b.n	80020d2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002072:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <HAL_RCC_OscConfig+0x4fc>)
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002078:	f7ff fadc 	bl	8001634 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002080:	f7ff fad8 	bl	8001634 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e020      	b.n	80020d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002092:	4b12      	ldr	r3, [pc, #72]	; (80020dc <HAL_RCC_OscConfig+0x4f4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x498>
 800209e:	e018      	b.n	80020d2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d101      	bne.n	80020ac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e013      	b.n	80020d4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020ac:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <HAL_RCC_OscConfig+0x4f4>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d106      	bne.n	80020ce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d001      	beq.n	80020d2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e000      	b.n	80020d4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40021000 	.word	0x40021000
 80020e0:	40007000 	.word	0x40007000
 80020e4:	42420060 	.word	0x42420060

080020e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e0d0      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020fc:	4b6a      	ldr	r3, [pc, #424]	; (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d910      	bls.n	800212c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210a:	4b67      	ldr	r3, [pc, #412]	; (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 0207 	bic.w	r2, r3, #7
 8002112:	4965      	ldr	r1, [pc, #404]	; (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	4313      	orrs	r3, r2
 8002118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211a:	4b63      	ldr	r3, [pc, #396]	; (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d001      	beq.n	800212c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e0b8      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d020      	beq.n	800217a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d005      	beq.n	8002150 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002144:	4b59      	ldr	r3, [pc, #356]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	4a58      	ldr	r2, [pc, #352]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800214e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800215c:	4b53      	ldr	r3, [pc, #332]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	4a52      	ldr	r2, [pc, #328]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002166:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002168:	4b50      	ldr	r3, [pc, #320]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	494d      	ldr	r1, [pc, #308]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	4313      	orrs	r3, r2
 8002178:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d040      	beq.n	8002208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d107      	bne.n	800219e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218e:	4b47      	ldr	r3, [pc, #284]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d115      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e07f      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d107      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a6:	4b41      	ldr	r3, [pc, #260]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d109      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e073      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b6:	4b3d      	ldr	r3, [pc, #244]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e06b      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021c6:	4b39      	ldr	r3, [pc, #228]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f023 0203 	bic.w	r2, r3, #3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	4936      	ldr	r1, [pc, #216]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021d8:	f7ff fa2c 	bl	8001634 <HAL_GetTick>
 80021dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021de:	e00a      	b.n	80021f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e0:	f7ff fa28 	bl	8001634 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e053      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f6:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f003 020c 	and.w	r2, r3, #12
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	429a      	cmp	r2, r3
 8002206:	d1eb      	bne.n	80021e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002208:	4b27      	ldr	r3, [pc, #156]	; (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d210      	bcs.n	8002238 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002216:	4b24      	ldr	r3, [pc, #144]	; (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 0207 	bic.w	r2, r3, #7
 800221e:	4922      	ldr	r1, [pc, #136]	; (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	4313      	orrs	r3, r2
 8002224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002226:	4b20      	ldr	r3, [pc, #128]	; (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d001      	beq.n	8002238 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e032      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	d008      	beq.n	8002256 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002244:	4b19      	ldr	r3, [pc, #100]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4916      	ldr	r1, [pc, #88]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002252:	4313      	orrs	r3, r2
 8002254:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	2b00      	cmp	r3, #0
 8002260:	d009      	beq.n	8002276 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002262:	4b12      	ldr	r3, [pc, #72]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	490e      	ldr	r1, [pc, #56]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	4313      	orrs	r3, r2
 8002274:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002276:	f000 f821 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 800227a:	4602      	mov	r2, r0
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	091b      	lsrs	r3, r3, #4
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	490a      	ldr	r1, [pc, #40]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002288:	5ccb      	ldrb	r3, [r1, r3]
 800228a:	fa22 f303 	lsr.w	r3, r2, r3
 800228e:	4a09      	ldr	r2, [pc, #36]	; (80022b4 <HAL_RCC_ClockConfig+0x1cc>)
 8002290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002292:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff f98a 	bl	80015b0 <HAL_InitTick>

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40022000 	.word	0x40022000
 80022ac:	40021000 	.word	0x40021000
 80022b0:	08002bc8 	.word	0x08002bc8
 80022b4:	20000008 	.word	0x20000008
 80022b8:	20000034 	.word	0x20000034

080022bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	b087      	sub	sp, #28
 80022c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	2300      	movs	r3, #0
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	2300      	movs	r3, #0
 80022d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022d6:	4b1e      	ldr	r3, [pc, #120]	; (8002350 <HAL_RCC_GetSysClockFreq+0x94>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f003 030c 	and.w	r3, r3, #12
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d002      	beq.n	80022ec <HAL_RCC_GetSysClockFreq+0x30>
 80022e6:	2b08      	cmp	r3, #8
 80022e8:	d003      	beq.n	80022f2 <HAL_RCC_GetSysClockFreq+0x36>
 80022ea:	e027      	b.n	800233c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022ec:	4b19      	ldr	r3, [pc, #100]	; (8002354 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ee:	613b      	str	r3, [r7, #16]
      break;
 80022f0:	e027      	b.n	8002342 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	0c9b      	lsrs	r3, r3, #18
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	4a17      	ldr	r2, [pc, #92]	; (8002358 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022fc:	5cd3      	ldrb	r3, [r2, r3]
 80022fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d010      	beq.n	800232c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800230a:	4b11      	ldr	r3, [pc, #68]	; (8002350 <HAL_RCC_GetSysClockFreq+0x94>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	0c5b      	lsrs	r3, r3, #17
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	4a11      	ldr	r2, [pc, #68]	; (800235c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002316:	5cd3      	ldrb	r3, [r2, r3]
 8002318:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a0d      	ldr	r2, [pc, #52]	; (8002354 <HAL_RCC_GetSysClockFreq+0x98>)
 800231e:	fb02 f203 	mul.w	r2, r2, r3
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	fbb2 f3f3 	udiv	r3, r2, r3
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	e004      	b.n	8002336 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a0c      	ldr	r2, [pc, #48]	; (8002360 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002330:	fb02 f303 	mul.w	r3, r2, r3
 8002334:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	613b      	str	r3, [r7, #16]
      break;
 800233a:	e002      	b.n	8002342 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <HAL_RCC_GetSysClockFreq+0x98>)
 800233e:	613b      	str	r3, [r7, #16]
      break;
 8002340:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002342:	693b      	ldr	r3, [r7, #16]
}
 8002344:	4618      	mov	r0, r3
 8002346:	371c      	adds	r7, #28
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40021000 	.word	0x40021000
 8002354:	007a1200 	.word	0x007a1200
 8002358:	08002bd8 	.word	0x08002bd8
 800235c:	08002be8 	.word	0x08002be8
 8002360:	003d0900 	.word	0x003d0900

08002364 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800236c:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <RCC_Delay+0x34>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a0a      	ldr	r2, [pc, #40]	; (800239c <RCC_Delay+0x38>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	0a5b      	lsrs	r3, r3, #9
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	fb02 f303 	mul.w	r3, r2, r3
 800237e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002380:	bf00      	nop
  }
  while (Delay --);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	1e5a      	subs	r2, r3, #1
 8002386:	60fa      	str	r2, [r7, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1f9      	bne.n	8002380 <RCC_Delay+0x1c>
}
 800238c:	bf00      	nop
 800238e:	bf00      	nop
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr
 8002398:	20000008 	.word	0x20000008
 800239c:	10624dd3 	.word	0x10624dd3

080023a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e041      	b.n	8002436 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d106      	bne.n	80023cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7fe ff1c 	bl	8001204 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2202      	movs	r2, #2
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3304      	adds	r3, #4
 80023dc:	4619      	mov	r1, r3
 80023de:	4610      	mov	r0, r2
 80023e0:	f000 fa56 	bl	8002890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
	...

08002440 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b01      	cmp	r3, #1
 8002452:	d001      	beq.n	8002458 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e035      	b.n	80024c4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2202      	movs	r2, #2
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0201 	orr.w	r2, r2, #1
 800246e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a16      	ldr	r2, [pc, #88]	; (80024d0 <HAL_TIM_Base_Start_IT+0x90>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d009      	beq.n	800248e <HAL_TIM_Base_Start_IT+0x4e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002482:	d004      	beq.n	800248e <HAL_TIM_Base_Start_IT+0x4e>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a12      	ldr	r2, [pc, #72]	; (80024d4 <HAL_TIM_Base_Start_IT+0x94>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d111      	bne.n	80024b2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2b06      	cmp	r3, #6
 800249e:	d010      	beq.n	80024c2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0201 	orr.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024b0:	e007      	b.n	80024c2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f042 0201 	orr.w	r2, r2, #1
 80024c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40012c00 	.word	0x40012c00
 80024d4:	40000400 	.word	0x40000400

080024d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d020      	beq.n	800253c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d01b      	beq.n	800253c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f06f 0202 	mvn.w	r2, #2
 800250c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f998 	bl	8002858 <HAL_TIM_IC_CaptureCallback>
 8002528:	e005      	b.n	8002536 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f98b 	bl	8002846 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f99a 	bl	800286a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	2b00      	cmp	r3, #0
 8002544:	d020      	beq.n	8002588 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	d01b      	beq.n	8002588 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f06f 0204 	mvn.w	r2, #4
 8002558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2202      	movs	r2, #2
 800255e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f972 	bl	8002858 <HAL_TIM_IC_CaptureCallback>
 8002574:	e005      	b.n	8002582 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f965 	bl	8002846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f974 	bl	800286a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b00      	cmp	r3, #0
 8002590:	d020      	beq.n	80025d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d01b      	beq.n	80025d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f06f 0208 	mvn.w	r2, #8
 80025a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2204      	movs	r2, #4
 80025aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f94c 	bl	8002858 <HAL_TIM_IC_CaptureCallback>
 80025c0:	e005      	b.n	80025ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f93f 	bl	8002846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f94e 	bl	800286a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f003 0310 	and.w	r3, r3, #16
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d020      	beq.n	8002620 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f003 0310 	and.w	r3, r3, #16
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d01b      	beq.n	8002620 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f06f 0210 	mvn.w	r2, #16
 80025f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2208      	movs	r2, #8
 80025f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f926 	bl	8002858 <HAL_TIM_IC_CaptureCallback>
 800260c:	e005      	b.n	800261a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f919 	bl	8002846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f928 	bl	800286a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00c      	beq.n	8002644 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b00      	cmp	r3, #0
 8002632:	d007      	beq.n	8002644 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f06f 0201 	mvn.w	r2, #1
 800263c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7fe fd8a 	bl	8001158 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00c      	beq.n	8002668 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002654:	2b00      	cmp	r3, #0
 8002656:	d007      	beq.n	8002668 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 fa6f 	bl	8002b46 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00c      	beq.n	800268c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002678:	2b00      	cmp	r3, #0
 800267a:	d007      	beq.n	800268c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f8f8 	bl	800287c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f003 0320 	and.w	r3, r3, #32
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00c      	beq.n	80026b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f003 0320 	and.w	r3, r3, #32
 800269c:	2b00      	cmp	r3, #0
 800269e:	d007      	beq.n	80026b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f06f 0220 	mvn.w	r2, #32
 80026a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 fa42 	bl	8002b34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026b0:	bf00      	nop
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d101      	bne.n	80026d4 <HAL_TIM_ConfigClockSource+0x1c>
 80026d0:	2302      	movs	r3, #2
 80026d2:	e0b4      	b.n	800283e <HAL_TIM_ConfigClockSource+0x186>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800270c:	d03e      	beq.n	800278c <HAL_TIM_ConfigClockSource+0xd4>
 800270e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002712:	f200 8087 	bhi.w	8002824 <HAL_TIM_ConfigClockSource+0x16c>
 8002716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800271a:	f000 8086 	beq.w	800282a <HAL_TIM_ConfigClockSource+0x172>
 800271e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002722:	d87f      	bhi.n	8002824 <HAL_TIM_ConfigClockSource+0x16c>
 8002724:	2b70      	cmp	r3, #112	; 0x70
 8002726:	d01a      	beq.n	800275e <HAL_TIM_ConfigClockSource+0xa6>
 8002728:	2b70      	cmp	r3, #112	; 0x70
 800272a:	d87b      	bhi.n	8002824 <HAL_TIM_ConfigClockSource+0x16c>
 800272c:	2b60      	cmp	r3, #96	; 0x60
 800272e:	d050      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0x11a>
 8002730:	2b60      	cmp	r3, #96	; 0x60
 8002732:	d877      	bhi.n	8002824 <HAL_TIM_ConfigClockSource+0x16c>
 8002734:	2b50      	cmp	r3, #80	; 0x50
 8002736:	d03c      	beq.n	80027b2 <HAL_TIM_ConfigClockSource+0xfa>
 8002738:	2b50      	cmp	r3, #80	; 0x50
 800273a:	d873      	bhi.n	8002824 <HAL_TIM_ConfigClockSource+0x16c>
 800273c:	2b40      	cmp	r3, #64	; 0x40
 800273e:	d058      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0x13a>
 8002740:	2b40      	cmp	r3, #64	; 0x40
 8002742:	d86f      	bhi.n	8002824 <HAL_TIM_ConfigClockSource+0x16c>
 8002744:	2b30      	cmp	r3, #48	; 0x30
 8002746:	d064      	beq.n	8002812 <HAL_TIM_ConfigClockSource+0x15a>
 8002748:	2b30      	cmp	r3, #48	; 0x30
 800274a:	d86b      	bhi.n	8002824 <HAL_TIM_ConfigClockSource+0x16c>
 800274c:	2b20      	cmp	r3, #32
 800274e:	d060      	beq.n	8002812 <HAL_TIM_ConfigClockSource+0x15a>
 8002750:	2b20      	cmp	r3, #32
 8002752:	d867      	bhi.n	8002824 <HAL_TIM_ConfigClockSource+0x16c>
 8002754:	2b00      	cmp	r3, #0
 8002756:	d05c      	beq.n	8002812 <HAL_TIM_ConfigClockSource+0x15a>
 8002758:	2b10      	cmp	r3, #16
 800275a:	d05a      	beq.n	8002812 <HAL_TIM_ConfigClockSource+0x15a>
 800275c:	e062      	b.n	8002824 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	6899      	ldr	r1, [r3, #8]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f000 f96a 	bl	8002a46 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002780:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	609a      	str	r2, [r3, #8]
      break;
 800278a:	e04f      	b.n	800282c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6818      	ldr	r0, [r3, #0]
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	6899      	ldr	r1, [r3, #8]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	f000 f953 	bl	8002a46 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027ae:	609a      	str	r2, [r3, #8]
      break;
 80027b0:	e03c      	b.n	800282c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6818      	ldr	r0, [r3, #0]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	6859      	ldr	r1, [r3, #4]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	461a      	mov	r2, r3
 80027c0:	f000 f8ca 	bl	8002958 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2150      	movs	r1, #80	; 0x50
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 f921 	bl	8002a12 <TIM_ITRx_SetConfig>
      break;
 80027d0:	e02c      	b.n	800282c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6818      	ldr	r0, [r3, #0]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	6859      	ldr	r1, [r3, #4]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	461a      	mov	r2, r3
 80027e0:	f000 f8e8 	bl	80029b4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2160      	movs	r1, #96	; 0x60
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 f911 	bl	8002a12 <TIM_ITRx_SetConfig>
      break;
 80027f0:	e01c      	b.n	800282c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6818      	ldr	r0, [r3, #0]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	6859      	ldr	r1, [r3, #4]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	461a      	mov	r2, r3
 8002800:	f000 f8aa 	bl	8002958 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2140      	movs	r1, #64	; 0x40
 800280a:	4618      	mov	r0, r3
 800280c:	f000 f901 	bl	8002a12 <TIM_ITRx_SetConfig>
      break;
 8002810:	e00c      	b.n	800282c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4619      	mov	r1, r3
 800281c:	4610      	mov	r0, r2
 800281e:	f000 f8f8 	bl	8002a12 <TIM_ITRx_SetConfig>
      break;
 8002822:	e003      	b.n	800282c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	73fb      	strb	r3, [r7, #15]
      break;
 8002828:	e000      	b.n	800282c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800282a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800283c:	7bfb      	ldrb	r3, [r7, #15]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr

0800286a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr
	...

08002890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a2b      	ldr	r2, [pc, #172]	; (8002950 <TIM_Base_SetConfig+0xc0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d007      	beq.n	80028b8 <TIM_Base_SetConfig+0x28>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ae:	d003      	beq.n	80028b8 <TIM_Base_SetConfig+0x28>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a28      	ldr	r2, [pc, #160]	; (8002954 <TIM_Base_SetConfig+0xc4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d108      	bne.n	80028ca <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a20      	ldr	r2, [pc, #128]	; (8002950 <TIM_Base_SetConfig+0xc0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d007      	beq.n	80028e2 <TIM_Base_SetConfig+0x52>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d8:	d003      	beq.n	80028e2 <TIM_Base_SetConfig+0x52>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a1d      	ldr	r2, [pc, #116]	; (8002954 <TIM_Base_SetConfig+0xc4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d108      	bne.n	80028f4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	4313      	orrs	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a0d      	ldr	r2, [pc, #52]	; (8002950 <TIM_Base_SetConfig+0xc0>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d103      	bne.n	8002928 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d005      	beq.n	8002946 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	f023 0201 	bic.w	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	611a      	str	r2, [r3, #16]
  }
}
 8002946:	bf00      	nop
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr
 8002950:	40012c00 	.word	0x40012c00
 8002954:	40000400 	.word	0x40000400

08002958 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002958:	b480      	push	{r7}
 800295a:	b087      	sub	sp, #28
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	f023 0201 	bic.w	r2, r3, #1
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002982:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	4313      	orrs	r3, r2
 800298c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f023 030a 	bic.w	r3, r3, #10
 8002994:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	4313      	orrs	r3, r2
 800299c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	621a      	str	r2, [r3, #32]
}
 80029aa:	bf00      	nop
 80029ac:	371c      	adds	r7, #28
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr

080029b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	f023 0210 	bic.w	r2, r3, #16
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	031b      	lsls	r3, r3, #12
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	621a      	str	r2, [r3, #32]
}
 8002a08:	bf00      	nop
 8002a0a:	371c      	adds	r7, #28
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr

08002a12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b085      	sub	sp, #20
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f043 0307 	orr.w	r3, r3, #7
 8002a34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	609a      	str	r2, [r3, #8]
}
 8002a3c:	bf00      	nop
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr

08002a46 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b087      	sub	sp, #28
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	60f8      	str	r0, [r7, #12]
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	607a      	str	r2, [r7, #4]
 8002a52:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a60:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	021a      	lsls	r2, r3, #8
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	609a      	str	r2, [r3, #8]
}
 8002a7a:	bf00      	nop
 8002a7c:	371c      	adds	r7, #28
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr

08002a84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e041      	b.n	8002b20 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a14      	ldr	r2, [pc, #80]	; (8002b2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d009      	beq.n	8002af4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae8:	d004      	beq.n	8002af4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a10      	ldr	r2, [pc, #64]	; (8002b30 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d10c      	bne.n	8002b0e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002afa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40012c00 	.word	0x40012c00
 8002b30:	40000400 	.word	0x40000400

08002b34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr

08002b46 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <__libc_init_array>:
 8002b58:	b570      	push	{r4, r5, r6, lr}
 8002b5a:	2600      	movs	r6, #0
 8002b5c:	4d0c      	ldr	r5, [pc, #48]	; (8002b90 <__libc_init_array+0x38>)
 8002b5e:	4c0d      	ldr	r4, [pc, #52]	; (8002b94 <__libc_init_array+0x3c>)
 8002b60:	1b64      	subs	r4, r4, r5
 8002b62:	10a4      	asrs	r4, r4, #2
 8002b64:	42a6      	cmp	r6, r4
 8002b66:	d109      	bne.n	8002b7c <__libc_init_array+0x24>
 8002b68:	f000 f822 	bl	8002bb0 <_init>
 8002b6c:	2600      	movs	r6, #0
 8002b6e:	4d0a      	ldr	r5, [pc, #40]	; (8002b98 <__libc_init_array+0x40>)
 8002b70:	4c0a      	ldr	r4, [pc, #40]	; (8002b9c <__libc_init_array+0x44>)
 8002b72:	1b64      	subs	r4, r4, r5
 8002b74:	10a4      	asrs	r4, r4, #2
 8002b76:	42a6      	cmp	r6, r4
 8002b78:	d105      	bne.n	8002b86 <__libc_init_array+0x2e>
 8002b7a:	bd70      	pop	{r4, r5, r6, pc}
 8002b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b80:	4798      	blx	r3
 8002b82:	3601      	adds	r6, #1
 8002b84:	e7ee      	b.n	8002b64 <__libc_init_array+0xc>
 8002b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b8a:	4798      	blx	r3
 8002b8c:	3601      	adds	r6, #1
 8002b8e:	e7f2      	b.n	8002b76 <__libc_init_array+0x1e>
 8002b90:	08002bec 	.word	0x08002bec
 8002b94:	08002bec 	.word	0x08002bec
 8002b98:	08002bec 	.word	0x08002bec
 8002b9c:	08002bf0 	.word	0x08002bf0

08002ba0 <memset>:
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	4402      	add	r2, r0
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d100      	bne.n	8002baa <memset+0xa>
 8002ba8:	4770      	bx	lr
 8002baa:	f803 1b01 	strb.w	r1, [r3], #1
 8002bae:	e7f9      	b.n	8002ba4 <memset+0x4>

08002bb0 <_init>:
 8002bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bb2:	bf00      	nop
 8002bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bb6:	bc08      	pop	{r3}
 8002bb8:	469e      	mov	lr, r3
 8002bba:	4770      	bx	lr

08002bbc <_fini>:
 8002bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bbe:	bf00      	nop
 8002bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bc2:	bc08      	pop	{r3}
 8002bc4:	469e      	mov	lr, r3
 8002bc6:	4770      	bx	lr
